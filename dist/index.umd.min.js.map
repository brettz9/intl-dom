{"version":3,"file":"index.umd.min.js","sources":["../src/utils.js","../src/shared.js","../src/collation.js","../src/defaultAllSubstitutions.js","../src/Formatter.js","../src/promiseChainForValues.js","../src/defaultLocaleResolver.js","../src/defaultInsertNodes.js","../src/defaultKeyCheckerConverter.js","../src/getMessageForKeyByStyle.js","../src/getStringFromMessageAndDefaults.js","../src/getDOMForLocaleString.js","../src/findLocaleStrings.js","../src/i18n.js"],"sourcesContent":["// We want it to work in the browser, so commenting out\n// import jsonExtra from 'json5';\n// import jsonExtra from 'json-6';\n\nlet _jsonExtra = globalThis.jsonExtra;\nexport const setJSONExtra = (__jsonExtra) => {\n  _jsonExtra = __jsonExtra;\n};\n\nexport const unescapeBackslashes = (str) => {\n  return str.replace(/\\\\+/gu, (esc) => {\n    return esc.slice(0, esc.length / 2);\n  });\n};\n\nexport const parseJSONExtra = (args) => {\n  return _jsonExtra.parse(\n    // Doesn't actually currently allow explicit brackets,\n    //  but in case we change our regex to allow inner brackets\n    '{' + (args || '').replace(/^\\{/u, '').replace(/\\}$/u, '') + '}'\n  );\n};\n\n// Todo: Extract to own library (RegExtras?)\nexport const processRegex = (regex, str, {\n  onMatch,\n  extra,\n  betweenMatches,\n  afterMatch,\n  escapeAtOne\n}) => {\n  let match;\n  let previousIndex = 0;\n  if (extra) {\n    betweenMatches = extra;\n    afterMatch = extra;\n    escapeAtOne = extra;\n  }\n  while ((match = regex.exec(str)) !== null) {\n    const [_, esc] = match;\n    const {lastIndex} = regex;\n\n    const startMatchPos = lastIndex - _.length;\n    if (startMatchPos > previousIndex) {\n      betweenMatches(str.slice(previousIndex, startMatchPos));\n    }\n\n    if (escapeAtOne && esc.length % 2) {\n      previousIndex = lastIndex;\n      escapeAtOne(_);\n      continue;\n    }\n    onMatch(...match);\n    previousIndex = lastIndex;\n  }\n  if (previousIndex !== str.length) { // Get text at end\n    afterMatch(str.slice(previousIndex));\n  }\n};\n","/* globals fetch, document */\nlet _fetch = typeof fetch !== 'undefined'\n  ? fetch\n  /* c8 ignore next */\n  : null;\n\n/**\n * @param {fetch} f\n * @returns {void}\n */\nexport const setFetch = (f) => {\n  _fetch = f;\n};\n\n/**\n * @returns {fetch}\n */\nexport const getFetch = () => {\n  return _fetch;\n};\n\nlet _doc = typeof document !== 'undefined'\n  /* c8 ignore next */\n  ? document\n  : null;\n\n/**\n * @param {document} doc\n * @returns {void}\n */\nexport const setDocument = (doc) => {\n  _doc = doc;\n};\n\n/**\n * @returns {document}\n */\nexport const getDocument = () => {\n  return _doc;\n};\n","/* globals performance */\nimport {processRegex} from './utils.js';\nimport {getDocument} from './shared.js';\n\nexport {setDocument, getDocument} from './shared.js';\n\n/**\n *\n * @returns {string}\n */\nfunction generateUUID () { //  Adapted from original: public domain/MIT: http://stackoverflow.com/a/8809472/271577\n  let d = Date.now();\n  /* c8 ignore next 5 */\n  if (typeof performance !== 'undefined' &&\n      typeof performance.now === 'function'\n  ) {\n    d += performance.now(); // use high-precision timer if available\n  }\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/gu, function (c) {\n    /* eslint-disable no-bitwise */\n    const r = Math.trunc((d + Math.random() * 16) % 16);\n    d = Math.floor(d / 16);\n    return (c === 'x' ? r : (r & 0x3 | 0x8)).toString(16);\n    /* eslint-enable no-bitwise */\n  });\n}\n\nexport const sort = (locale, arrayOfItems, options) => {\n  return arrayOfItems.sort(new Intl.Collator(\n    locale,\n    options\n  ).compare);\n};\n\nexport const list = (locale, arrayOfItems, options) => {\n  return new Intl.ListFormat(\n    locale, options\n  ).format(arrayOfItems);\n};\n\nexport const sortListSimple = (\n  locale, arrayOfItems, listOptions, collationOptions\n) => {\n  sort(locale, arrayOfItems, collationOptions);\n  return list(locale, arrayOfItems, listOptions);\n};\n\nexport const sortList = (\n  locale, arrayOfItems, map, listOptions, collationOptions\n) => {\n  if (typeof map !== 'function') {\n    return sortListSimple(locale, arrayOfItems, map, listOptions);\n  }\n  sort(locale, arrayOfItems, collationOptions);\n\n  const randomId = generateUUID();\n\n  const placeholderArray = [...arrayOfItems].map(\n    (_, i) => `<<${randomId}${i}>>`\n  );\n  const nodes = [];\n  const push = (...args) => {\n    nodes.push(...args);\n  };\n\n  processRegex(\n    // // eslint-disable-next-line prefer-named-capture-group\n    new RegExp(`<<${randomId}(\\\\d)>>`, 'gu'),\n    list(locale, placeholderArray, listOptions), {\n      betweenMatches: push,\n      afterMatch: push,\n      onMatch (_, idx) {\n        push(map(arrayOfItems[idx], idx));\n      }\n    }\n  );\n  const _doc = getDocument();\n  const container = _doc.createDocumentFragment();\n  container.append(...nodes);\n  return container;\n};\n","import {parseJSONExtra} from './utils.js';\nimport {sortList} from './collation.js';\n\nexport const getFormatterInfo = ({object}) => {\n  if (Array.isArray(object)) {\n    if (typeof object[1] === 'function') {\n      const [value, callback, options, extraOpts] = object;\n      return {value, callback, options, extraOpts};\n    }\n    const [value, options, extraOpts] = object;\n    return {value, options, extraOpts};\n  }\n  return {value: object};\n};\n\n/* eslint-disable max-len */\n/**\n * Callback to give replacement text based on a substitution value.\n * @callback AllSubstitutionCallback\n * @param {PlainObject} cfg\n * @param {string|Node|number|Date|RelativeTimeInfo|ListInfo|NumberInfo|DateInfo} cfg.value Contains\n *   the value returned by the individual substitution\n * @param {string} cfg.arg See `cfg.arg` of {@link SubstitutionCallback}.\n * @param {string} cfg.key The substitution key Not currently in use\n * @param {string} cfg.locale The locale\n * @returns {string|Element} The replacement text or element\n*/\n/* eslint-enable max-len */\n\n/**\n * @type {AllSubstitutionCallback}\n */\nexport const defaultAllSubstitutions = ({value, arg, key, locale}) => {\n  // Strings or DOM Nodes\n  if (\n    typeof value === 'string' || (value && typeof value === 'object' &&\n    'nodeType' in value)\n  ) {\n    return value;\n  }\n\n  let opts;\n\n  const applyArgs = ({type, options = opts, checkArgOptions = false}) => {\n    if (typeof arg === 'string') {\n      let [userType, extraArgs, argOptions] = arg.split('|');\n      // Alias\n      if (userType === 'DATE') {\n        userType = 'DATETIME';\n      }\n      if (userType === type) {\n        if (!extraArgs) {\n          options = {};\n        } else if (!checkArgOptions || argOptions) {\n          // Todo: Allow escaping and restoring of pipe symbol\n          options = {\n            ...options,\n            ...parseJSONExtra(\n              checkArgOptions && argOptions ? argOptions : extraArgs\n            )\n          };\n        }\n      }\n    }\n    return options;\n  };\n\n  let expectsDatetime = false;\n  if (value && typeof value === 'object' && !Array.isArray(value)) {\n    const singleKey = Object.keys(value)[0];\n    if ([\n      'number', 'date', 'datetime', 'dateRange', 'datetimeRange', 'relative',\n      'region', 'language', 'script', 'currency',\n      'list', 'plural'\n    ].includes(singleKey)) {\n      let extraOpts, callback;\n      ({\n        value, options: opts, extraOpts, callback\n      } = getFormatterInfo({object: value[singleKey]}));\n\n      switch (singleKey) {\n      case 'date': case 'datetime':\n        expectsDatetime = true;\n        break;\n      case 'dateRange': case 'datetimeRange':\n        return new Intl.DateTimeFormat(\n          locale,\n          applyArgs({type: 'DATERANGE', options: extraOpts})\n        ).formatRange(...[value, opts].map((val) => {\n          return typeof val === 'number' ? new Date(val) : val;\n        }));\n      case 'region': case 'language': case 'script': case 'currency':\n        return new Intl.DisplayNames(\n          locale, {\n            ...applyArgs({type: singleKey.toUpperCase()}),\n            type: singleKey\n          }\n        ).of(value);\n      case 'relative':\n        // The second argument actually contains the primary options, so swap\n        [extraOpts, opts] = [opts, extraOpts];\n        return new Intl.RelativeTimeFormat(\n          locale, applyArgs({type: 'RELATIVE'})\n        ).format(value, extraOpts);\n\n      // ListFormat (with Collator)\n      case 'list':\n        if (callback) {\n          return sortList(\n            locale, value, callback,\n            applyArgs({type: 'LIST'}),\n            applyArgs({\n              type: 'LIST', options: extraOpts, checkArgOptions: true\n            })\n          );\n        }\n        return sortList(locale, value, applyArgs({type: 'LIST'}), applyArgs({\n          type: 'LIST', options: extraOpts, checkArgOptions: true\n        }));\n      default:\n        // Let `number` and `date` types drop through so their options\n        //  can be applied\n        // Let `plural` be treated as number (since value should be a number)\n        break;\n      }\n    }\n  }\n\n  // Dates\n  if (\n    value\n  ) {\n    if (\n      typeof value === 'number' &&\n      (expectsDatetime || (/^DATE(?:TIME)(?:\\||$)/u).test(arg))\n    ) {\n      value = new Date(value);\n    }\n    if (typeof value === 'object' && typeof value.getTime === 'function') {\n      return new Intl.DateTimeFormat(\n        locale,\n        applyArgs({type: 'DATETIME'})\n      ).format(value);\n    }\n  }\n\n  // Date range\n  if (Array.isArray(value)) {\n    const extraOpts = value[2];\n    return new Intl.DateTimeFormat(\n      locale,\n      applyArgs({type: 'DATERANGE', options: extraOpts})\n    ).formatRange(...value.slice(0, 2).map((val) => {\n      return typeof val === 'number' ? new Date(val) : val;\n    }));\n  }\n\n  // Numbers\n  if (typeof value === 'number') {\n    return new Intl.NumberFormat(\n      locale,\n      applyArgs({type: 'NUMBER'})\n    ).format(value);\n  }\n\n  // console.log('value', value);\n  throw new TypeError('Unknown formatter');\n};\n","import {getMessageForKeyByStyle} from './index.js';\nimport {parseJSONExtra} from './utils.js';\nimport {getFormatterInfo} from './defaultAllSubstitutions.js';\n\n/**\n * Base class for formatting.\n */\nexport class Formatter {\n}\n\n/**\n * @param {PlainObject} cfg\n * @param {string} cfg.key\n * @param {LocaleBody} cfg.body\n * @param {string} cfg.type\n * @param {\"richNested\"|\"rich\"|\"plain\"|\n *   \"plainNested\"|MessageStyleCallback} cfg.messageStyle\n * @returns {string|Element}\n */\nconst getSubstitution = ({key, body, type, messageStyle = 'richNested'}) => {\n  const messageForKey = getMessageForKeyByStyle({messageStyle});\n  const substitution = messageForKey({body}, key);\n  if (!substitution) {\n    throw new Error(`Key value not found for ${type} key: (${key})`);\n  }\n  // We don't allow a substitution function here or below as comes\n  //  from locale and locale content should not pose security concerns\n  return substitution.value;\n};\n\n/**\n * Formatter for local variables.\n */\nexport class LocalFormatter extends Formatter {\n  /**\n   * @param {LocalObject} locals\n   */\n  constructor (locals) {\n    super();\n    this.locals = locals;\n  }\n  /**\n   * @param {string} key\n   * @returns {string|Element}\n   */\n  getSubstitution (key) {\n    return getSubstitution({\n      key: key.slice(1), body: this.locals, type: 'local'\n    });\n  }\n  /**\n   * @param {string} key\n   * @returns {boolean}\n   */\n  isMatch (key) {\n    const components = key.slice(1).split('.');\n    let parent = this.locals;\n    return this.constructor.isMatchingKey(key) && components.every((cmpt) => {\n      const result = cmpt in parent;\n      parent = parent[cmpt];\n      return result;\n    });\n  }\n  /**\n   * @param {string} key\n   * @returns {boolean}\n   */\n  static isMatchingKey (key) {\n    return key.startsWith('-');\n  }\n}\n\n/**\n * Formatter for regular variables.\n */\nexport class RegularFormatter extends Formatter {\n  /**\n   * @param {SubstitutionObject} substitutions\n   */\n  constructor (substitutions) {\n    super();\n    this.substitutions = substitutions;\n  }\n  /**\n   * @param {string} key\n   * @returns {boolean}\n   */\n  isMatch (key) {\n    return this.constructor.isMatchingKey(key) && key in this.substitutions;\n  }\n  /**\n   * @param {string} key\n   * @returns {boolean}\n   */\n  static isMatchingKey (key) {\n    return (/^\\w/u).test(key);\n  }\n}\n\n/**\n * Formatter for switch variables.\n */\nexport class SwitchFormatter extends Formatter {\n  /**\n   * @param {Switches} switches\n   * @param {SubstitutionObject} substitutions\n   */\n  constructor (switches, {substitutions}) {\n    super();\n    this.switches = switches;\n    this.substitutions = substitutions;\n  }\n\n  /**\n   * @param {string} key\n   * @param {PlainObject} cfg\n   * @param {string} cfg.locale\n   * @param {string[]} cfg.usedKeys\n   * @param {string} cfg.arg\n   * @param {MissingSuppliedFormattersCallback} cfg.missingSuppliedFormatters\n   * @returns {string}\n   */\n  getSubstitution (key, {locale, usedKeys, arg, missingSuppliedFormatters}) {\n    const ky = this.constructor.getKey(key).slice(1);\n    // Expression might not actually use formatter, e.g., for singular,\n    //  the conditional might just write out \"one\"\n\n    const [objKey, body, keySegment] = this.getMatch(ky);\n    usedKeys.push(keySegment);\n\n    let type, opts;\n    if (objKey && objKey.includes('|')) {\n      [, type, opts] = objKey.split('|');\n    }\n    if (!body) {\n      missingSuppliedFormatters({\n        key,\n        formatter: this\n      });\n      return '\\\\{' + key + '}';\n    }\n\n    /*\n    if (!(ky in this.substitutions)) {\n      throw new Error(`Switch expecting formatter: ${ky}`);\n    }\n    */\n\n    const getNumberFormat = (value, defaultOptions) => {\n      const numberOpts = parseJSONExtra(opts);\n      return new Intl.NumberFormat(locale, {\n        ...defaultOptions, ...numberOpts\n      }).format(value);\n    };\n\n    const getPluralFormat = (value, defaultOptions) => {\n      const pluralOpts = parseJSONExtra(opts);\n      return new Intl.PluralRules(locale, {\n        ...defaultOptions, ...pluralOpts\n      }).select(value);\n    };\n\n    const formatterValue = this.substitutions[keySegment];\n\n    let match = formatterValue;\n    if (typeof formatterValue === 'number') {\n      switch (type) {\n      case 'NUMBER':\n        match = getNumberFormat(formatterValue);\n        break;\n      case 'PLURAL':\n        match = getPluralFormat(formatterValue);\n        break;\n      default:\n        match = new Intl.PluralRules(locale).select(formatterValue);\n        break;\n      }\n    } else if (formatterValue && typeof formatterValue === 'object') {\n      const singleKey = Object.keys(formatterValue)[0];\n      if (['number', 'plural'].includes(singleKey)) {\n        const {value, options} = getFormatterInfo({\n          object: formatterValue[singleKey]\n        });\n        if (!type) {\n          type = singleKey.toUpperCase();\n        }\n        const typeMatches = singleKey.toUpperCase() === type;\n        if (!typeMatches) {\n          throw new TypeError(\n            `Expecting type \"${\n              type.toLowerCase()\n            }\"; instead found \"${singleKey}\".`\n          );\n        }\n        // eslint-disable-next-line default-case\n        switch (type) {\n        case 'NUMBER':\n          match = getNumberFormat(value, options);\n          break;\n        case 'PLURAL':\n          match = getPluralFormat(value, options);\n          break;\n        }\n      }\n    }\n\n    // We do not want the default `richNested` here as that will split\n    //  up the likes of `0.0`\n    const messageStyle = 'richNested';\n\n    const preventNesting = (s) => {\n      return s.replace(/\\\\/gu, '\\\\\\\\').replace(/\\./gu, '\\\\.');\n    };\n\n    try {\n      return getSubstitution({\n        messageStyle,\n        key: match ? preventNesting(match) : arg,\n        body,\n        type: 'switch'\n      });\n    } catch (err) {\n      try {\n        return getSubstitution({\n          messageStyle, key: '*' + preventNesting(match), body, type: 'switch'\n        });\n      } catch (error) {\n        const k = Object.keys(body).find(\n          (switchKey) => switchKey.startsWith('*')\n        );\n        if (!k) {\n          throw new Error(`No defaults found for switch ${ky}`);\n        }\n        return getSubstitution({\n          messageStyle, key: preventNesting(k), body, type: 'switch'\n        });\n      }\n    }\n  }\n\n  /**\n   * @param {string} key\n   * @returns {boolean}\n   */\n  isMatch (key) {\n    return key && this.constructor.isMatchingKey(key) &&\n      Boolean(this.getMatch(key.slice(1)).length);\n  }\n\n  /**\n  * @typedef {GenericArray} SwitchMatch\n  * @property {string} 0 objKey\n  * @property {LocaleBody} 1 body\n  * @property {string} 2 keySegment\n  */\n\n  /**\n   * @param {string} ky\n   * @returns {SwitchMatch}\n   */\n  getMatch (ky) {\n    const ks = ky.split('.');\n    return ks.reduce((obj, k, i) => {\n      if (i < ks.length - 1) {\n        if (!(k in obj)) {\n          throw new Error(`Switch key \"${k}\" not found (from \"~${ky}\")`);\n        }\n        return obj[k];\n      }\n      // Todo: Should throw on encountering duplicate fundamental keys (even\n      //  if there are different arguments, that should not be allowed)\n      const ret = Object.entries(obj).find(([switchKey]) => {\n        return k === this.constructor.getKey(switchKey);\n      });\n\n      return ret ? [...ret, k] : [];\n    }, this.switches);\n  }\n\n  /**\n   * @param {string} key\n   * @returns {boolean}\n   */\n  static isMatchingKey (key) {\n    return key.startsWith('~');\n  }\n  /**\n   * @param {string} key\n   * @returns {string}\n   */\n  static getKey (key) {\n    const match = key.match(/^[^|]*/u);\n    return match && match[0];\n  }\n}\n","/**\n* @callback PromiseChainErrback\n* @param {(value: any) => Promise<any>} errBack\n* @returns {Promise<any>|any}\n*/\n\n/**\n * The given array will have its items processed in series; if the supplied\n *  `errBack` (which is guaranteed to run at least once), when passed the\n *  current item, returns a `Promise` or value that resolves, that value will\n *  be used for the return result of this function and no other items in\n *  the array will continue to be processed; if it rejects, however, the\n *  next item will be processed with `errBack`.\n * Accept an array of values to pass to an errback which should return\n *  a promise (or final result value) which resolves to a result or which\n *  rejects so that the next item in the array can be checked in series.\n * @param {Array<any>} values Array of values\n * @param {PromiseChainErrback} errBack Accepts an item of the array as its\n *   single argument\n * @param {string} [errorMessage=\"Reached end of values array.\"]\n * @returns {Promise<any>} Either resolves to a value derived from an item in\n *  the array or rejects if all items reject\n * @example\npromiseChainForValues(['a', 'b', 'c'], (val) => {\n  return new Promise(function (resolve, reject) {\n    if (val === 'a') {\n      reject(new Error('missing'));\n    }\n    setTimeout(() => {\n      resolve(val);\n    }, 100);\n  });\n});\n */\nexport const promiseChainForValues = (\n  values, errBack, errorMessage = 'Reached end of values array.'\n) => {\n  if (!Array.isArray(values)) {\n    throw new TypeError(\n      'The `values` argument to `promiseChainForValues` must be an array.'\n    );\n  }\n  if (typeof errBack !== 'function') {\n    throw new TypeError(\n      'The `errBack` argument to `promiseChainForValues` must be a function.'\n    );\n  }\n  return (async () => {\n    let ret;\n    let p = Promise.reject(\n      new Error('Intentionally reject so as to begin checking chain')\n    );\n    let breaking;\n    while (true) {\n      const value = values.shift();\n      try {\n        // eslint-disable-next-line no-await-in-loop\n        ret = await p;\n        break;\n      } catch (err) {\n        if (breaking) {\n          throw new Error(errorMessage);\n        }\n        // We allow one more try\n        if (!values.length) {\n          breaking = true;\n        }\n        // // eslint-disable-next-line no-await-in-loop\n        p = errBack(value);\n      }\n    }\n    return ret;\n  })();\n};\n","/**\n* @callback SubstitutionCallback\n* @param {PlainObject} cfg\n* @param {string} cfg.arg By default, accepts the third portion of the\n*   `formattingRegex` within `insertNodes`, i.e., to allow the locale to\n*   supply arguments back to the calling script.\n* @param {string} cfg.key The substitution key\n* @returns {string|Element} The replacement text or element\n*/\n\n/**\n * May have additional properties if supplying options to an underlying\n * formatter.\n * @typedef {GenericArray} ValueArray\n * @property {string|Node|number|Date} 0 The main value\n * @property {PlainObject} [1] The options related to the main value\n * @property {PlainObject} [2] Any additional options\n*/\n\n/**\n* @typedef {PlainObject} RelativeTimeInfo\n* @property {ValueArray} relative\n*/\n\n/**\n* @typedef {PlainObject} ListInfo\n* @property {ValueArray} list\n*/\n\n/**\n* @typedef {PlainObject} NumberInfo\n* @property {ValueArray} number\n*/\n\n/**\n* @typedef {PlainObject} DateInfo\n* @property {ValueArray} date\n*/\n\n/**\n* @typedef {Object<string, string>} PlainLocaleStringBodyObject\n*/\n\n/**\n* @typedef {PlainObject} SwitchCaseInfo\n* @property {boolean} [default=false] Whether this conditional is the default\n*/\n\n/**\n* @typedef {GenericArray} SwitchCase\n* @property {string} 0 The type\n* @property {string} 1 The message\n* @property {SwitchCaseInfo} [2] Info about the switch case\n*/\n\n/**\n* @typedef {PlainObject<string, SwitchCase>} Switch\n*/\n\n/**\n* @typedef {PlainObject<{string, Switch}>} Switches\n*/\n\n/**\n* @typedef {PlainObject} LocaleStringSubObject\n* @property {string} [message] The locale message with any formatting\n*   place-holders; defaults to use of any single conditional\n* @property {string} [description] A description to add translators\n* @property {Switches} [switches] Conditionals\n*/\n\n/**\n* @typedef {PlainObject<string, LocaleStringSubObject>} LocaleStringBodyObject\n*/\n\n/**\n * Takes a base path and locale and gives a URL.\n * @callback LocaleResolver\n * @param {string} localesBasePath (Trailing slash optional)\n * @param {string} locale BCP-47 language string\n * @returns {string} URL of the locale file to be fetched\n*/\n\n/**\n* @typedef {PlainObject<string, string|Element|\n* SubstitutionCallback>} SubstitutionObject\n*/\n\n/**\n * @type {LocaleResolver}\n */\nexport const defaultLocaleResolver = (localesBasePath, locale) => {\n  if (typeof localesBasePath !== 'string') {\n    throw new TypeError(\n      '`defaultLocaleResolver` expects a string `localesBasePath`.'\n    );\n  }\n  if (typeof locale !== 'string') {\n    throw new TypeError(\n      '`defaultLocaleResolver` expects a string `locale`.'\n    );\n  }\n  if ((/[./\\\\]/u).test(locale)) {\n    throw new TypeError(\n      'Locales cannot use file-reserved characters, `.`, `/` or `\\\\`'\n    );\n  }\n  return `${localesBasePath.replace(/\\/$/u, '')}/_locales/${locale}/messages.json`;\n};\n","import {\n  LocalFormatter, RegularFormatter, SwitchFormatter\n} from './Formatter.js';\nimport {defaultAllSubstitutions} from './defaultAllSubstitutions.js';\nimport {unescapeBackslashes, parseJSONExtra, processRegex} from './utils.js';\n\n/* eslint-disable max-len */\n/**\n * Callback to return a string or array of nodes and strings based on a localized\n * string, substitutions object, and other metadata.\n * @callback InsertNodesCallback\n * @param {PlainObject} cfg\n * @param {string} cfg.string The localized string\n * @param {boolean} [cfg.dom] If substitutions known to contain DOM, can be set\n *   to `true` to optimize\n * @param {string[]} [cfg.usedKeys=[]] Array for tracking which keys have been used\n * @param {SubstitutionObject} cfg.substitutions The formatting substitutions object\n * @param {?(AllSubstitutionCallback|AllSubstitutionCallback[])} [cfg.allSubstitutions] The\n *   callback or array composed thereof for applying to each substitution.\n * @param {string} locale The successfully resolved locale\n * @param {Integer} [maximumLocalNestingDepth=3] Depth of local variable resolution to\n *   check before reporting a recursion error\n * @param {MissingSuppliedFormattersCallback} [cfg.missingSuppliedFormatters] Callback\n *   supplied key to throw if the supplied key is present (if\n *   `throwOnMissingSuppliedFormatters` is enabled). Defaults to no-op.\n * @param {CheckExtraSuppliedFormattersCallback} [cfg.checkExtraSuppliedFormatters] No\n *   argument callback to check if any formatters are not present in `string`\n *   (if `throwOnExtraSuppliedFormatters` is enabled). Defaults to no-op.\n * @returns {string|Array<Node|string>}\n */\n\n/**\n * @type {InsertNodesCallback}\n */\nexport const defaultInsertNodes = ({\n  /* eslint-enable max-len */\n  string, dom, usedKeys, substitutions, allSubstitutions, locale,\n  locals, switches,\n  maximumLocalNestingDepth = 3,\n  missingSuppliedFormatters,\n  checkExtraSuppliedFormatters\n}) => {\n  if (typeof maximumLocalNestingDepth !== 'number') {\n    throw new TypeError('`maximumLocalNestingDepth` must be a number.');\n  }\n\n  const addFunctionKeys = () => {\n    Object.entries(substitutions).forEach(([key, value]) => {\n      if (typeof value === 'function') {\n        usedKeys.push(key);\n      }\n    });\n  };\n  addFunctionKeys();\n\n  const localFormatter = new LocalFormatter(locals);\n  const regularFormatter = new RegularFormatter(substitutions);\n  const switchFormatter = new SwitchFormatter(switches, {substitutions});\n\n  // eslint-disable-next-line max-len\n  // eslint-disable-next-line prefer-named-capture-group, unicorn/no-unsafe-regex\n  const formattingRegex = /(\\\\*)\\{((?:[^}]|\\\\\\})*?)(?:(\\|)([^}]*))?\\}/gu;\n  if (allSubstitutions) {\n    allSubstitutions = Array.isArray(allSubstitutions)\n      ? allSubstitutions\n      : [allSubstitutions];\n  }\n\n  const getSubstitution = ({key, arg, substs}) => {\n    let substitution;\n    const isLocalKey = localFormatter.constructor.isMatchingKey(key);\n    if (isLocalKey) {\n      substitution = localFormatter.getSubstitution(key);\n    } else if (switchFormatter.constructor.isMatchingKey(key)) {\n      substitution = switchFormatter.getSubstitution(key, {\n        locale, usedKeys, arg,\n        missingSuppliedFormatters\n      });\n    } else {\n      substitution = substs[key];\n      if (typeof substitution === 'function') {\n        substitution = substitution({arg, key});\n      }\n    }\n    // Todo: Could support resolving locals within arguments\n    // Todo: Even for `null` `allSubstitutions`, we could have\n    //  a mode to throw for non-string/non-DOM (non-numbers?),\n    //  or whatever is not likely intended as a target for `toString()`.\n    if (allSubstitutions) {\n      substitution = allSubstitutions.reduce((subst, allSubst) => {\n        return allSubst({\n          value: subst, arg, key, locale\n        });\n      }, substitution);\n    } else if (arg && (/^(?:NUMBER|DATE(?:TIME|RANGE|TIMERANGE)?|REGION|LANGUAGE|SCRIPT|CURRENCY|RELATIVE|LIST)(?:\\||$)/u).test(arg)) {\n      substitution = defaultAllSubstitutions({\n        value: substitution, arg, key, locale\n      });\n    }\n    return substitution;\n  };\n\n  let recursiveLocalCount = 1;\n  const checkLocalVars = ({substitution, ky, arg, processSubsts}) => {\n    if (\n      typeof substitution === 'string' &&\n      substitution.includes('{')\n    ) {\n      if (recursiveLocalCount++ > maximumLocalNestingDepth) {\n        throw new TypeError('Too much recursion in local variables.');\n      }\n\n      if (localFormatter.constructor.isMatchingKey(ky)) {\n        let extraSubsts = substitutions;\n        let localFormatters;\n        if (arg) {\n          localFormatters = parseJSONExtra(arg);\n          extraSubsts = {\n            ...substitutions,\n            ...localFormatters\n          };\n        }\n        substitution = processSubsts({\n          str: substitution, substs: extraSubsts,\n          formatter: localFormatter\n        });\n        if (localFormatters) {\n          checkExtraSuppliedFormatters({substitutions: localFormatters});\n        }\n      } else if (switchFormatter.constructor.isMatchingKey(ky)) {\n        substitution = processSubsts({\n          str: substitution\n        });\n      }\n    }\n    return substitution;\n  };\n\n  // Give chance to avoid this block when known to contain DOM\n  if (!dom) {\n    // Run this block to optimize non-DOM substitutions\n    let returnsDOM = false;\n    const replace = ({\n      str, substs = substitutions,\n      formatter = regularFormatter\n    }) => {\n      return str.replace(formattingRegex, (_, esc, ky, pipe, arg) => {\n        if (esc.length % 2) {\n          return _;\n        }\n        if (missingSuppliedFormatters({\n          key: ky,\n          formatter\n        })) {\n          return _;\n        }\n        let substitution = getSubstitution({key: ky, arg, substs});\n\n        substitution = checkLocalVars({\n          substitution, ky, arg, processSubsts: replace\n        });\n\n        returnsDOM = returnsDOM ||\n          (substitution && typeof substitution === 'object' &&\n          'nodeType' in substitution);\n        usedKeys.push(ky);\n        return esc + substitution;\n      });\n    };\n    const ret = replace({str: string});\n    if (!returnsDOM) {\n      checkExtraSuppliedFormatters({substitutions});\n      usedKeys.length = 0;\n      addFunctionKeys();\n      return unescapeBackslashes(ret);\n    }\n    usedKeys.length = 0;\n    addFunctionKeys();\n  }\n\n  recursiveLocalCount = 1;\n  const processSubstitutions = ({\n    str, substs = substitutions, formatter = regularFormatter\n  }) => {\n    const nodes = [];\n\n    // Copy to ensure we are resetting index on each instance (manually\n    // resetting on `formattingRegex` is problematic with recursion that\n    // uses the same regex copy)\n    const regex = new RegExp(formattingRegex, 'gu');\n\n    const push = (...args) => {\n      nodes.push(...args);\n    };\n\n    processRegex(regex, str, {\n      extra: push,\n      onMatch (_, esc, ky, pipe, arg) {\n        if (missingSuppliedFormatters({\n          key: ky, formatter\n        })) {\n          push(_);\n        } else {\n          if (esc.length) {\n            push(esc);\n          }\n\n          let substitution = getSubstitution({key: ky, arg, substs});\n          substitution = checkLocalVars({\n            substitution, ky, arg, processSubsts: processSubstitutions\n          });\n          if (Array.isArray(substitution)) {\n            push(...substitution);\n          } else if (\n            // Clone so that multiple instances may be added (and no\n            // side effects to user code)\n            substitution && typeof substitution === 'object' &&\n            'nodeType' in substitution\n          ) {\n            push(substitution.cloneNode(true));\n          } else {\n            push(substitution);\n          }\n        }\n        usedKeys.push(ky);\n      }\n    });\n    return nodes;\n  };\n  const nodes = processSubstitutions({str: string});\n\n  checkExtraSuppliedFormatters({substitutions});\n  usedKeys.length = 0;\n  return nodes.map((node) => {\n    if (typeof node === 'string') {\n      return unescapeBackslashes(node);\n    }\n    return node;\n  });\n};\n","/**\n * @callback KeyCheckerConverterCallback\n * @param {string|string[]} key By default may be an array (if the type ends\n *   with \"Nested\") or a string, but a non-default validator may do otherwise.\n * @param {\"plain\"|\"plainNested\"|\"rich\"|\n *   \"richNested\"|MessageStyleCallback} messageStyle\n * @throws {TypeError}\n * @returns {string} The converted (or unconverted) key\n */\n\n/**\n * @type {KeyCheckerConverterCallback}\n */\nexport function defaultKeyCheckerConverter (key, messageStyle) {\n  if (Array.isArray(key) &&\n    key.every((k) => {\n      return typeof k === 'string';\n    }) &&\n    typeof messageStyle === 'string' && messageStyle.endsWith('Nested')\n  ) {\n    return key.map((k) => {\n      return k\n        .replace(/(?<backslashes>\\\\+)/gu, '\\\\$<backslashes>')\n        .replace(/\\./gu, '\\\\.');\n    }).join('.');\n  }\n  if (typeof key !== 'string') {\n    throw new TypeError(\n      '`key` is expected to be a string (or array of strings for nested style)'\n    );\n  }\n\n  return key;\n}\n","import {unescapeBackslashes, processRegex} from './utils.js';\n\n/**\n* @typedef {LocaleBody} LocalObject\n*/\n\n/**\n * May also contain language code and direction, translator name and\n * contact, etc., but no defaults currently apply besides reserving `locals`\n * @typedef {PlainObject} LocaleHead\n * @property {LocalObject} locals\n*/\n\n/**\n* @typedef {LocaleStringBodyObject|\n* PlainLocaleStringBodyObject|PlainObject} LocaleBody\n*/\n\n/**\n* @typedef {PlainObject} LocaleObject\n* @property {LocaleHead} [head]\n* @property {LocaleBody} body\n*/\n\n/**\n* @typedef {PlainObject} MessageStyleCallbackResult\n* @property {string} value Regardless of message style, will contain the\n*   string result\n* @property {LocaleStringSubObject} [info] Full info on the localized item\n*   (for rich message styles only)\n*/\n\n/**\n* @callback MessageStyleCallback\n* @param {LocaleObject} obj The exact\n*   format depends on the `cfg.defaults` of `i18n`\n* @param {string} key\n* @returns {false|MessageStyleCallbackResult} If `false`, will resort to default\n*/\n\n/* eslint-disable max-len */\n/**\n * @param {PlainObject} [cfg]\n * @param {\"richNested\"|\"rich\"|\"plain\"|\"plainNested\"|MessageStyleCallback} [cfg.messageStyle=\"richNested\"]\n * @returns {MessageStyleCallback}\n */\nexport const getMessageForKeyByStyle = ({\n  /* eslint-enable max-len */\n  messageStyle = 'richNested'\n} = {}) => {\n  return typeof messageStyle === 'function'\n    ? messageStyle\n    : (messageStyle === 'richNested'\n      ? (mainObj, key) => {\n        const obj = mainObj && typeof mainObj === 'object' && mainObj.body;\n        const keys = [];\n        // eslint-disable-next-line prefer-named-capture-group\n        const possiblyEscapedCharPattern = /(\\\\*)\\./gu;\n        const mergeWithPreviousOrStart = (val) => {\n          if (!keys.length) {\n            keys[0] = '';\n          }\n          keys[keys.length - 1] += val;\n        };\n        processRegex(possiblyEscapedCharPattern, key, {\n          // If odd, this is just an escaped dot, so merge content with\n          //   any previous\n          extra: mergeWithPreviousOrStart,\n          onMatch (_, esc) {\n            // If even, there are no backslashes, or they are just escaped\n            //  backslashes and not an escaped dot, so start anew, though\n            //  first merge any backslashes\n            mergeWithPreviousOrStart(esc);\n            keys.push('');\n          }\n        });\n        const keysUnescaped = keys.map((ky) => {\n          return unescapeBackslashes(ky);\n        });\n\n        let ret = false;\n        let currObj = obj;\n        keysUnescaped.some((ky, i, kys) => {\n          if (!currObj || typeof currObj !== 'object') {\n            return true;\n          }\n          if (\n            // If specified key is too deep, we should fail\n            i === kys.length - 1 &&\n            ky in currObj && currObj[ky] && typeof currObj[ky] === 'object' &&\n            'message' in currObj[ky] &&\n            // NECESSARY FOR SECURITY ON UNTRUSTED LOCALES\n            typeof currObj[ky].message === 'string'\n          ) {\n            ret = {\n              value: currObj[ky].message,\n              info: currObj[ky]\n            };\n          }\n          currObj = currObj[ky];\n\n          return false;\n        });\n        return ret;\n      }\n      : (messageStyle === 'rich'\n        ? (mainObj, key) => {\n          const obj = mainObj && typeof mainObj === 'object' && mainObj.body;\n          if (\n            obj && typeof obj === 'object' &&\n            key in obj && obj[key] && typeof obj[key] === 'object' &&\n            'message' in obj[key] &&\n            // NECESSARY FOR SECURITY ON UNTRUSTED LOCALES\n            typeof obj[key].message === 'string'\n          ) {\n            return {\n              value: obj[key].message,\n              info: obj[key]\n            };\n          }\n          return false;\n        }\n        : (messageStyle === 'plain'\n          ? (mainObj, key) => {\n            const obj = mainObj && typeof mainObj === 'object' && mainObj.body;\n            if (\n              obj && typeof obj === 'object' &&\n              key in obj && obj[key] && typeof obj[key] === 'string'\n            ) {\n              return {\n                value: obj[key]\n              };\n            }\n            return false;\n          }\n          : (messageStyle === 'plainNested'\n            ? (mainObj, key) => {\n              const obj = mainObj && typeof mainObj === 'object' &&\n                mainObj.body;\n              if (obj && typeof obj === 'object') {\n                // Should really be counting that it is an odd number\n                //  of backslashes only\n                const keys = key.split(/(?<!\\\\)\\./u);\n                const value = keys.reduce((o, k) => {\n                  if (o && o[k]) {\n                    return o[k];\n                  }\n                  return null;\n                }, obj);\n                if (value && typeof value === 'string') {\n                  return {value};\n                }\n              }\n              return false;\n            }\n            : (() => {\n              throw new TypeError(`Unknown \\`messageStyle\\` ${messageStyle}`);\n            })()))\n      )\n    );\n};\n","import {getMessageForKeyByStyle} from './getMessageForKeyByStyle.js';\n\n/* eslint-disable max-len */\n/**\n * @param {PlainObject} cfg\n * @param {string} [cfg.message] If present, this string will be the return value.\n * @param {false|null|undefined|LocaleObject} [cfg.defaults]\n * @param {\"richNested\"|\"rich\"|\"plain\"|\"plainNested\"|MessageStyleCallback} [cfg.messageStyle=\"richNested\"]\n * @param {MessageStyleCallback} [cfg.messageForKey] Defaults to getting `MessageStyleCallback` based on `messageStyle`\n * @param {string} cfg.key Key to check against object of strings; used to find a default if no string `message` is provided.\n * @returns {string}\n */\nexport const getStringFromMessageAndDefaults = ({\n  /* eslint-enable max-len */\n  message,\n  defaults,\n  messageStyle,\n  messageForKey = getMessageForKeyByStyle({messageStyle}),\n  key\n} = {}) => {\n  // NECESSARY CHECK FOR SECURITY ON UNTRUSTED LOCALES\n  let str;\n  if (typeof message === 'string') {\n    str = message;\n  } else if (\n    defaults === false || defaults === undefined || defaults === null\n  ) {\n    str = false;\n  } else if (defaults && typeof defaults === 'object') {\n    str = messageForKey(defaults, key);\n    if (str) {\n      str = str.value;\n    }\n  } else {\n    throw new TypeError(\n      `Default locale strings must resolve to \\`false\\`, ` +\n      `nullish, or an object!`\n    );\n  }\n  if (str === false) {\n    throw new Error(`Key value not found for key: (${key})`);\n  }\n  return str;\n};\n","import {defaultAllSubstitutions} from './defaultAllSubstitutions.js';\nimport {defaultInsertNodes} from './defaultInsertNodes.js';\nimport {getDocument} from './shared.js';\n\nexport {setDocument, getDocument} from './shared.js';\n\n/* eslint-disable max-len */\n/**\n *\n * @param {PlainObject} cfg\n * @param {string} cfg.string\n * @param {string} cfg.locale The (possibly already resolved) locale for use by\n *   configuring formatters\n * @param {LocalObject} [cfg.locals]\n * @param {LocalObject} [cfg.switches]\n * @param {Integer} [cfg.maximumLocalNestingDepth=3]\n * @param {?(AllSubstitutionCallback|AllSubstitutionCallback[])} [cfg.allSubstitutions=[defaultAllSubstitutions]]\n * @param {InsertNodesCallback} [cfg.insertNodes=defaultInsertNodes]\n * @param {false|SubstitutionObject} [cfg.substitutions=false]\n * @param {boolean} [cfg.dom=false]\n * @param {boolean} [cfg.forceNodeReturn=false]\n * @param {boolean} [cfg.throwOnMissingSuppliedFormatters=true]\n * @param {boolean} [cfg.throwOnExtraSuppliedFormatters=true]\n * @returns {string|DocumentFragment}\n */\nexport const getDOMForLocaleString = ({\n  /* eslint-enable max-len */\n  string,\n  locale,\n  locals,\n  switches,\n  maximumLocalNestingDepth,\n  allSubstitutions = [\n    defaultAllSubstitutions\n  ],\n  insertNodes = defaultInsertNodes,\n  substitutions = false,\n  dom = false,\n  forceNodeReturn = false,\n  throwOnMissingSuppliedFormatters = true,\n  throwOnExtraSuppliedFormatters = true\n} = {}) => {\n  if (typeof string !== 'string') {\n    throw new TypeError(\n      'An options object with a `string` property set to a string must ' +\n      'be provided for `getDOMForLocaleString`.'\n    );\n  }\n  const stringOrTextNode = (str) => {\n    const _doc = getDocument();\n    return forceNodeReturn ? _doc.createTextNode(str) : str;\n  };\n\n  const usedKeys = [];\n\n  /**\n  * @callback CheckExtraSuppliedFormattersCallback\n  * @param {SubstitutionObject} substs\n  * @throws {Error} Upon an extra formatting key being found\n  * @returns {void}\n  */\n\n  /**\n   * @type {CheckExtraSuppliedFormattersCallback}\n   */\n  const checkExtraSuppliedFormatters = ({\n    substitutions: substs\n  }) => {\n    if (throwOnExtraSuppliedFormatters) {\n      Object.keys(substs).forEach((key) => {\n        if (!usedKeys.includes(key)) {\n          throw new Error(`Extra formatting key: ${key}`);\n        }\n      });\n    }\n  };\n\n  /**\n  * @callback MissingSuppliedFormattersCallback\n  * @param {string} key\n  * @param {SubstitutionObject} substs\n  * @throws {Error} If missing formatting key\n  * @returns {boolean}\n  */\n  /**\n   * @type {MissingSuppliedFormattersCallback}\n   */\n  const missingSuppliedFormatters = ({\n    key, formatter\n  }) => {\n    const matching = formatter.isMatch(key);\n    if (formatter.constructor.isMatchingKey(key) && !matching) {\n      if (throwOnMissingSuppliedFormatters) {\n        throw new Error(`Missing formatting key: ${key}`);\n      }\n      return true;\n    }\n    return false;\n  };\n\n  if (\n    !substitutions && !allSubstitutions &&\n    !throwOnMissingSuppliedFormatters\n  ) {\n    return stringOrTextNode(string);\n  }\n  if (!substitutions) {\n    substitutions = {};\n  }\n\n  const nodes = insertNodes({\n    string, dom, usedKeys, substitutions, allSubstitutions, locale,\n    locals, switches,\n    missingSuppliedFormatters,\n    checkExtraSuppliedFormatters\n  });\n  if (typeof nodes === 'string') {\n    return stringOrTextNode(nodes);\n  }\n\n  const _doc = getDocument();\n  const container = _doc.createDocumentFragment();\n  container.append(...nodes);\n\n  return container;\n};\n","/* globals intlDomLocale */\n\nimport {defaultLocaleResolver} from './defaultLocaleResolver.js';\nimport {promiseChainForValues} from './promiseChainForValues.js';\nimport {getFetch} from './shared.js';\n\nexport {setFetch, getFetch} from './shared.js';\n\n/**\n * Takes a locale and returns a new locale to check.\n * @callback LocaleMatcher\n * @param {string} locale The failed locale\n * @throws {Error} If there are no further hyphens left to check\n * @returns {string|Promise<string>} The new locale to check\n*/\n\n/**\n * @type {LocaleMatcher}\n */\nexport const defaultLocaleMatcher = (locale) => {\n  if (!locale.includes('-')) {\n    throw new Error('Locale not available');\n  }\n  // Try without hyphen, i.e., the \"lookup\" algorithm:\n  // See https://tools.ietf.org/html/rfc4647#section-3.4 and\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl\n  return locale.replace(/-[^-]*$/u, '');\n};\n\n/**\n * @param {PlainObject} cfg\n * @param {string} cfg.locale\n * @param {string[]} cfg.locales\n * @param {LocaleResolver} [cfg.localeResolver=defaultLocaleMatcher]\n * @returns {string|false}\n */\nexport const getMatchingLocale = ({\n  locale, locales, localeResolver = defaultLocaleMatcher\n}) => {\n  try {\n    while (!locales.includes(locale)) {\n      // Catch as `defaultLocaleMatcher` will throw if no hyphen found\n      locale = localeResolver(locale);\n    }\n  } catch (err) {\n    return false;\n  }\n  return locale;\n};\n\n/**\n* @typedef {PlainObject} LocaleObjectInfo\n* @property {LocaleObject} strings The successfully retrieved locale strings\n* @property {string} locale The successfully resolved locale\n*/\n\n/**\n * @callback LocaleStringFinder\n * @param {PlainObject} [cfg={}]\n * @param {string[]} [cfg.locales=navigator.languages] BCP-47 language strings\n * @param {string[]} [cfg.defaultLocales=[\"en-US\"]]\n * @param {string} [cfg.localesBasePath=\".\"]\n * @param {LocaleResolver} [cfg.localeResolver=defaultLocaleResolver]\n * @param {\"lookup\"|LocaleMatcher} [cfg.localeMatcher]\n * @returns {Promise<LocaleObjectInfo>}\n */\n\n/**\n *\n * @type {LocaleStringFinder}\n */\nexport const findLocaleStrings = ({\n  locales,\n  defaultLocales,\n  localeResolver,\n  localesBasePath,\n  localeMatcher\n} = {}) => {\n  return _findLocale({\n    locales, defaultLocales, localeResolver, localesBasePath, localeMatcher\n  });\n};\n\n/**\n * @callback LocaleFinder\n * @param {PlainObject} [cfg={}]\n * @param {string[]} [cfg.locales=navigator.languages] BCP-47 language strings\n * @param {string[]} [cfg.defaultLocales=[\"en-US\"]]\n * @param {string} [cfg.localesBasePath=\".\"]\n * @param {LocaleResolver} [cfg.localeResolver=defaultLocaleResolver]\n * @param {\"lookup\"|LocaleMatcher} [cfg.localeMatcher]\n * @returns {Promise<string>} Resolves to the successfully resolved locale\n */\n\n/**\n *\n * @type {LocaleFinder}\n */\nexport const findLocale = ({\n  locales,\n  defaultLocales,\n  localeResolver,\n  localesBasePath,\n  localeMatcher\n} = {}) => {\n  return _findLocale({\n    locales, defaultLocales, localeResolver, localesBasePath, localeMatcher,\n    headOnly: true\n  });\n};\n\n/**\n * @type {LocaleStringFinder|LocaleFinder} Also has a `headOnly` boolean\n *  property to determine whether to make a simple HEAD and resolve to\n *  the locale rather than locale and contents\n */\nconst _findLocale = async ({\n  locales = typeof intlDomLocale !== 'undefined'\n    ? [intlDomLocale]\n    : typeof navigator === 'undefined' ? [] : navigator.languages,\n  defaultLocales = ['en-US'],\n  localeResolver = defaultLocaleResolver,\n  localesBasePath = '.',\n  localeMatcher = 'lookup',\n  headOnly = false\n}) => {\n  /**\n   * @callback getLocale\n   * @throws {SyntaxError|TypeError|Error}\n   * @param {string} locale\n   * @returns {Promise<LocaleObjectInfo>}\n   */\n  async function getLocale (locale) {\n    if (typeof locale !== 'string') {\n      throw new TypeError('Non-string locale type');\n    }\n    const url = localeResolver(localesBasePath, locale);\n    if (typeof url !== 'string') {\n      throw new TypeError(\n        '`localeResolver` expected to resolve to (URL) string.'\n      );\n    }\n    try {\n      const _fetch = getFetch();\n      const resp = await (headOnly\n        ? _fetch(url, {\n          method: 'HEAD'\n        })\n        : _fetch(url)\n      );\n\n      if (resp.status === 404) {\n        // Don't allow browser (tested in Firefox) to continue\n        //  and give `SyntaxError` with missing file or we won't be\n        //  able to try without the hyphen\n        throw new Error('Trying again');\n      }\n      if (headOnly) {\n        return locale;\n      }\n      const strings = await (resp.json());\n      return {\n        locale,\n        strings\n      };\n    } catch (err) {\n      if (err.name === 'SyntaxError') {\n        throw err;\n      }\n      const newLocale = await localeMatcher(locale);\n      return getLocale(newLocale);\n    }\n  }\n  if (localeMatcher === 'lookup') {\n    localeMatcher = defaultLocaleMatcher;\n  } else if (typeof localeMatcher !== 'function') {\n    throw new TypeError('`localeMatcher` must be \"lookup\" or a function!');\n  }\n  return await promiseChainForValues(\n    [...locales, ...defaultLocales],\n    getLocale,\n    'No matching locale found for ' + [...locales, ...defaultLocales].join(', ')\n  );\n};\n","import {getMessageForKeyByStyle} from './getMessageForKeyByStyle.js';\nimport {findLocaleStrings} from './findLocaleStrings.js';\nimport {getDOMForLocaleString} from './getDOMForLocaleString.js';\nimport {\n  getStringFromMessageAndDefaults\n} from './getStringFromMessageAndDefaults.js';\nimport {sort, sortList, list} from './collation.js';\nimport {defaultKeyCheckerConverter} from './defaultKeyCheckerConverter.js';\n\n/**\n * Checks a key (against an object of strings). Optionally\n *  accepts an object of substitutions which are used when finding text\n *  within curly brackets (pipe symbol not allowed in its keys); the\n *  substitutions may be DOM elements as well as strings and may be\n *  functions which return the same (being provided the text after the\n *  pipe within brackets as the single argument).) Optionally accepts a\n *  config object, with the optional key \"dom\" which if set to `true`\n *  optimizes when DOM elements are (known to be) present.\n * @callback I18NCallback\n * @param {string} key Key to check against object of strings\n * @param {false|SubstitutionObject} [substitutions=false]\n * @param {PlainObject} [cfg={}]\n * @param {boolean} [cfg.dom=false]\n * @returns {string|DocumentFragment}\n*/\n\n/* eslint-disable max-len */\n/**\n * @param {PlainObject} cfg\n * @param {LocaleObject} cfg.strings\n * @param {string} cfg.resolvedLocale\n * @param {\"richNested\"|\"rich\"|\"plain\"|\"plainNested\"|MessageStyleCallback} [cfg.messageStyle=\"richNested\"]\n * @param {?AllSubstitutionCallback|AllSubstitutionCallback[]} [cfg.allSubstitutions]\n * @param {InsertNodesCallback} [cfg.insertNodes=defaultInsertNodes]\n * @param {KeyCheckerConverterCallback} [cfg.keyCheckerConverter]\n * @param {false|null|undefined|LocaleObject} [cfg.defaults]\n * @param {false|SubstitutionObject} [cfg.substitutions={}]\n * @param {Integer} [cfg.maximumLocalNestingDepth=3]\n * @param {boolean} [cfg.dom=false]\n * @param {boolean} [cfg.forceNodeReturn=false]\n * @param {boolean} [cfg.throwOnMissingSuppliedFormatters=true]\n * @param {boolean} [cfg.throwOnExtraSuppliedFormatters=true]\n * @returns {Promise<I18NCallback>} Rejects if no suitable locale is found.\n */\nexport const i18nServer = function i18nServer ({\n  /* eslint-enable max-len */\n  strings,\n  resolvedLocale,\n  messageStyle = 'richNested',\n  allSubstitutions: defaultAllSubstitutionsValue,\n  insertNodes,\n  keyCheckerConverter = defaultKeyCheckerConverter,\n  defaults: defaultDefaults,\n  substitutions: defaultSubstitutions,\n  maximumLocalNestingDepth,\n  dom: domDefaults = false,\n  forceNodeReturn: forceNodeReturnDefault = false,\n  throwOnMissingSuppliedFormatters:\n    throwOnMissingSuppliedFormattersDefault = true,\n  throwOnExtraSuppliedFormatters:\n    throwOnExtraSuppliedFormattersDefault = true\n}) {\n  if (!strings || typeof strings !== 'object') {\n    throw new TypeError(`Locale strings must be an object!`);\n  }\n  const messageForKey = getMessageForKeyByStyle({messageStyle});\n  const formatter = (key, substitutions, {\n    allSubstitutions = defaultAllSubstitutionsValue,\n    defaults = defaultDefaults,\n    dom = domDefaults,\n    forceNodeReturn = forceNodeReturnDefault,\n    throwOnMissingSuppliedFormatters = throwOnMissingSuppliedFormattersDefault,\n    throwOnExtraSuppliedFormatters = throwOnExtraSuppliedFormattersDefault\n  } = {}) => {\n    key = keyCheckerConverter(key, messageStyle);\n    const message = messageForKey(strings, key);\n    const string = getStringFromMessageAndDefaults({\n      message: message && typeof message.value === 'string'\n        ? message.value\n        : false,\n      defaults,\n      messageForKey,\n      key\n    });\n\n    return getDOMForLocaleString({\n      string,\n      locals: strings.head && strings.head.locals,\n      switches: strings.head && strings.head.switches,\n      locale: resolvedLocale,\n      maximumLocalNestingDepth,\n      allSubstitutions,\n      insertNodes,\n      substitutions: {...defaultSubstitutions, ...substitutions},\n      dom,\n      forceNodeReturn,\n      throwOnMissingSuppliedFormatters,\n      throwOnExtraSuppliedFormatters\n    });\n  };\n\n  formatter.resolvedLocale = resolvedLocale;\n  formatter.strings = strings;\n\n  formatter.sort = (...args) => {\n    return sort(resolvedLocale, ...args);\n  };\n\n  formatter.sortList = (...args) => {\n    return sortList(\n      resolvedLocale, ...args\n    );\n  };\n\n  formatter.list = (...args) => {\n    return list(\n      resolvedLocale, ...args\n    );\n  };\n\n  return formatter;\n};\n\n/* eslint-disable max-len */\n/**\n * @param {PlainObject} [cfg={}]\n * @param {string[]} [cfg.locales=navigator.languages] BCP-47 language strings\n * @param {string[]} [cfg.defaultLocales=[\"en-US\"]]\n * @param {LocaleStringFinder} [cfg.localeStringFinder=findLocaleStrings]\n * @param {string} [cfg.localesBasePath=\".\"]\n * @param {LocaleResolver} [cfg.localeResolver=defaultLocaleResolver]\n * @param {\"lookup\"|LocaleMatcher} [cfg.localeMatcher=\"lookup\"]\n * @param {\"richNested\"|\"rich\"|\"plain\"|\"plainNested\"|MessageStyleCallback} [cfg.messageStyle=\"richNested\"]\n * @param {?AllSubstitutionCallback|AllSubstitutionCallback[]} [cfg.allSubstitutions]\n * @param {InsertNodesCallback} [cfg.insertNodes=defaultInsertNodes]\n * @param {KeyCheckerConverterCallback} [cfg.keyCheckerConverter]\n * @param {false|null|undefined|LocaleObject} [cfg.defaults]\n * @param {false|SubstitutionObject} [cfg.substitutions={}]\n * @param {Integer} [cfg.maximumLocalNestingDepth=3]\n * @param {boolean} [cfg.dom=false]\n * @param {boolean} [cfg.forceNodeReturn=false]\n * @param {boolean} [cfg.throwOnMissingSuppliedFormatters=true]\n * @param {boolean} [cfg.throwOnExtraSuppliedFormatters=true]\n * @returns {Promise<I18NCallback>} Rejects if no suitable locale is found.\n */\nexport const i18n = async function i18n ({\n  /* eslint-enable max-len */\n  locales,\n  defaultLocales,\n  localeStringFinder = findLocaleStrings,\n  localesBasePath,\n  localeResolver,\n  localeMatcher,\n  messageStyle,\n  allSubstitutions,\n  insertNodes,\n  keyCheckerConverter,\n  defaults,\n  substitutions,\n  maximumLocalNestingDepth,\n  dom,\n  forceNodeReturn,\n  throwOnMissingSuppliedFormatters,\n  throwOnExtraSuppliedFormatters\n} = {}) {\n  const {strings, locale: resolvedLocale} = await localeStringFinder({\n    locales, defaultLocales, localeResolver, localesBasePath, localeMatcher\n  });\n  if (!defaults && defaultLocales) {\n    let defaultLocale;\n    ({strings: defaults, locale: defaultLocale} = await localeStringFinder({\n      locales: defaultLocales,\n      defaultLocales: [],\n      localeResolver, localesBasePath, localeMatcher\n    }));\n    if (defaultLocale === resolvedLocale) {\n      defaults = null; // No need to fall back\n    }\n  }\n\n  return i18nServer({\n    strings,\n    resolvedLocale,\n    messageStyle,\n    allSubstitutions,\n    insertNodes,\n    keyCheckerConverter,\n    defaults,\n    substitutions,\n    maximumLocalNestingDepth,\n    dom,\n    forceNodeReturn,\n    throwOnMissingSuppliedFormatters,\n    throwOnExtraSuppliedFormatters\n  });\n};\n"],"names":["_jsonExtra","globalThis","jsonExtra","unescapeBackslashes","str","replace","esc","slice","length","parseJSONExtra","args","parse","processRegex","regex","_ref","match","onMatch","extra","betweenMatches","afterMatch","escapeAtOne","previousIndex","exec","_match2","_slicedToArray","_","lastIndex","startMatchPos","apply","_toConsumableArray","_fetch","fetch","getFetch","_doc","document","getDocument","sort","locale","arrayOfItems","options","Intl","Collator","compare","list","ListFormat","format","sortList","map","listOptions","collationOptions","sortListSimple","d","randomId","Date","now","performance","c","r","Math","trunc","random","floor","toString","placeholderArray","i","concat","nodes","push","arguments","RegExp","idx","container","createDocumentFragment","append","getFormatterInfo","object","Array","isArray","_object","value","callback","extraOpts","_object2","defaultAllSubstitutions","_ref2","_Intl$DateTimeFormat","arg","key","opts","_typeof","applyArgs","_ref3","type","_ref3$options","_ref3$checkArgOptions","checkArgOptions","_arg$split2","split","userType","extraArgs","argOptions","_objectSpread","expectsDatetime","singleKey","Object","keys","includes","_getFormatterInfo","DateTimeFormat","formatRange","val","DisplayNames","toUpperCase","of","_ref4","RelativeTimeFormat","test","getTime","_Intl$DateTimeFormat2","NumberFormat","TypeError","Formatter","_createClass","_classCallCheck","getSubstitution","body","_ref$messageStyle","messageStyle","substitution","getMessageForKeyByStyle","messageForKey","Error","LocalFormatter","_Formatter","_inherits","_super","_createSuper","locals","_this","call","this","components","parent","constructor","isMatchingKey","every","cmpt","result","startsWith","RegularFormatter","_Formatter2","_super2","substitutions","_this2","SwitchFormatter","_Formatter3","_super3","switches","_this3","usedKeys","missingSuppliedFormatters","ky","getKey","_this$getMatch2","getMatch","objKey","keySegment","_objKey$split2","formatter","getNumberFormat","defaultOptions","numberOpts","getPluralFormat","pluralOpts","PluralRules","select","formatterValue","toLowerCase","preventNesting","s","err","error","k","find","switchKey","Boolean","_this4","ks","reduce","obj","ret","entries","_settle","pact","state","_Pact","o","bind","v","then","observer","prototype","onFulfilled","onRejected","e","_isSettledPact","thenable","promiseChainForValues","values","errBack","f","errorMessage","undefined","breaking","_interrupt","p","Promise","reject","update","stage","shouldContinue","updateValue","_resumeAfterTest","_resumeAfterBody","_resumeAfterUpdate","_for","shift","recover","_catch","direct","resolve","_await","_p","_result2","defaultLocaleResolver","localesBasePath","defaultInsertNodes","string","dom","allSubstitutions","_ref$maximumLocalNest","maximumLocalNestingDepth","checkExtraSuppliedFormatters","addFunctionKeys","forEach","localFormatter","regularFormatter","switchFormatter","formattingRegex","substs","subst","allSubst","recursiveLocalCount","checkLocalVars","_ref5","processSubsts","localFormatters","extraSubsts","returnsDOM","_ref6","_ref6$substs","_ref6$formatter","pipe","processSubstitutions","_ref7","_ref7$substs","_ref7$formatter","cloneNode","node","defaultKeyCheckerConverter","endsWith","_wrapRegExp","backslashes","join","mainObj","mergeWithPreviousOrStart","keysUnescaped","currObj","some","kys","message","info","getStringFromMessageAndDefaults","defaults","_ref$messageForKey","getDOMForLocaleString","_ref$allSubstitutions","_ref$insertNodes","insertNodes","_ref$substitutions","_ref$dom","_ref$forceNodeReturn","forceNodeReturn","_ref$throwOnMissingSu","throwOnMissingSuppliedFormatters","_ref$throwOnExtraSupp","throwOnExtraSuppliedFormatters","stringOrTextNode","createTextNode","matching","isMatch","_async","defaultLocaleMatcher","findLocaleStrings","locales","defaultLocales","localeResolver","localeMatcher","_findLocale","getLocale","url","headOnly","method","resp","status","json","strings","name","_ref4$locales","intlDomLocale","navigator","languages","_ref4$defaultLocales","_ref4$localeResolver","_ref4$localesBasePath","_ref4$localeMatcher","_ref4$headOnly","i18nServer","resolvedLocale","defaultAllSubstitutionsValue","_ref$keyCheckerConver","keyCheckerConverter","defaultDefaults","defaultSubstitutions","domDefaults","forceNodeReturnDefault","throwOnMissingSuppliedFormattersDefault","throwOnExtraSuppliedFormattersDefault","_ref2$allSubstitution","_ref2$defaults","_ref2$dom","_ref2$forceNodeReturn","_ref2$throwOnMissingS","_ref2$throwOnExtraSup","head","_len","_key","_len2","_key2","_len3","_key3","_ref$localeResolver","i18n","_ref3$localeStringFin","localeStringFinder","_localeStringFinder","doc","__jsonExtra"],"mappings":"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"}