{"version":3,"file":"index.esm.min.js","sources":["../src/utils.js","../src/shared.js","../src/collation.js","../src/defaultAllSubstitutions.js","../src/Formatter.js","../src/promiseChainForValues.js","../src/defaultLocaleResolver.js","../src/defaultInsertNodes.js","../src/defaultKeyCheckerConverter.js","../src/getMessageForKeyByStyle.js","../src/getStringFromMessageAndDefaults.js","../src/getDOMForLocaleString.js","../src/findLocaleStrings.js","../src/i18n.js"],"sourcesContent":["// We want it to work in the browser, so commenting out\n// import jsonExtra from 'json5';\n// import jsonExtra from 'json-6';\n\n/**\n * @typedef {any} JSON6\n */\n\n// @ts-expect-error Need typing for JSON6\nlet _jsonExtra = globalThis.jsonExtra;\n\n/**\n * @param {JSON6} __jsonExtra\n */\nexport const setJSONExtra = (__jsonExtra) => {\n  _jsonExtra = __jsonExtra;\n};\n\n/**\n * @param {string} str\n * @returns {string}\n */\nexport const unescapeBackslashes = (str) => {\n  return str.replace(/\\\\+/gu, (esc) => {\n    return esc.slice(0, esc.length / 2);\n  });\n};\n\n/**\n * @typedef {any} AnyValue\n */\n\n/**\n * @param {string} args\n * @returns {AnyValue}\n */\nexport const parseJSONExtra = (args) => {\n  return _jsonExtra.parse(\n    // Doesn't actually currently allow explicit brackets,\n    //  but in case we change our regex to allow inner brackets\n    '{' + (args || '').replace(/^\\{/u, '').replace(/\\}$/u, '') + '}'\n  );\n};\n\n// Todo: Extract to own library (RegExtras?)\n\n/**\n * @callback BetweenMatches\n * @param {string} str\n * @returns {void}\n */\n\n/**\n * @callback AfterMatch\n * @param {string} str\n * @returns {void}\n */\n\n/**\n * @callback EscapeAtOne\n * @param {string} str\n * @returns {void}\n */\n\n/**\n * @param {RegExp} regex\n * @param {string} str\n * @param {{\n *   onMatch: (...arg0: string[]) => void,\n *   extra?: BetweenMatches|AfterMatch|EscapeAtOne\n *   betweenMatches?: BetweenMatches,\n *   afterMatch?: AfterMatch,\n *   escapeAtOne?: EscapeAtOne\n * }} cfg\n */\nexport const processRegex = (regex, str, {\n  onMatch,\n  extra,\n  betweenMatches,\n  afterMatch,\n  escapeAtOne\n}) => {\n  let match;\n  let previousIndex = 0;\n  if (extra) {\n    betweenMatches = extra;\n    afterMatch = extra;\n    escapeAtOne = extra;\n  }\n  if (!betweenMatches || !afterMatch) {\n    throw new Error(\n      'You must have `extra` or `betweenMatches` and `afterMatch` arguments.'\n    );\n  }\n  while ((match = regex.exec(str)) !== null) {\n    const [_, esc] = match;\n    const {lastIndex} = regex;\n\n    const startMatchPos = lastIndex - _.length;\n    if (startMatchPos > previousIndex) {\n      betweenMatches(str.slice(previousIndex, startMatchPos));\n    }\n\n    if (escapeAtOne && esc.length % 2) {\n      previousIndex = lastIndex;\n      escapeAtOne(_);\n      continue;\n    }\n    onMatch(...match);\n    previousIndex = lastIndex;\n  }\n  if (previousIndex !== str.length) { // Get text at end\n    afterMatch(str.slice(previousIndex));\n  }\n};\n","/* globals fetch, document */\n\n/**\n * @typedef {(\n *   input: RequestInfo|URL, init?: RequestInit\n * ) => Promise<Response>} Fetch\n */\n/**\n * @type {null|Fetch}\n */\nlet _fetch = typeof fetch !== 'undefined'\n  ? fetch\n  /* c8 ignore next */\n  : null;\n\n/**\n * @param {Fetch} f\n * @returns {void}\n */\nexport const setFetch = (f) => {\n  _fetch = f;\n};\n\n/**\n * @returns {Fetch|null}\n */\nexport const getFetch = () => {\n  return _fetch;\n};\n\n/** @type {Document|null} */\nlet _doc = typeof document !== 'undefined'\n  /* c8 ignore next */\n  ? document\n  : null;\n\n/**\n * @param {Document} doc\n * @returns {void}\n */\nexport const setDocument = (doc) => {\n  _doc = doc;\n};\n\n/**\n * @returns {Document|null}\n */\nexport const getDocument = () => {\n  return _doc;\n};\n","import {processRegex} from './utils.js';\nimport {getDocument} from './shared.js';\n\nexport {setDocument, getDocument} from './shared.js';\n\n/**\n *\n * @returns {string}\n */\nfunction generateUUID () { //  Adapted from original: public domain/MIT: http://stackoverflow.com/a/8809472/271577\n  let d = Date.now();\n  /* c8 ignore next 5 */\n  if (typeof performance !== 'undefined' &&\n      typeof performance.now === 'function'\n  ) {\n    d += performance.now(); // use high-precision timer if available\n  }\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/gu, function (c) {\n    /* eslint-disable no-bitwise */\n    const r = Math.trunc((d + Math.random() * 16) % 16);\n    d = Math.floor(d / 16);\n    return (c === 'x' ? r : (r & 0x3 | 0x8)).toString(16);\n    /* eslint-enable no-bitwise */\n  });\n}\n\n/**\n *\n * @param {string} locale\n * @param {string[]} arrayOfItems\n * @param {Intl.CollatorOptions|undefined} options\n * @returns {string[]}\n */\nexport const sort = (locale, arrayOfItems, options) => {\n  return arrayOfItems.sort(new Intl.Collator(\n    locale,\n    options\n  ).compare);\n};\n\n/**\n *\n * @param {string} locale\n * @param {string[]} arrayOfItems\n * @param {Intl.ListFormatOptions|undefined} [options]\n * @returns {string}\n */\nexport const list = (locale, arrayOfItems, options) => {\n  return new Intl.ListFormat(\n    locale, options\n  ).format(arrayOfItems);\n};\n\n/**\n *\n * @param {string} locale\n * @param {string[]} arrayOfItems\n * @param {Intl.ListFormatOptions|undefined} [listOptions]\n * @param {Intl.CollatorOptions|undefined} [collationOptions]\n * @returns {string}\n */\nexport const sortListSimple = (\n  locale, arrayOfItems, listOptions, collationOptions\n) => {\n  sort(locale, arrayOfItems, collationOptions);\n  return list(locale, arrayOfItems, listOptions);\n};\n\n/**\n * @typedef {number} Integer\n */\n\n/**\n *\n * @param {string} locale\n * @param {string[]} arrayOfItems\n * @param {((str: string, idx: Integer) => any)|\n *   Intl.ListFormatOptions|undefined} map\n * @param {Intl.ListFormatOptions|undefined} [listOptions]\n * @param {Intl.CollatorOptions|undefined} [collationOptions]\n * @returns {DocumentFragment|string}\n */\nexport const sortList = (\n  locale, arrayOfItems, map, listOptions, collationOptions\n) => {\n  if (typeof map !== 'function') {\n    return sortListSimple(\n      locale, /** @type {string[]} */ (arrayOfItems), map, listOptions\n    );\n  }\n  sort(locale, arrayOfItems, collationOptions);\n\n  const randomId = generateUUID();\n\n  const placeholderArray = [...arrayOfItems].map(\n    (_, i) => `<<${randomId}${i}>>`\n  );\n\n  /** @type {(string|Node)[]} */\n  const nodes = [];\n\n  /**\n   * @param {string} arg\n   * @returns {void}\n   */\n  const push = (arg) => {\n    nodes.push(arg);\n  };\n\n  processRegex(\n    // // eslint-disable-next-line prefer-named-capture-group\n    new RegExp(`<<${randomId}(\\\\d)>>`, 'gu'),\n    list(locale, placeholderArray, listOptions),\n    {\n      betweenMatches: push,\n      afterMatch: push,\n      onMatch (_, idx) {\n        push(map(arrayOfItems[Number(idx)], Number(idx)));\n      }\n    }\n  );\n  const _doc = /** @type {Document} */ (getDocument());\n  const container = _doc.createDocumentFragment();\n  container.append(...nodes);\n  return container;\n};\n","import {parseJSONExtra} from './utils.js';\nimport {sortList} from './collation.js';\n\n/**\n * @typedef {number} Integer\n */\n\n/**\n * @param {{\n *   object: import('./defaultLocaleResolver.js').DateRangeValueArray|\n *     import('./defaultLocaleResolver.js').ListValueArray|\n *     import('./defaultLocaleResolver.js').RelativeValueArray|\n *     import('./defaultLocaleResolver.js').ValueArray\n * }} cfg\n * @returns {{\n *   value: number|string|string[]|Date,\n *   options?: Intl.NumberFormatOptions|Intl.PluralRulesOptions|\n *     string|Date|number,\n *   extraOpts?: object,\n *   callback?: (item: string, i: Integer) => Element\n * }}\n */\nexport const getFormatterInfo = ({object}) => {\n  if (Array.isArray(object)) {\n    if (typeof object[1] === 'function') {\n      const [\n        value, callback, options, extraOpts\n      ] =\n        /**\n         * @type {[\n         *   string[], (item: string, i: Integer) => Element, object, object\n         * ]}\n         */ (object);\n      return {value, callback, options, extraOpts};\n    }\n    const [value, options, extraOpts] = object;\n    return {value, options, extraOpts};\n  }\n  return {value: object};\n};\n\n/**\n * Callback to give replacement text based on a substitution value.\n *\n * `value` - contains the value returned by the individual substitution.\n * `arg` - See `cfg.arg` of {@link SubstitutionCallback}.\n * `key` - The substitution key Not currently in use\n * `locale` - The locale.\n * @typedef {(info: {\n *   value: import('./defaultLocaleResolver.js').SubstitutionObjectValue\n *   arg?: string,\n *   key?: string,\n *   locale?: string\n * }) => string|Node} AllSubstitutionCallback\n*/\n\n/**\n * @type {AllSubstitutionCallback}\n */\nexport const defaultAllSubstitutions = ({value, arg, key, locale}) => {\n  // Strings or DOM Nodes\n  if (\n    typeof value === 'string' || (value && typeof value === 'object' &&\n    'nodeType' in value)\n  ) {\n    return value;\n  }\n\n  /** @type {object|string|Date|number|undefined} */\n  let opts;\n\n  /**\n   * @param {{\n   *   type: string,\n   *   options?: object,\n   *   checkArgOptions?: boolean;\n   * }} cfg\n   * @returns {object|undefined}\n   */\n  const applyArgs = ({\n    type,\n    options = /** @type {object|undefined} */ (\n      opts\n    ),\n    checkArgOptions = false\n  }) => {\n    if (typeof arg === 'string') {\n      let [userType, extraArgs, argOptions] = arg.split('|');\n      // Alias\n      if (userType === 'DATE') {\n        userType = 'DATETIME';\n      }\n      if (userType === type) {\n        if (!extraArgs) {\n          options = {};\n        } else if (!checkArgOptions || argOptions) {\n          // Todo: Allow escaping and restoring of pipe symbol\n          options = {\n            ...options,\n            ...parseJSONExtra(\n              checkArgOptions && argOptions ? argOptions : extraArgs\n            )\n          };\n        }\n      }\n    }\n    return options;\n  };\n\n  let expectsDatetime = false;\n  if (value && typeof value === 'object' && !Array.isArray(value)) {\n    const singleKey = Object.keys(value)[0];\n    if ([\n      'number', 'date', 'datetime', 'dateRange', 'datetimeRange', 'relative',\n      'region', 'language', 'script', 'currency',\n      'list', 'plural'\n    ].includes(singleKey)) {\n      let extraOpts, callback;\n      /**\n       * @typedef {any} AnyValue\n       */\n\n      const obj = /** @type {unknown} */ (\n        /** @type {AnyValue} */\n        (value)[\n          /**\n            * @type {\"number\"|\"date\"|\"datetime\"|\"dateRange\"|\n            *   \"datetimeRange\"|\"relative\"|\"region\"|\"language\"|\n            *   \"script\"|\"currency\"|\"list\"|\"plural\"}\n            */\n          (singleKey)\n        ]\n      );\n\n      ({\n        value, options: opts, extraOpts, callback\n      } = getFormatterInfo({\n        object:\n          /**\n           * @type {import('./defaultLocaleResolver.js').DateRangeValueArray|\n           *   import('./defaultLocaleResolver.js').ListValueArray|\n           *   import('./defaultLocaleResolver.js').RelativeValueArray|\n           *   import('./defaultLocaleResolver.js').ValueArray\n           * }\n           */\n          (obj)\n      }));\n\n      switch (singleKey) {\n      case 'date': case 'datetime':\n        expectsDatetime = true;\n        break;\n      case 'dateRange': case 'datetimeRange': {\n        const dtf = new Intl.DateTimeFormat(\n          locale,\n          applyArgs({type: 'DATERANGE', options: extraOpts})\n        );\n\n        return dtf.formatRange(\n          ...(\n          /** @type {[Date, Date]} */\n            ([\n              /** @type {number|Date} */\n              (value),\n              /** @type {Date} */\n              (opts)\n            ].map((val) => {\n              return typeof val === 'number' ? new Date(val) : val;\n            }))\n          )\n        );\n      } case 'region': case 'language': case 'script': case 'currency':\n        return /** @type {string} */ (new Intl.DisplayNames(\n          locale,\n          {\n            ...applyArgs({type: singleKey.toUpperCase()}),\n            type: singleKey\n          }\n        ).of(/** @type {string} */ (value)));\n      case 'relative':\n        // The second argument actually contains the primary options, so swap\n        // eslint-disable-next-line max-len -- Long\n        [extraOpts, opts] = /** @type {[Intl.RelativeTimeFormatUnit, object?]} */ (\n          [opts, extraOpts]\n        );\n        return new Intl.RelativeTimeFormat(\n          locale, applyArgs({type: 'RELATIVE'})\n        ).format(/** @type {number} */ (value), extraOpts);\n\n      // ListFormat (with Collator)\n      case 'list':\n        if (callback) {\n          return sortList(\n            /** @type {string} */ (locale),\n            /** @type {string[]} */\n            (value),\n            callback,\n            applyArgs({type: 'LIST'}),\n            applyArgs({\n              type: 'LIST', options: extraOpts, checkArgOptions: true\n            })\n          );\n        }\n        return sortList(\n          /** @type {string} */ (locale),\n          /** @type {string[]} */\n          (value),\n          applyArgs({type: 'LIST'}),\n          applyArgs({\n            type: 'LIST', options: extraOpts, checkArgOptions: true\n          })\n        );\n      default:\n        // Let `number` and `date` types drop through so their options\n        //  can be applied\n        // Let `plural` be treated as number (since value should be a number)\n        break;\n      }\n    }\n  }\n\n  // Dates\n  if (\n    value\n  ) {\n    if (\n      typeof value === 'number' &&\n      (expectsDatetime || (/^DATE(?:TIME)(?:\\||$)/u).test(\n        /** @type {string} */ (arg)\n      ))\n    ) {\n      value = new Date(value);\n    }\n    if (typeof value === 'object' && 'getTime' in value &&\n        typeof value.getTime === 'function') {\n      return new Intl.DateTimeFormat(\n        locale,\n        applyArgs({type: 'DATETIME'})\n      ).format(value);\n    }\n  }\n\n  // Date range\n  if (Array.isArray(value)) {\n    const extraOpts = /** @type {Intl.DateTimeFormatOptions|undefined} */ (\n      value[2]\n    );\n    return new Intl.DateTimeFormat(\n      locale,\n      applyArgs({type: 'DATERANGE', options: extraOpts})\n    ).formatRange(...(\n      /** @type {[Date, Date]} */\n      (value.slice(0, 2).map((val) => {\n        return typeof val === 'number' ? new Date(val) : val;\n      }))\n    ));\n  }\n\n  // Numbers\n  if (typeof value === 'number') {\n    return new Intl.NumberFormat(\n      locale,\n      applyArgs({type: 'NUMBER'})\n    ).format(value);\n  }\n\n  // console.log('value', value);\n  throw new TypeError('Unknown formatter');\n};\n","import {getMessageForKeyByStyle} from './index.js';\nimport {parseJSONExtra} from './utils.js';\nimport {getFormatterInfo} from './defaultAllSubstitutions.js';\n\n/**\n * Base class for formatting.\n */\nexport class Formatter {\n}\n\n/**\n * @param {object} cfg\n * @param {string} cfg.key\n * @param {import('./getMessageForKeyByStyle.js').LocaleBody} cfg.body\n * @param {string} cfg.type\n * @param {\"richNested\"|\"rich\"|\"plain\"|\n *   \"plainNested\"|import('./getMessageForKeyByStyle.js').\n *   MessageStyleCallback} [cfg.messageStyle=\"richNested\"]\n * @returns {string}\n */\nconst getSubstitution = ({key, body, type, messageStyle = 'richNested'}) => {\n  const messageForKey = getMessageForKeyByStyle({messageStyle});\n  const substitution = messageForKey({body}, key);\n  if (!substitution) {\n    throw new Error(`Key value not found for ${type} key: (${key})`);\n  }\n  // We don't allow a substitution function here or below as comes\n  //  from locale and locale content should not pose security concerns\n  return substitution.value;\n};\n\n/**\n * Formatter for local variables.\n */\nexport class LocalFormatter extends Formatter {\n  /**\n   * @param {import('./getMessageForKeyByStyle.js').LocalObject} locals\n   */\n  constructor (locals) {\n    super();\n    this.locals = locals;\n  }\n  /**\n   * @param {string} key\n   * @returns {string|Element}\n   */\n  getSubstitution (key) {\n    return getSubstitution({\n      key: key.slice(1), body: this.locals, type: 'local'\n    });\n  }\n  /**\n   * @param {string} key\n   * @returns {boolean}\n   */\n  isMatch (key) {\n    const components = key.slice(1).split('.');\n    /** @type {import('./getMessageForKeyByStyle.js').LocaleBody} */\n    let parent = this.locals;\n    return /** @type {typeof LocalFormatter} */ (\n      this.constructor\n    ).isMatchingKey(key) && components.every((cmpt) => {\n      const result = cmpt in parent;\n      parent =\n        /**\n         * @type {import('./defaultLocaleResolver.js').\n         *     RichNestedLocaleStringBodyObject|\n         *   import('./defaultLocaleResolver.js').\n         *     PlainNestedLocaleStringBodyObject|\n         *   import('./defaultLocaleResolver.js').RichLocaleStringSubObject\n         * }\n         */ (\n          /**\n           * @type {import('./defaultLocaleResolver.js').\n           *     RichNestedLocaleStringBodyObject|\n           *   import('./defaultLocaleResolver.js').\n           *     PlainNestedLocaleStringBodyObject\n           * }\n           */ (parent)[cmpt]\n        );\n      return result;\n    });\n  }\n  /**\n   * @param {string} key\n   * @returns {boolean}\n   */\n  static isMatchingKey (key) {\n    return key.startsWith('-');\n  }\n}\n\n/**\n * Formatter for regular variables.\n */\nexport class RegularFormatter extends Formatter {\n  /**\n   * @param {import('./defaultLocaleResolver.js').SubstitutionObject\n   * } substitutions\n   */\n  constructor (substitutions) {\n    super();\n    this.substitutions = substitutions;\n  }\n  /**\n   * @param {string} key\n   * @returns {boolean}\n   */\n  isMatch (key) {\n    return /** @type {typeof RegularFormatter} */ (\n      this.constructor\n    ).isMatchingKey(key) && key in this.substitutions;\n  }\n  /**\n   * @param {string} key\n   * @returns {boolean}\n   */\n  static isMatchingKey (key) {\n    return (/^\\w/u).test(key);\n  }\n}\n\n/**\n * Formatter for switch variables.\n */\nexport class SwitchFormatter extends Formatter {\n  /**\n   * @param {import('./defaultLocaleResolver.js').Switches} switches\n   * @param {object} cfg\n   * @param {import('./defaultLocaleResolver.js').\n   *   SubstitutionObject} cfg.substitutions\n   */\n  constructor (switches, {substitutions}) {\n    super();\n    this.switches = switches;\n    this.substitutions = substitutions;\n  }\n\n  /**\n   * @param {string} key\n   * @param {object} cfg\n   * @param {string} cfg.locale\n   * @param {(string|undefined)[]} cfg.usedKeys\n   * @param {string} cfg.arg\n   * @param {import('./getDOMForLocaleString.js').\n   *   MissingSuppliedFormattersCallback} cfg.missingSuppliedFormatters\n   * @returns {string}\n   */\n  getSubstitution (key, {locale, usedKeys, arg, missingSuppliedFormatters}) {\n    const ky = /** @type {typeof SwitchFormatter} */ (\n      this.constructor\n    ).getKey(key).slice(1);\n    // Expression might not actually use formatter, e.g., for singular,\n    //  the conditional might just write out \"one\"\n\n    const [objKey, body, keySegment] = this.getMatch(ky);\n    usedKeys.push(keySegment);\n\n    let type;\n    /** @type {string} */\n    let opts;\n    if (objKey && objKey.includes('|')) {\n      [, type, opts] = objKey.split('|');\n    }\n    if (!body) {\n      missingSuppliedFormatters({\n        key,\n        formatter: this\n      });\n      return '\\\\{' + key + '}';\n    }\n\n    /*\n    if (!(ky in this.substitutions)) {\n      throw new Error(`Switch expecting formatter: ${ky}`);\n    }\n    */\n\n    /**\n     * @param {number} value\n     * @param {Intl.NumberFormatOptions|undefined} [defaultOptions]\n     * @returns {string}\n     */\n    const getNumberFormat = (value, defaultOptions) => {\n      const numberOpts = parseJSONExtra(opts);\n      return new Intl.NumberFormat(locale, {\n        ...defaultOptions, ...numberOpts\n      }).format(value);\n    };\n\n    /**\n     * @param {number} value\n     * @param {Intl.PluralRulesOptions|undefined} [defaultOptions]\n     * @returns {Intl.LDMLPluralRule}\n     */\n    const getPluralFormat = (value, defaultOptions) => {\n      const pluralOpts = parseJSONExtra(opts);\n      return new Intl.PluralRules(locale, {\n        ...defaultOptions, ...pluralOpts\n      }).select(value);\n    };\n    const formatterValue = this.substitutions[\n      /** @type {string} */ (keySegment)\n    ];\n\n    let match = formatterValue;\n    if (typeof formatterValue === 'number') {\n      switch (type) {\n      case 'NUMBER':\n        match = getNumberFormat(formatterValue);\n        break;\n      case 'PLURAL':\n        match = getPluralFormat(formatterValue);\n        break;\n      default:\n        match = new Intl.PluralRules(locale).select(formatterValue);\n        break;\n      }\n    } else if (formatterValue && typeof formatterValue === 'object') {\n      const singleKey = Object.keys(formatterValue)[0];\n      if (['number', 'plural'].includes(singleKey)) {\n        const {value, options} = getFormatterInfo({\n          object:\n          /**\n           * @type {import('./defaultLocaleResolver.js').NumberInfo|\n           *   import('./defaultLocaleResolver.js').PluralInfo}\n           */\n          // @ts-expect-error Ok\n          (formatterValue)[\n            /** @type {\"number\"|\"plural\"} */ (singleKey)\n          ]\n        });\n        if (!type) {\n          type = singleKey.toUpperCase();\n        }\n        const typeMatches = singleKey.toUpperCase() === type;\n        if (!typeMatches) {\n          throw new TypeError(\n            `Expecting type \"${\n              type.toLowerCase()\n            }\"; instead found \"${singleKey}\".`\n          );\n        }\n        // eslint-disable-next-line default-case\n        switch (type) {\n        case 'NUMBER':\n          match = getNumberFormat(\n            /** @type {number} */ (value),\n            /** @type {Intl.NumberFormatOptions} */\n            (options)\n          );\n          break;\n        case 'PLURAL':\n          match = getPluralFormat(\n            /** @type {number} */ (value),\n            /** @type {Intl.PluralRulesOptions} */\n            (options)\n          );\n          break;\n        }\n      }\n    }\n\n    // We do not want the default `richNested` here as that will split\n    //  up the likes of `0.0`\n    const messageStyle = 'richNested';\n\n    /**\n     * @param {string} s\n     * @returns {string}\n     */\n    const preventNesting = (s) => {\n      return s.replace(/\\\\/gu, '\\\\\\\\').replace(/\\./gu, '\\\\.');\n    };\n\n    try {\n      return getSubstitution({\n        messageStyle,\n        key: match ? preventNesting(/** @type {string} */ (match)) : arg,\n        body,\n        type: 'switch'\n      });\n    } catch (err) {\n      try {\n        return getSubstitution({\n          messageStyle,\n          key: '*' +\n            preventNesting(/** @type {string} */ (match)),\n          body,\n          type: 'switch'\n        });\n      } catch (error) {\n        const k = Object.keys(body).find(\n          (switchKey) => switchKey.startsWith('*')\n        );\n        if (!k) {\n          throw new Error(`No defaults found for switch ${ky}`);\n        }\n        return getSubstitution({\n          messageStyle, key: preventNesting(k), body, type: 'switch'\n        });\n      }\n    }\n  }\n\n  /**\n   * @param {string} key\n   * @returns {boolean}\n   */\n  isMatch (key) {\n    return Boolean(\n      key && /** @type {typeof SwitchFormatter} */ (\n        this.constructor\n      ).isMatchingKey(key) &&\n        this.getMatch(key.slice(1)).length\n    );\n  }\n\n  /**\n  * @typedef {[\n  *   objKey?: string,\n  *   body?: import('./getMessageForKeyByStyle.js').LocaleBody,\n  *   keySegment?: string\n  * ]} SwitchMatch\n  */\n\n  /**\n   * @typedef {number} Integer\n   */\n\n  /**\n   * @param {string} ky\n   * @returns {SwitchMatch}\n   */\n  getMatch (ky) {\n    const ks = ky.split('.');\n    const returnValue = /** @type {unknown} */ (ks.reduce(\n      /**\n       * @param {import('./defaultLocaleResolver.js').SwitchArrays|\n       *   import('./defaultLocaleResolver.js').SwitchArray} obj\n       * @param {string} k\n       * @param {Integer} i\n       * @throws {Error}\n       * @returns {SwitchMatch|\n       *   import('./defaultLocaleResolver.js').SwitchCaseArray|\n       *   import('./defaultLocaleResolver.js').SwitchArray}\n       */\n      // @ts-expect-error It works\n      (obj, k, i) => {\n        if (i < ks.length - 1) {\n          if (!(k in obj)) {\n            throw new Error(`Switch key \"${k}\" not found (from \"~${ky}\")`);\n          }\n          return obj[k];\n        }\n        // Todo: Should throw on encountering duplicate fundamental keys (even\n        //  if there are different arguments, that should not be allowed)\n        const ret = Object.entries(obj).find(([switchKey]) => {\n          return k === /** @type {typeof SwitchFormatter} */ (\n            this.constructor\n          ).getKey(switchKey);\n        });\n\n        return ret ? [...ret, k] : [];\n      }, this.switches\n    ));\n\n    return /** @type {SwitchMatch} */ (returnValue);\n  }\n\n  /**\n   * @param {string} key\n   * @returns {boolean}\n   */\n  static isMatchingKey (key) {\n    return key.startsWith('~');\n  }\n  /**\n   * @param {string} key\n   * @returns {string}\n   */\n  static getKey (key) {\n    const match = key.match(/^[^|]*/u);\n    return /** @type {string} */ (match && match[0]);\n  }\n}\n","/**\n * @typedef {(value: any) => Promise<any>|any} PromiseChainErrback\n */\n\n/**\n * The given array will have its items processed in series; if the supplied\n *  `errBack` (which is guaranteed to run at least once), when passed the\n *  current item, returns a `Promise` or value that resolves, that value will\n *  be used for the return result of this function and no other items in\n *  the array will continue to be processed; if it rejects, however, the\n *  next item will be processed with `errBack`.\n * Accept an array of values to pass to an errback which should return\n *  a promise (or final result value) which resolves to a result or which\n *  rejects so that the next item in the array can be checked in series.\n * @param {Array<any>} values Array of values\n * @param {PromiseChainErrback} errBack Accepts an item of the array as its\n *   single argument\n * @param {string} [errorMessage=\"Reached end of values array.\"]\n * @returns {Promise<any>} Either resolves to a value derived from an item in\n *  the array or rejects if all items reject\n * @example\npromiseChainForValues(['a', 'b', 'c'], (val) => {\n  return new Promise(function (resolve, reject) {\n    if (val === 'a') {\n      reject(new Error('missing'));\n    }\n    setTimeout(() => {\n      resolve(val);\n    }, 100);\n  });\n});\n */\nexport const promiseChainForValues = (\n  values, errBack, errorMessage = 'Reached end of values array.'\n) => {\n  if (!Array.isArray(values)) {\n    throw new TypeError(\n      'The `values` argument to `promiseChainForValues` must be an array.'\n    );\n  }\n  if (typeof errBack !== 'function') {\n    throw new TypeError(\n      'The `errBack` argument to `promiseChainForValues` must be a function.'\n    );\n  }\n  return (async () => {\n    let ret;\n    let p = Promise.reject(\n      new Error('Intentionally reject so as to begin checking chain')\n    );\n    let breaking;\n    while (true) {\n      const value = values.shift();\n      try {\n        // eslint-disable-next-line no-await-in-loop\n        ret = await p;\n        break;\n      } catch (err) {\n        if (breaking) {\n          throw new Error(errorMessage);\n        }\n        // We allow one more try\n        if (!values.length) {\n          breaking = true;\n        }\n        // // eslint-disable-next-line no-await-in-loop\n        p = errBack(value);\n      }\n    }\n    return ret;\n  })();\n};\n","/**\n* `arg` - By default, accepts the third portion of the\n*   `formattingRegex` within `insertNodes`, i.e., to allow the locale to\n*   supply arguments back to the calling script.\n* `key` - The substitution key.\n* @callback SubstitutionCallback\n* @param {{\n*   arg: string,\n*   key: string\n* }} cfg\n* @returns {string|Element} The replacement text or element\n*/\n\n/**\n * May have additional properties if supplying options to an underlying\n * formatter.\n * The first value is the main value.\n * The second are the options related to the main value.\n * The third are any additional options.\n * @typedef {[string|number|Date, object?, object?]} ValueArray\n */\n\n/**\n * @typedef {number} Integer\n */\n\n/**\n * @typedef {[\n *   string[],\n *   (((item: string, i: Integer) => Element)|object)?,\n *   object?,\n *   object?\n * ]} ListValueArray\n */\n\n/**\n * @typedef {[\n *   Date|number, Date|number, Intl.DateTimeFormatOptions|undefined\n * ]} DateRangeValueArray\n */\n\n/**\n * @typedef {[number, Intl.RelativeTimeFormatUnit, object?]} RelativeValueArray\n */\n\n/**\n * @typedef {object} RelativeTimeInfo\n * @property {RelativeValueArray} relative\n */\n\n/**\n * @typedef {object} ListInfo\n * @property {ListValueArray} list\n */\n\n/**\n * @typedef {object} NumberInfo\n * @property {ValueArray|number} number\n */\n\n/**\n * @typedef {object} DateInfo\n * @property {ValueArray} date\n */\n\n/**\n * @typedef {object} DateTimeInfo\n * @property {ValueArray} datetime\n */\n\n/**\n * @typedef {object} DateRangeInfo\n * @property {DateRangeValueArray} dateRange\n */\n\n/**\n * @typedef {object} DatetimeRangeInfo\n * @property {DateRangeValueArray} datetimeRange\n */\n\n/**\n * @typedef {object} RegionInfo\n * @property {ValueArray} region\n */\n\n/**\n * @typedef {object} LanguageInfo\n * @property {ValueArray} language\n */\n\n/**\n * @typedef {object} ScriptInfo\n * @property {ValueArray} script\n */\n\n/**\n * @typedef {object} CurrencyInfo\n * @property {ValueArray} currency\n */\n\n/**\n * @typedef {object} PluralInfo\n * @property {ValueArray} plural\n */\n\n/**\n * @typedef {{[key: string]: string}} PlainLocaleStringBodyObject\n */\n\n/**\n * @typedef {{\n *   [key: string]: string|PlainNestedLocaleStringBodyObject\n * }} PlainNestedLocaleStringBodyObject\n */\n\n/**\n * @typedef {object} SwitchCaseInfo\n * @property {boolean} [default=false] Whether this conditional is the default\n */\n\n/**\n * Contains the type, the message, and optional info about the switch case.\n * @typedef {[string, string, SwitchCaseInfo?]} SwitchCaseArray\n */\n\n/**\n * @typedef {Object<string, SwitchCaseArray>} SwitchArray\n */\n\n/**\n * @typedef {Object<string, SwitchArray>} SwitchArrays\n */\n\n/**\n * @typedef {object} SwitchCase\n * @property {string} message The locale message with any formatting\n *   place-holders; defaults to use of any single conditional\n * @property {string} [description] A description to add for translators\n */\n\n/**\n * @typedef {Object<string, SwitchCase>} Switch\n */\n\n/**\n * @typedef {Object<string, Switch>} Switches\n */\n\n/**\n * @typedef {object} RichLocaleStringSubObject\n * @property {string} message The locale message with any formatting\n *   place-holders; defaults to use of any single conditional\n * @property {string} [description] A description to add for translators\n * @property {Switches} [switches] Conditionals\n */\n\n/**\n * @typedef {{\n *   [key: string]: RichLocaleStringSubObject\n * }} RichLocaleStringBodyObject\n */\n\n/**\n * @typedef {{\n *   [key: string]: RichLocaleStringSubObject|RichNestedLocaleStringBodyObject\n * }} RichNestedLocaleStringBodyObject\n */\n\n/**\n * Takes a base path and locale and gives a URL.\n * @callback LocaleResolver\n * @param {string} localesBasePath (Trailing slash optional)\n * @param {string} locale BCP-47 language string\n * @returns {string|false} URL of the locale file to be fetched\n */\n\n/**\n * @typedef {[\n *   Date|number, Date|number, (Intl.DateTimeFormatOptions|undefined)?\n * ]} DateRange\n */\n\n/**\n * @typedef {string|string[]|number|Date|DateRange|\n *     Element|Node|SubstitutionCallback|\n *     NumberInfo|PluralInfo|CurrencyInfo|LanguageInfo|ScriptInfo|\n *     DatetimeRangeInfo|DateRangeInfo|RegionInfo|DateTimeInfo|DateInfo|\n *     ListInfo|RelativeTimeInfo\n * } SubstitutionObjectValue\n */\n\n/**\n * @typedef {{\n *   [key: string]: SubstitutionObjectValue\n * }} SubstitutionObject\n */\n\n/**\n * @type {LocaleResolver}\n */\nexport const defaultLocaleResolver = (localesBasePath, locale) => {\n  if (typeof localesBasePath !== 'string') {\n    throw new TypeError(\n      '`defaultLocaleResolver` expects a string `localesBasePath`.'\n    );\n  }\n  if (typeof locale !== 'string') {\n    throw new TypeError(\n      '`defaultLocaleResolver` expects a string `locale`.'\n    );\n  }\n  if ((/[./\\\\]/u).test(locale)) {\n    throw new TypeError(\n      'Locales cannot use file-reserved characters, `.`, `/` or `\\\\`'\n    );\n  }\n  return `${localesBasePath.replace(/\\/$/u, '')}/_locales/${locale}/messages.json`;\n};\n","import {\n  LocalFormatter, RegularFormatter, SwitchFormatter\n} from './Formatter.js';\nimport {defaultAllSubstitutions} from './defaultAllSubstitutions.js';\nimport {unescapeBackslashes, parseJSONExtra, processRegex} from './utils.js';\n\n/**\n * @typedef {number} Integer\n */\n\n/**\n * @callback Replace\n * @param {{\n *   str: string,\n *   substs?: import('./defaultLocaleResolver.js').SubstitutionObject,\n *   formatter?: import('./Formatter.js').RegularFormatter|\n *     import('./Formatter.js').LocalFormatter|\n *     import('./Formatter.js').SwitchFormatter\n * }} cfg\n * @returns {string}\n */\n\n/**\n * @callback ProcessSubstitutions\n * @param {{\n *   str: string,\n *   substs?: import('./defaultLocaleResolver.js').SubstitutionObject,\n *   formatter?: import('./Formatter.js').RegularFormatter|\n *     import('./Formatter.js').LocalFormatter|\n *     import('./Formatter.js').SwitchFormatter\n * }} cfg\n * @returns {(string|Node)[]}\n */\n\n/**\n * Callback to return a string or array of nodes and strings based on\n *   a localized string, substitutions object, and other metadata.\n *\n * `string` - The localized string.\n * `dom` - If substitutions known to contain DOM, can be set\n *    to `true` to optimize.\n * `usedKeys` - Array for tracking which keys have been used. Defaults\n *   to empty array.\n * `substitutions` - The formatting substitutions object.\n * `allSubstitutions` - The\n *   callback or array composed thereof for applying to each substitution.\n * `locale` - The successfully resolved locale\n * `locals` - The local section.\n * `switches` - The switch section.\n * `maximumLocalNestingDepth` - Depth of local variable resolution to\n *   check before reporting a recursion error. Defaults to 3.\n * `missingSuppliedFormatters` - Callback\n *   supplied key to throw if the supplied key is present (if\n *   `throwOnMissingSuppliedFormatters` is enabled). Defaults to no-op.\n * `checkExtraSuppliedFormatters` - No\n *   argument callback to check if any formatters are not present in `string`\n *   (if `throwOnExtraSuppliedFormatters` is enabled). Defaults to no-op.\n * @typedef {(cfg: {\n *   string: string,\n *   dom?: boolean,\n *   usedKeys: string[],\n *   substitutions: import('./defaultLocaleResolver.js').SubstitutionObject,\n *   allSubstitutions?: ?(\n *     import('./defaultAllSubstitutions.js').AllSubstitutionCallback|\n *     import('./defaultAllSubstitutions.js').AllSubstitutionCallback[]\n *   )\n *   locale: string|undefined,\n *   locals?: import('./getMessageForKeyByStyle.js').LocalObject|undefined,\n *   switches: import('./defaultLocaleResolver.js').Switches|undefined,\n *   maximumLocalNestingDepth?: Integer,\n *   missingSuppliedFormatters: import('./getDOMForLocaleString.js').\n *     MissingSuppliedFormattersCallback,\n *   checkExtraSuppliedFormatters: import('./getDOMForLocaleString.js').\n *     CheckExtraSuppliedFormattersCallback\n * }) => string|(Node|string)[]} InsertNodesCallback\n */\n\n/**\n * @type {InsertNodesCallback}\n */\nexport const defaultInsertNodes = ({\n  string, dom, usedKeys, substitutions, allSubstitutions, locale,\n  locals, switches,\n  maximumLocalNestingDepth = 3,\n  missingSuppliedFormatters,\n  checkExtraSuppliedFormatters\n}) => {\n  if (typeof maximumLocalNestingDepth !== 'number') {\n    throw new TypeError('`maximumLocalNestingDepth` must be a number.');\n  }\n\n  const addFunctionKeys = () => {\n    Object.entries(substitutions).forEach(([key, value]) => {\n      if (typeof value === 'function') {\n        usedKeys.push(key);\n      }\n    });\n  };\n  addFunctionKeys();\n\n  const localFormatter = new LocalFormatter(\n    /** @type {import('./getMessageForKeyByStyle.js').LocalObject} */ (locals)\n  );\n  const regularFormatter = new RegularFormatter(substitutions);\n  const switchFormatter = new SwitchFormatter(\n    /** @type {import('./defaultLocaleResolver.js').Switches} */\n    (switches),\n    {substitutions}\n  );\n\n  // eslint-disable-next-line max-len\n  // eslint-disable-next-line prefer-named-capture-group, unicorn/no-unsafe-regex\n  const formattingRegex = /(\\\\*)\\{((?:[^}]|\\\\\\})*?)(?:(\\|)([^}]*))?\\}/gu;\n  if (allSubstitutions) {\n    allSubstitutions = Array.isArray(allSubstitutions)\n      ? allSubstitutions\n      : [allSubstitutions];\n  }\n\n  /**\n   * @param {{\n   *   key: string,\n   *   arg: string,\n   *   substs: import('./defaultLocaleResolver.js').SubstitutionObject\n   * }} cfg\n   * @returns {string|Node}\n   */\n  const getSubstitution = ({key, arg, substs}) => {\n    /** @type {import('./defaultLocaleResolver.js').SubstitutionObjectValue} */\n    let substitution;\n    const isLocalKey =\n      /**\n       * @type {typeof import('./Formatter.js').LocalFormatter}\n       */ (\n        localFormatter.constructor\n      ).isMatchingKey(key);\n    if (isLocalKey) {\n      substitution = localFormatter.getSubstitution(key);\n    } else if (\n      /**\n       * @type {typeof import('./Formatter.js').SwitchFormatter}\n       */ (switchFormatter.constructor).isMatchingKey(key)\n    ) {\n      substitution = switchFormatter.getSubstitution(key, {\n        // eslint-disable-next-line object-shorthand -- TS casting\n        locale: /** @type {string} */ (locale),\n        usedKeys,\n        arg,\n        missingSuppliedFormatters\n      });\n    } else {\n      substitution = substs[key];\n      if (typeof substitution === 'function') {\n        substitution = substitution({arg, key});\n      }\n    }\n    // Todo: Could support resolving locals within arguments\n    // Todo: Even for `null` `allSubstitutions`, we could have\n    //  a mode to throw for non-string/non-DOM (non-numbers?),\n    //  or whatever is not likely intended as a target for `toString()`.\n    if (allSubstitutions) {\n      substitution = /** @type {string|Node} */ (\n        /**\n         * @type {import('./defaultAllSubstitutions.js').\n         *   AllSubstitutionCallback[]\n         * }\n         */ (\n          allSubstitutions\n        ).reduce(\n          /**\n           * @param {import('./defaultLocaleResolver.js').\n           *   SubstitutionObjectValue} subst\n           * @param {import('./defaultAllSubstitutions.js').\n           *   AllSubstitutionCallback} allSubst\n           * @returns {string|Node}\n           */\n          (subst, allSubst) => {\n            return allSubst({\n              value: subst,\n              arg,\n              key,\n              locale\n            });\n          }, substitution\n        ));\n    } else if (arg && (/^(?:NUMBER|DATE(?:TIME|RANGE|TIMERANGE)?|REGION|LANGUAGE|SCRIPT|CURRENCY|RELATIVE|LIST)(?:\\||$)/u).test(arg)) {\n      substitution = defaultAllSubstitutions({\n        value: substitution, arg, key, locale\n      });\n    }\n\n    // Change this and return type if other substitutions possible\n    return /** @type {string|Node} */ (substitution);\n  };\n\n  let recursiveLocalCount = 1;\n  /**\n   * @param {{\n   *   substitution: string|Node,\n   *   ky: string,\n   *   arg: string,\n   *   processSubsts: Replace|ProcessSubstitutions\n   * }} cfg\n   * @returns {number|string|Node|(string|Node)[]}\n   */\n  const checkLocalVars = ({substitution, ky, arg, processSubsts}) => {\n    /** @type {number|string|Node|(string|Node)[]} */\n    let subst = substitution;\n    if (\n      typeof substitution === 'string' &&\n      substitution.includes('{')\n    ) {\n      if (recursiveLocalCount++ > maximumLocalNestingDepth) {\n        throw new TypeError('Too much recursion in local variables.');\n      }\n\n      if (\n        /** @type {typeof import('./Formatter.js').LocalFormatter} */ (\n          localFormatter.constructor\n        ).isMatchingKey(ky)\n      ) {\n        let extraSubsts = substitutions;\n        let localFormatters;\n        if (arg) {\n          localFormatters = parseJSONExtra(arg);\n          extraSubsts = {\n            ...substitutions,\n            ...localFormatters\n          };\n        }\n        subst = processSubsts({\n          str: substitution, substs: extraSubsts,\n          formatter: localFormatter\n        });\n        if (localFormatters) {\n          checkExtraSuppliedFormatters({substitutions: localFormatters});\n        }\n      } else if (\n        /** @type {typeof import('./Formatter.js').SwitchFormatter} */\n        (switchFormatter.constructor).isMatchingKey(ky)\n      ) {\n        subst = processSubsts({\n          str: substitution\n        });\n      }\n    }\n\n    return subst;\n  };\n\n  // Give chance to avoid this block when known to contain DOM\n  if (!dom) {\n    // Run this block to optimize non-DOM substitutions\n    let returnsDOM = false;\n\n    /** @type {Replace} */\n    const replace = ({\n      str, substs = substitutions,\n      formatter = regularFormatter\n    }) => {\n      return str.replace(\n        formattingRegex,\n        /**\n         * @param {string} _\n         * @param {string} esc\n         * @param {string} ky\n         * @param {string} pipe\n         * @param {string} arg\n         * @returns {string}\n         */\n        (_, esc, ky, pipe, arg) => {\n          if (esc.length % 2) {\n            return _;\n          }\n          if (missingSuppliedFormatters({\n            key: ky,\n            formatter\n          })) {\n            return _;\n          }\n          /** @type {string|number|Node|(string|Node)[]} */\n          let substitution = getSubstitution({key: ky, arg, substs});\n\n          substitution = checkLocalVars({\n            substitution, ky, arg, processSubsts: replace\n          });\n\n          returnsDOM = returnsDOM ||\n            (substitution !== null && typeof substitution === 'object' &&\n            'nodeType' in substitution);\n          usedKeys.push(ky);\n          return esc + substitution;\n        }\n      );\n    };\n    const ret = replace({str: string});\n    if (!returnsDOM) {\n      checkExtraSuppliedFormatters({substitutions});\n      usedKeys.length = 0;\n      addFunctionKeys();\n      return unescapeBackslashes(ret);\n    }\n    usedKeys.length = 0;\n    addFunctionKeys();\n  }\n\n  recursiveLocalCount = 1;\n\n  /** @type {ProcessSubstitutions} */\n  const processSubstitutions = ({\n    str, substs = substitutions, formatter = regularFormatter\n  }) => {\n    /** @type {(string|Node)[]} */\n    const nodes = [];\n\n    // Copy to ensure we are resetting index on each instance (manually\n    // resetting on `formattingRegex` is problematic with recursion that\n    // uses the same regex copy)\n    const regex = new RegExp(formattingRegex, 'gu');\n\n    /**\n     * @param {...(string|Node)} args\n     */\n    const push = (...args) => {\n      nodes.push(...args);\n    };\n\n    processRegex(regex, str, {\n      extra: push,\n      onMatch (_, esc, ky, pipe, arg) {\n        if (missingSuppliedFormatters({\n          key: ky, formatter\n        })) {\n          push(_);\n        } else {\n          if (esc.length) {\n            push(esc);\n          }\n\n          /** @type {string|number|Node|(string|Node)[]} */\n          let substitution = getSubstitution({key: ky, arg, substs});\n          substitution = checkLocalVars({\n            substitution, ky, arg, processSubsts: processSubstitutions\n          });\n          if (Array.isArray(substitution)) {\n            push(...substitution);\n          } else if (\n            // Clone so that multiple instances may be added (and no\n            // side effects to user code)\n            substitution && typeof substitution === 'object' &&\n            'nodeType' in substitution\n          ) {\n            push(substitution.cloneNode(true));\n          } else {\n            // Why no number here?\n            push(/** @type {string} */ (substitution));\n          }\n        }\n        usedKeys.push(ky);\n      }\n    });\n    return nodes;\n  };\n  const nodes = processSubstitutions({str: string});\n\n  checkExtraSuppliedFormatters({substitutions});\n  usedKeys.length = 0;\n  return nodes.map((node) => {\n    if (typeof node === 'string') {\n      return unescapeBackslashes(node);\n    }\n    return node;\n  });\n};\n","/**\n * @callback KeyCheckerConverterCallback\n * @param {string|string[]} key By default may be an array (if the type ends\n *   with \"Nested\") or a string, but a non-default validator may do otherwise.\n * @param {\"plain\"|\"plainNested\"|\"rich\"|\n *   \"richNested\"|\n *   import('./getMessageForKeyByStyle.js').MessageStyleCallback\n * } messageStyle\n * @throws {TypeError}\n * @returns {string} The converted (or unconverted) key\n */\n\n/**\n * @type {KeyCheckerConverterCallback}\n */\nexport function defaultKeyCheckerConverter (key, messageStyle) {\n  if (Array.isArray(key) &&\n    key.every((k) => {\n      return typeof k === 'string';\n    }) &&\n    typeof messageStyle === 'string' && messageStyle.endsWith('Nested')\n  ) {\n    return key.map((k) => {\n      return k\n        .replace(/(?<backslashes>\\\\+)/gu, '\\\\$<backslashes>')\n        .replace(/\\./gu, '\\\\.');\n    }).join('.');\n  }\n  if (typeof key !== 'string') {\n    throw new TypeError(\n      '`key` is expected to be a string (or array of strings for nested style)'\n    );\n  }\n\n  return key;\n}\n","import {unescapeBackslashes, processRegex} from './utils.js';\n\n/**\n* @typedef {LocaleBody} LocalObject\n*/\n\n/**\n * May also contain language code and direction, translator name and\n * contact, etc., but no defaults currently apply besides reserving `locals`\n * @typedef {object} LocaleHead\n * @property {LocalObject} [locals]\n * @property {import('./defaultLocaleResolver.js').Switches} [switches]\n*/\n\n/**\n * @typedef {import('./defaultLocaleResolver.js').\n *   RichNestedLocaleStringBodyObject|\n *   import('./defaultLocaleResolver.js').RichLocaleStringBodyObject|\n *   import('./defaultLocaleResolver.js').PlainLocaleStringBodyObject|\n *   import('./defaultLocaleResolver.js').PlainNestedLocaleStringBodyObject|\n *   object\n * } LocaleBody\n */\n\n/**\n* @typedef {object} LocaleObject\n* @property {LocaleHead} [head]\n* @property {LocaleBody} body\n*/\n\n/**\n* @typedef {object} MessageStyleCallbackResult\n* @property {string} value Regardless of message style, will contain\n*    the string result\n* @property {import(\n*  './defaultLocaleResolver.js'\n*  ).RichLocaleStringSubObject} [info] Full info on the localized item\n*   (for rich message styles only)\n*/\n\n/**\n* @callback MessageStyleCallback\n* @param {LocaleObject} obj The exact\n*   format depends on the `cfg.defaults` of `i18n`\n* @param {string} key\n* @returns {false|MessageStyleCallbackResult} If `false`, will resort to default\n*/\n\n/* eslint-disable max-len */\n/**\n * @param {object} [cfg]\n * @param {\"richNested\"|\"rich\"|\"plain\"|\"plainNested\"|MessageStyleCallback} [cfg.messageStyle=\"richNested\"]\n * @returns {MessageStyleCallback}\n */\nexport const getMessageForKeyByStyle = ({\n  /* eslint-enable max-len */\n  messageStyle = 'richNested'\n} = {}) => {\n  return typeof messageStyle === 'function'\n    ? messageStyle\n    : (messageStyle === 'richNested'\n      ? (mainObj, key) => {\n        const obj =\n          /**\n           * @type {import('./defaultLocaleResolver.js').\n           *   RichNestedLocaleStringBodyObject\n           * }\n           */ (\n            mainObj && typeof mainObj === 'object' && mainObj.body\n          );\n\n        /**\n         * @type {string[]}\n         */\n        const keys = [];\n        // eslint-disable-next-line prefer-named-capture-group\n        const possiblyEscapedCharPattern = /(\\\\*)\\./gu;\n\n        /**\n         * @param {string} val\n         * @returns {void}\n         */\n        const mergeWithPreviousOrStart = (val) => {\n          if (!keys.length) {\n            keys[0] = '';\n          }\n          keys[keys.length - 1] += val;\n        };\n        processRegex(possiblyEscapedCharPattern, key, {\n          // If odd, this is just an escaped dot, so merge content with\n          //   any previous\n          extra: mergeWithPreviousOrStart,\n          onMatch (_, esc) {\n            // If even, there are no backslashes, or they are just escaped\n            //  backslashes and not an escaped dot, so start anew, though\n            //  first merge any backslashes\n            mergeWithPreviousOrStart(esc);\n            keys.push('');\n          }\n        });\n        const keysUnescaped = keys.map((ky) => {\n          return unescapeBackslashes(ky);\n        });\n\n        /**\n         * @type {false|{\n         *   value: string|undefined,\n         *   info: import('./defaultLocaleResolver.js').\n         *     RichLocaleStringSubObject\n         * }}\n         */\n        let ret = false;\n        let currObj = obj;\n        keysUnescaped.some((ky, i, kys) => {\n          if (!currObj || typeof currObj !== 'object') {\n            return true;\n          }\n          if (\n            // If specified key is too deep, we should fail\n            i === kys.length - 1 && ky in currObj &&\n            currObj[ky] && typeof currObj[ky] === 'object' &&\n            'message' in currObj[ky] &&\n            // NECESSARY FOR SECURITY ON UNTRUSTED LOCALES\n            typeof currObj[ky].message === 'string'\n          ) {\n            ret = {\n              value: /** @type {string} */ (currObj[ky].message),\n              info:\n              /**\n               * @type {import('./defaultLocaleResolver.js').\n               *   RichLocaleStringSubObject}\n               */ (currObj[ky])\n            };\n          }\n          currObj =\n            /**\n             * @type {import('./defaultLocaleResolver.js').\n             *   RichNestedLocaleStringBodyObject\n             * }\n             */ (currObj[ky]);\n\n          return false;\n        });\n        return ret;\n      }\n      : (messageStyle === 'rich'\n        ? (mainObj, key) => {\n          const obj =\n            /**\n             * @type {import('./defaultLocaleResolver.js').\n             *   RichLocaleStringBodyObject\n             * }\n             */ (mainObj && typeof mainObj === 'object' && mainObj.body);\n          if (\n            obj && typeof obj === 'object' &&\n            key in obj && obj[key] && typeof obj[key] === 'object' &&\n            'message' in obj[key] &&\n            // NECESSARY FOR SECURITY ON UNTRUSTED LOCALES\n            typeof obj[key].message === 'string'\n          ) {\n            return {\n              value: obj[key].message,\n              info: obj[key]\n            };\n          }\n          return false;\n        }\n        : (messageStyle === 'plain'\n          ? (mainObj, key) => {\n            const obj =\n              /**\n               * @type {import('./defaultLocaleResolver.js').\n               *   PlainLocaleStringBodyObject\n               * }\n               */ (\n                mainObj && typeof mainObj === 'object' && mainObj.body\n              );\n            if (\n              obj && typeof obj === 'object' &&\n              key in obj && obj[key] && typeof obj[key] === 'string'\n            ) {\n              return {\n                value: obj[key]\n              };\n            }\n            return false;\n          }\n          : (messageStyle === 'plainNested'\n            ? (mainObj, key) => {\n              const obj =\n                /**\n                 * @type {import('./defaultLocaleResolver.js').\n                 *   PlainNestedLocaleStringBodyObject\n                 * }\n                 */ (\n                  mainObj && typeof mainObj === 'object' && mainObj.body\n                );\n              if (obj && typeof obj === 'object') {\n                // Should really be counting that it is an odd number\n                //  of backslashes only\n                const keys = key.split(/(?<!\\\\)\\./u);\n                const value = keys.reduce(\n                  /**\n                   * @param {null|string|import('./defaultLocaleResolver.js').\n                   *   PlainNestedLocaleStringBodyObject} o\n                   * @param {string} k\n                   * @returns {null|string|import('./defaultLocaleResolver.js').\n                   *   PlainNestedLocaleStringBodyObject}\n                   */\n                  (o, k) => {\n                    if (o && typeof o === 'object' && o[k]) {\n                      return o[k];\n                    }\n                    return null;\n                  }, obj\n                );\n                if (value && typeof value === 'string') {\n                  return {value};\n                }\n              }\n              return false;\n            }\n            : (() => {\n              throw new TypeError(`Unknown \\`messageStyle\\` ${messageStyle}`);\n            })()))\n      )\n    );\n};\n","import {getMessageForKeyByStyle} from './getMessageForKeyByStyle.js';\n\n/**\n * @param {object} cfg\n * @param {string|false} [cfg.message] If present, this string will be\n *   the return value.\n * @param {false|null|undefined|\n *   import('./getMessageForKeyByStyle.js').LocaleObject\n * } [cfg.defaults]\n * @param {\"richNested\"|\"rich\"|\"plain\"|\"plainNested\"|\n *   import('./getMessageForKeyByStyle.js').MessageStyleCallback\n * } [cfg.messageStyle=\"richNested\"]\n * @param {import('./getMessageForKeyByStyle.js').\n *   MessageStyleCallback\n * } [cfg.messageForKey] Defaults to getting `MessageStyleCallback` based\n *   on `messageStyle`\n * @param {string} cfg.key Key to check against object of strings;\n *   used to find a default if no string `message` is provided.\n * @returns {string}\n */\nexport const getStringFromMessageAndDefaults = ({\n  message,\n  defaults,\n  messageStyle,\n  messageForKey = getMessageForKeyByStyle({messageStyle}),\n  key\n}) => {\n  // NECESSARY CHECK FOR SECURITY ON UNTRUSTED LOCALES\n  /** @type {string|false} */\n  let str;\n  if (typeof message === 'string') {\n    str = message;\n  } else if (\n    defaults === false || defaults === undefined || defaults === null\n  ) {\n    str = false;\n  } else if (defaults && typeof defaults === 'object') {\n    const msg = messageForKey(defaults, key);\n    str = msg ? msg.value : msg;\n  } else {\n    throw new TypeError(\n      `Default locale strings must resolve to \\`false\\`, ` +\n      `nullish, or an object!`\n    );\n  }\n  if (str === false) {\n    throw new Error(`Key value not found for key: (${key})`);\n  }\n  return str;\n};\n","import {defaultAllSubstitutions} from './defaultAllSubstitutions.js';\nimport {defaultInsertNodes} from './defaultInsertNodes.js';\nimport {getDocument} from './shared.js';\n\nexport {setDocument, getDocument} from './shared.js';\n\n/**\n * @typedef {number} Integer\n */\n\n/**\n * @callback CheckExtraSuppliedFormattersCallback\n * @param {import('./defaultLocaleResolver.js').SubstitutionObject|{\n *   substitutions: import('./defaultLocaleResolver.js').SubstitutionObject\n * }} substs (Why is an arg. of `substitutions` being passed in?)\n * @throws {Error} Upon an extra formatting key being found\n * @returns {void}\n */\n\n/**\n * @typedef {(\n *   cfg: {\n *     key: string,\n *     formatter: import('./Formatter.js').LocalFormatter|\n *       import('./Formatter.js').RegularFormatter|\n *       import('./Formatter.js').SwitchFormatter\n *   }\n * ) => boolean} MissingSuppliedFormattersCallback\n */\n\n/**\n *\n * @param {object} cfg\n * @param {string} cfg.string\n * @param {string} [cfg.locale] The (possibly already resolved) locale\n *   for use by configuring formatters\n * @param {import('./getMessageForKeyByStyle.js').LocalObject} [cfg.locals]\n * @param {import('./defaultLocaleResolver.js').Switches} [cfg.switches]\n * @param {Integer} [cfg.maximumLocalNestingDepth=3]\n * @param {?(import('./defaultAllSubstitutions.js').AllSubstitutionCallback|\n *   import('./defaultAllSubstitutions.js').AllSubstitutionCallback[])\n * } [cfg.allSubstitutions=[defaultAllSubstitutions]]\n * @param {import('./defaultInsertNodes.js').InsertNodesCallback\n * } [cfg.insertNodes=defaultInsertNodes]\n * @param {false|import('./defaultLocaleResolver.js').SubstitutionObject\n * } [cfg.substitutions=false]\n * @param {boolean} [cfg.dom=false]\n * @param {boolean} [cfg.forceNodeReturn=false]\n * @param {boolean} [cfg.throwOnMissingSuppliedFormatters=true]\n * @param {boolean} [cfg.throwOnExtraSuppliedFormatters=true]\n * @returns {string|Text|DocumentFragment}\n */\nexport const getDOMForLocaleString = ({\n  string,\n  locale,\n  locals,\n  switches,\n  maximumLocalNestingDepth,\n  allSubstitutions = [\n    defaultAllSubstitutions\n  ],\n  insertNodes = defaultInsertNodes,\n  substitutions = false,\n  dom = false,\n  forceNodeReturn = false,\n  throwOnMissingSuppliedFormatters = true,\n  throwOnExtraSuppliedFormatters = true\n}) => {\n  if (typeof string !== 'string') {\n    throw new TypeError(\n      'An options object with a `string` property set to a string must ' +\n      'be provided for `getDOMForLocaleString`.'\n    );\n  }\n\n  /**\n   * @param {string} str\n   * @returns {Text|string}\n   */\n  const stringOrTextNode = (str) => {\n    const _doc = getDocument();\n    return forceNodeReturn\n      ? /** @type {Document} */ (\n        _doc\n      ).createTextNode(str)\n      : str;\n  };\n\n  /** @type {string[]} */\n  const usedKeys = [];\n\n  /**\n   * @type {CheckExtraSuppliedFormattersCallback}\n   */\n  const checkExtraSuppliedFormatters = ({\n    substitutions: substs\n  }) => {\n    if (throwOnExtraSuppliedFormatters) {\n      Object.keys(substs).forEach((key) => {\n        if (!usedKeys.includes(key)) {\n          throw new Error(`Extra formatting key: ${key}`);\n        }\n      });\n    }\n  };\n\n  /**\n   * @type {MissingSuppliedFormattersCallback}\n   */\n  const missingSuppliedFormatters = ({\n    key, formatter\n  }) => {\n    const matching = formatter.isMatch(key);\n    if (\n      /**\n       * @type {typeof import('./Formatter.js').LocalFormatter|\n       *       typeof import('./Formatter.js').RegularFormatter|\n       *       typeof import('./Formatter.js').SwitchFormatter}\n       */ (\n        formatter.constructor\n      ).isMatchingKey(key) && !matching\n    ) {\n      if (throwOnMissingSuppliedFormatters) {\n        throw new Error(`Missing formatting key: ${key}`);\n      }\n      return true;\n    }\n    return false;\n  };\n\n  if (\n    !substitutions && !allSubstitutions &&\n    !throwOnMissingSuppliedFormatters\n  ) {\n    return stringOrTextNode(string);\n  }\n  if (!substitutions) {\n    substitutions = {};\n  }\n\n  const nodes = insertNodes({\n    string, dom, usedKeys, substitutions, allSubstitutions, locale,\n    locals,\n    switches,\n    missingSuppliedFormatters,\n    checkExtraSuppliedFormatters\n  });\n  if (typeof nodes === 'string') {\n    return stringOrTextNode(nodes);\n  }\n\n  const _doc = getDocument();\n  const container = /** @type {Document} */ (_doc).createDocumentFragment();\n  container.append(...nodes);\n\n  return container;\n};\n","/* globals intlDomLocale */\n\nimport {defaultLocaleResolver} from './defaultLocaleResolver.js';\nimport {promiseChainForValues} from './promiseChainForValues.js';\nimport {getFetch} from './shared.js';\n\nexport {setFetch, getFetch} from './shared.js';\n\n/**\n * Takes a locale and returns a new locale to check.\n * @callback LocaleMatcher\n * @param {string} locale The failed locale\n * @throws {Error} If there are no further hyphens left to check\n * @returns {string|Promise<string>} The new locale to check\n*/\n\n/**\n * @type {LocaleMatcher}\n */\nexport const defaultLocaleMatcher = (locale) => {\n  if (!locale.includes('-')) {\n    throw new Error('Locale not available');\n  }\n  // Try without hyphen, i.e., the \"lookup\" algorithm:\n  // See https://tools.ietf.org/html/rfc4647#section-3.4 and\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl\n  return locale.replace(/-[^-]*$/u, '');\n};\n\n/**\n * @param {object} cfg\n * @param {string} cfg.locale\n * @param {string[]} cfg.locales\n * @param {LocaleMatcher} [cfg.localeMatcher=defaultLocaleMatcher]\n * @returns {string|false}\n */\nexport const getMatchingLocale = ({\n  locale, locales, localeMatcher = defaultLocaleMatcher\n}) => {\n  try {\n    while (!locales.includes(locale)) {\n      // Catch as `defaultLocaleMatcher` will throw if no hyphen found\n      locale = localeMatcher(locale);\n    }\n  } catch (err) {\n    return false;\n  }\n  return locale;\n};\n\n/**\n * @typedef {object} LocaleObjectInfo\n * @property {import('./getMessageForKeyByStyle.js').\n *   LocaleObject} strings The successfully retrieved locale strings\n * @property {string} locale The successfully resolved locale\n */\n\n/**\n * @typedef {{\n *   locales?: string[],\n *   defaultLocales?: string[],\n *   localesBasePath?: string,\n *   localeResolver?: import('./defaultLocaleResolver.js').LocaleResolver,\n *   localeMatcher?: \"lookup\"|LocaleMatcher\n * }} LocaleStringArgs\n */\n\n/**\n * `locales` - BCP-47 language strings. Defaults to `navigator.languages`.\n * `defaultLocales` - Defaults to [\"en-US\"].\n * `localesBasePath` - Defaults to `.`.\n * `localeResolver` - Defaults to `defaultLocaleResolver`.\n * @typedef {(\n *   cfg?: LocaleStringArgs\n * ) => Promise<LocaleObjectInfo>} LocaleStringFinder\n */\n\n/**\n *\n * @type {LocaleStringFinder}\n */\nexport const findLocaleStrings = ({\n  locales,\n  defaultLocales,\n  localeResolver,\n  localesBasePath,\n  localeMatcher\n} = {}) => {\n  return /** @type {Promise<LocaleObjectInfo>} */ (_findLocale({\n    locales, defaultLocales, localeResolver, localesBasePath, localeMatcher\n  }));\n};\n\n/**\n * Resolves to the successfully resolved locale.\n * `locales` - BCP-47 language strings. Defaults to `navigator.languages`.\n * `defaultLocales` - Defaults to [\"en-US\"].\n * `localesBasePath` - Defaults to `.`.\n * `localeResolver` - Defaults to `defaultLocaleResolver`.\n * `localeMatcher`.\n * @typedef {(cfg?: LocaleStringArgs) => Promise<string>} LocaleFinder\n */\n\n/**\n *\n * @type {LocaleFinder}\n */\nexport const findLocale = ({\n  locales,\n  defaultLocales,\n  localeResolver,\n  localesBasePath,\n  localeMatcher\n} = {}) => {\n  return /** @type {Promise<string>} */ (_findLocale({\n    locales, defaultLocales, localeResolver, localesBasePath, localeMatcher,\n    headOnly: true\n  }));\n};\n\n/**\n * @type {(\n *   cfg: LocaleStringArgs & {\n *     headOnly?: boolean\n *   }\n * ) => Promise<string|LocaleObjectInfo>} Also has a `headOnly` boolean\n *  property to determine whether to make a simple HEAD and resolve to\n *  the locale rather than locale and contents\n */\nconst _findLocale = async ({\n  locales = typeof intlDomLocale !== 'undefined'\n    ? [intlDomLocale]\n    : typeof navigator === 'undefined' ? [] : navigator.languages,\n  defaultLocales = ['en-US'],\n  localeResolver = defaultLocaleResolver,\n  localesBasePath = '.',\n  localeMatcher = 'lookup',\n  headOnly = false\n}) => {\n  /**\n   * @callback getLocale\n   * @throws {SyntaxError|TypeError|Error}\n   * @param {string} locale\n   * @returns {Promise<LocaleObjectInfo|string>}\n   */\n  async function getLocale (locale) {\n    if (typeof locale !== 'string') {\n      throw new TypeError('Non-string locale type');\n    }\n    const url = localeResolver(localesBasePath, locale);\n    if (typeof url !== 'string') {\n      throw new TypeError(\n        '`localeResolver` expected to resolve to (URL) string.'\n      );\n    }\n    try {\n      const _fetch = /** @type {import('./shared.js').Fetch} */ (getFetch());\n      const resp = await (headOnly\n        ? _fetch(url, {\n          method: 'HEAD'\n        })\n        : _fetch(url)\n      );\n\n      if (resp.status === 404) {\n        // Don't allow browser (tested in Firefox) to continue\n        //  and give `SyntaxError` with missing file or we won't be\n        //  able to try without the hyphen\n        throw new Error('Trying again');\n      }\n      if (headOnly) {\n        return locale;\n      }\n      const strings = await (resp.json());\n      return {\n        locale,\n        strings\n      };\n    } catch (err) {\n      if (/** @type {Error} */ (err).name === 'SyntaxError') {\n        throw err;\n      }\n      const newLocale = await /** @type {LocaleMatcher} */ (\n        localeMatcher\n      )(locale);\n      return getLocale(newLocale);\n    }\n  }\n  if (localeMatcher === 'lookup') {\n    localeMatcher = defaultLocaleMatcher;\n  } else if (typeof localeMatcher !== 'function') {\n    throw new TypeError('`localeMatcher` must be \"lookup\" or a function!');\n  }\n  return await promiseChainForValues(\n    [...locales, ...defaultLocales],\n    getLocale,\n    'No matching locale found for ' + [...locales, ...defaultLocales].join(', ')\n  );\n};\n","import {getMessageForKeyByStyle} from './getMessageForKeyByStyle.js';\nimport {findLocaleStrings} from './findLocaleStrings.js';\nimport {getDOMForLocaleString} from './getDOMForLocaleString.js';\nimport {\n  getStringFromMessageAndDefaults\n} from './getStringFromMessageAndDefaults.js';\nimport {sort, sortList, list} from './collation.js';\nimport {defaultKeyCheckerConverter} from './defaultKeyCheckerConverter.js';\n\n/**\n * @callback Sort\n * @param {string[]} arrayOfItems\n * @param {Intl.CollatorOptions|undefined} options\n * @returns {string[]}\n */\n/**\n * @callback SortList\n * @param {string[]} arrayOfItems\n * @param {(str: string, idx: number) => any} map\n * @param {Intl.ListFormatOptions|undefined} [listOptions]\n * @param {Intl.CollatorOptions|undefined} [collationOptions]\n * @returns {string|DocumentFragment}\n */\n/**\n * @callback List\n * @param {string[]} arrayOfItems\n * @param {Intl.ListFormatOptions|undefined} [options]\n * @returns {string}\n */\n\n/**\n * Checks a key (against an object of strings). Optionally\n *  accepts an object of substitutions which are used when finding text\n *  within curly brackets (pipe symbol not allowed in its keys); the\n *  substitutions may be DOM elements as well as strings and may be\n *  functions which return the same (being provided the text after the\n *  pipe within brackets as the single argument).) Optionally accepts a\n *  config object, with the optional key \"dom\" which if set to `true`\n *  optimizes when DOM elements are (known to be) present.\n * `key` - Key to check against object of strings.\n * `substitutions` - Defaults to `false`.\n * `cfg.dom` - Defaults to `false`.\n * @typedef {((\n *   key: string|string[],\n *   substitutions?: false|null|undefined|\n *     import('./defaultLocaleResolver.js').SubstitutionObject,\n *   cfg?: {\n *     allSubstitutions?: ?import('./defaultAllSubstitutions.js').\n *         AllSubstitutionCallback|\n *       import('./defaultAllSubstitutions.js').\n *         AllSubstitutionCallback[],\n *     defaults?: false|null|undefined|\n *       import('./getMessageForKeyByStyle.js').LocaleObject,\n *     dom?: boolean,\n *     forceNodeReturn?: boolean,\n *     throwOnMissingSuppliedFormatters?: boolean,\n *     throwOnExtraSuppliedFormatters?: boolean\n *   }\n * ) => string|DocumentFragment|Text) & {\n *   resolvedLocale: string,\n *   strings: import('./getMessageForKeyByStyle.js').LocaleObject,\n *   sort: Sort,\n *   sortList: SortList,\n *   list: List\n * }} I18NCallback\n */\n\n/**\n * @param {object} cfg\n * @param {import('./getMessageForKeyByStyle.js').LocaleObject} cfg.strings\n * @param {string} cfg.resolvedLocale\n * @param {\"richNested\"|\"rich\"|\"plain\"|\"plainNested\"|\n *   import('./getMessageForKeyByStyle.js').\n *     MessageStyleCallback} [cfg.messageStyle=\"richNested\"]\n * @param {?import('./defaultAllSubstitutions.js').AllSubstitutionCallback|\n *   import('./defaultAllSubstitutions.js').\n *     AllSubstitutionCallback[]} [cfg.allSubstitutions]\n * @param {import('./defaultInsertNodes.js').\n *   InsertNodesCallback} [cfg.insertNodes=defaultInsertNodes]\n * @param {import('./defaultKeyCheckerConverter.js').\n *   KeyCheckerConverterCallback} [cfg.keyCheckerConverter]\n * @param {false|null|undefined|\n *   import('./getMessageForKeyByStyle.js').LocaleObject} [cfg.defaults]\n * @param {false|import('./defaultLocaleResolver.js').\n *   SubstitutionObject} [cfg.substitutions={}]\n * @param {Integer} [cfg.maximumLocalNestingDepth=3]\n * @param {boolean} [cfg.dom=false]\n * @param {boolean} [cfg.forceNodeReturn=false]\n * @param {boolean} [cfg.throwOnMissingSuppliedFormatters=true]\n * @param {boolean} [cfg.throwOnExtraSuppliedFormatters=true]\n * @returns {I18NCallback} Rejects if no suitable locale is found.\n */\nexport const i18nServer = function i18nServer ({\n  strings,\n  resolvedLocale,\n  messageStyle = 'richNested',\n  allSubstitutions: defaultAllSubstitutionsValue,\n  insertNodes,\n  keyCheckerConverter = defaultKeyCheckerConverter,\n  defaults: defaultDefaults,\n  substitutions: defaultSubstitutions,\n  maximumLocalNestingDepth,\n  dom: domDefaults = false,\n  forceNodeReturn: forceNodeReturnDefault = false,\n  throwOnMissingSuppliedFormatters:\n    throwOnMissingSuppliedFormattersDefault = true,\n  throwOnExtraSuppliedFormatters:\n    throwOnExtraSuppliedFormattersDefault = true\n}) {\n  if (!strings || typeof strings !== 'object') {\n    throw new TypeError(`Locale strings must be an object!`);\n  }\n  const messageForKey = getMessageForKeyByStyle({messageStyle});\n\n  /**\n   * @type {I18NCallback}\n   */\n  const formatter = (key, substitutions, {\n    allSubstitutions = defaultAllSubstitutionsValue,\n    defaults = defaultDefaults,\n    dom = domDefaults,\n    forceNodeReturn = forceNodeReturnDefault,\n    throwOnMissingSuppliedFormatters = throwOnMissingSuppliedFormattersDefault,\n    throwOnExtraSuppliedFormatters = throwOnExtraSuppliedFormattersDefault\n  } = {}) => {\n    key = /** @type {string} */ (keyCheckerConverter(key, messageStyle));\n    const message = messageForKey(strings, key);\n    const string = getStringFromMessageAndDefaults({\n      message: message && typeof message.value === 'string'\n        ? message.value\n        : false,\n      defaults,\n      messageForKey,\n      key\n    });\n\n    return getDOMForLocaleString({\n      string,\n      locals: strings.head && strings.head.locals,\n      switches: strings.head && strings.head.switches,\n      locale: resolvedLocale,\n      maximumLocalNestingDepth,\n      allSubstitutions,\n      insertNodes,\n      substitutions: {...defaultSubstitutions, ...substitutions},\n      dom,\n      forceNodeReturn,\n      throwOnMissingSuppliedFormatters,\n      throwOnExtraSuppliedFormatters\n    });\n  };\n\n  formatter.resolvedLocale = resolvedLocale;\n  formatter.strings = strings;\n\n  /** @type {Sort} */\n  formatter.sort = (arrayOfItems, options) => {\n    return sort(resolvedLocale, arrayOfItems, options);\n  };\n\n  /** @type {SortList} */\n  formatter.sortList = (arrayOfItems, map, listOptions, collationOptions) => {\n    return sortList(\n      resolvedLocale, arrayOfItems, map, listOptions, collationOptions\n    );\n  };\n\n  /** @type {List} */\n  formatter.list = (arrayOfItems, options) => {\n    return list(\n      resolvedLocale, arrayOfItems, options\n    );\n  };\n\n  return formatter;\n};\n\n/**\n * @typedef {number} Integer\n */\n\n/**\n * @param {object} [cfg={}]\n * @param {string[]} [cfg.locales=navigator.languages] BCP-47 language strings\n * @param {string[]} [cfg.defaultLocales=[\"en-US\"]]\n * @param {import('./findLocaleStrings.js').\n *   LocaleStringFinder} [cfg.localeStringFinder=findLocaleStrings]\n * @param {string} [cfg.localesBasePath=\".\"]\n * @param {import('./defaultLocaleResolver.js').\n *   LocaleResolver} [cfg.localeResolver=defaultLocaleResolver]\n * @param {\"lookup\"|import('./findLocaleStrings.js').\n *   LocaleMatcher} [cfg.localeMatcher=\"lookup\"]\n * @param {\"richNested\"|\"rich\"|\"plain\"|\"plainNested\"|\n *   import('./getMessageForKeyByStyle.js').\n *     MessageStyleCallback} [cfg.messageStyle=\"richNested\"]\n * @param {?(import('./defaultAllSubstitutions.js').AllSubstitutionCallback|\n *   import('./defaultAllSubstitutions.js').\n *     AllSubstitutionCallback[])} [cfg.allSubstitutions]\n * @param {import('./defaultInsertNodes.js').\n *   InsertNodesCallback} [cfg.insertNodes=defaultInsertNodes]\n * @param {import('./defaultKeyCheckerConverter.js').\n *   KeyCheckerConverterCallback} [cfg.keyCheckerConverter]\n * @param {false|null|undefined|\n *   import('./getMessageForKeyByStyle.js').LocaleObject} [cfg.defaults]\n * @param {false|\n *   import('./defaultLocaleResolver.js').\n *     SubstitutionObject} [cfg.substitutions={}]\n * @param {Integer} [cfg.maximumLocalNestingDepth=3]\n * @param {boolean} [cfg.dom=false]\n * @param {boolean} [cfg.forceNodeReturn=false]\n * @param {boolean} [cfg.throwOnMissingSuppliedFormatters=true]\n * @param {boolean} [cfg.throwOnExtraSuppliedFormatters=true]\n * @returns {Promise<I18NCallback>} Rejects if no suitable locale is found.\n */\nexport const i18n = async function i18n ({\n  locales,\n  defaultLocales,\n  localeStringFinder = findLocaleStrings,\n  localesBasePath,\n  localeResolver,\n  localeMatcher,\n  messageStyle,\n  allSubstitutions,\n  insertNodes,\n  keyCheckerConverter,\n  defaults,\n  substitutions,\n  maximumLocalNestingDepth,\n  dom,\n  forceNodeReturn,\n  throwOnMissingSuppliedFormatters,\n  throwOnExtraSuppliedFormatters\n} = {}) {\n  const {strings, locale: resolvedLocale} = await localeStringFinder({\n    locales, defaultLocales, localeResolver, localesBasePath, localeMatcher\n  });\n  if (!defaults && defaultLocales) {\n    let defaultLocale;\n    ({strings: defaults, locale: defaultLocale} = await localeStringFinder({\n      locales: defaultLocales,\n      defaultLocales: [],\n      localeResolver, localesBasePath, localeMatcher\n    }));\n    if (defaultLocale === resolvedLocale) {\n      defaults = null; // No need to fall back\n    }\n  }\n\n  return i18nServer({\n    strings,\n    resolvedLocale,\n    messageStyle,\n    allSubstitutions,\n    insertNodes,\n    keyCheckerConverter,\n    defaults,\n    substitutions,\n    maximumLocalNestingDepth,\n    dom,\n    forceNodeReturn,\n    throwOnMissingSuppliedFormatters,\n    throwOnExtraSuppliedFormatters\n  });\n};\n"],"names":["_jsonExtra","globalThis","jsonExtra","setJSONExtra","__jsonExtra","unescapeBackslashes","str","replace","esc","slice","length","parseJSONExtra","args","parse","processRegex","regex","_ref","match","onMatch","extra","betweenMatches","afterMatch","escapeAtOne","previousIndex","Error","exec","_match2","_slicedToArray","_","lastIndex","startMatchPos","apply","_toConsumableArray","_fetch","fetch","setFetch","f","getFetch","_doc","document","setDocument","doc","getDocument","sort","locale","arrayOfItems","options","Intl","Collator","compare","list","ListFormat","format","sortList","map","listOptions","collationOptions","sortListSimple","d","randomId","Date","now","performance","c","r","Math","trunc","random","floor","toString","placeholderArray","i","concat","nodes","push","arg","RegExp","idx","Number","container","createDocumentFragment","append","getFormatterInfo","object","Array","isArray","_object","value","callback","extraOpts","_object2","defaultAllSubstitutions","_ref2","key","opts","_typeof","applyArgs","_ref3","type","_ref3$options","_ref3$checkArgOptions","checkArgOptions","_arg$split2","split","userType","extraArgs","argOptions","_objectSpread","expectsDatetime","singleKey","Object","keys","includes","obj","_getFormatterInfo","dtf","DateTimeFormat","formatRange","val","DisplayNames","toUpperCase","of","_ref4","RelativeTimeFormat","test","getTime","_Intl$DateTimeFormat","NumberFormat","TypeError","Formatter","_createClass","_classCallCheck","getSubstitution","body","_ref$messageStyle","messageStyle","substitution","getMessageForKeyByStyle","messageForKey","LocalFormatter","_Formatter","_inherits","_super","_createSuper","locals","_this","call","this","components","parent","constructor","isMatchingKey","every","cmpt","result","startsWith","RegularFormatter","_Formatter2","_super2","substitutions","_this2","SwitchFormatter","_Formatter3","_super3","switches","_this3","usedKeys","missingSuppliedFormatters","ky","getKey","_this$getMatch2","getMatch","objKey","keySegment","_objKey$split2","formatter","getNumberFormat","defaultOptions","numberOpts","getPluralFormat","pluralOpts","PluralRules","select","formatterValue","toLowerCase","preventNesting","s","err","error","k","find","switchKey","Boolean","_this4","ks","reduce","ret","entries","_settle","pact","state","_Pact","o","bind","v","then","observer","prototype","onFulfilled","onRejected","e","_isSettledPact","thenable","promiseChainForValues","values","errBack","errorMessage","arguments","undefined","breaking","_interrupt","p","Promise","reject","update","stage","shouldContinue","updateValue","_resumeAfterTest","_resumeAfterBody","_resumeAfterUpdate","_for","shift","recover","_catch","direct","resolve","_await","_p","_result2","defaultLocaleResolver","localesBasePath","defaultInsertNodes","string","dom","allSubstitutions","_ref$maximumLocalNest","maximumLocalNestingDepth","checkExtraSuppliedFormatters","addFunctionKeys","forEach","localFormatter","regularFormatter","switchFormatter","formattingRegex","substs","subst","allSubst","recursiveLocalCount","checkLocalVars","_ref5","processSubsts","localFormatters","extraSubsts","returnsDOM","_ref6","_ref6$substs","_ref6$formatter","pipe","processSubstitutions","_ref7","_ref7$substs","_ref7$formatter","cloneNode","node","defaultKeyCheckerConverter","endsWith","_wrapRegExp","backslashes","join","mainObj","mergeWithPreviousOrStart","keysUnescaped","currObj","some","kys","message","info","getStringFromMessageAndDefaults","defaults","_ref$messageForKey","msg","getDOMForLocaleString","_ref$allSubstitutions","_ref$insertNodes","insertNodes","_ref$substitutions","_ref$dom","_ref$forceNodeReturn","forceNodeReturn","_ref$throwOnMissingSu","throwOnMissingSuppliedFormatters","_ref$throwOnExtraSupp","throwOnExtraSuppliedFormatters","stringOrTextNode","createTextNode","matching","isMatch","_async","defaultLocaleMatcher","getMatchingLocale","locales","_ref$localeMatcher","localeMatcher","findLocaleStrings","defaultLocales","localeResolver","_findLocale","findLocale","headOnly","getLocale","url","method","resp","status","json","strings","name","_ref4$locales","intlDomLocale","navigator","languages","_ref4$defaultLocales","_ref4$localeResolver","_ref4$localesBasePath","_ref4$localeMatcher","_ref4$headOnly","i18nServer","resolvedLocale","defaultAllSubstitutionsValue","_ref$keyCheckerConver","keyCheckerConverter","defaultDefaults","defaultSubstitutions","domDefaults","forceNodeReturnDefault","throwOnMissingSuppliedFormattersDefault","throwOnExtraSuppliedFormattersDefault","_ref2$allSubstitution","_ref2$defaults","_ref2$dom","_ref2$forceNodeReturn","_ref2$throwOnMissingS","_ref2$throwOnExtraSup","head","i18n","_ref3$localeStringFin","localeStringFinder","_localeStringFinder"],"mappings":"wsKASA,IAAIA,EAAaC,WAAWC,UAKfC,EAAe,SAACC,GAC3BJ,EAAaI,CACf,EAMaC,EAAsB,SAACC,GAClC,OAAOA,EAAIC,QAAQ,QAAS,SAACC,GAC3B,OAAOA,EAAIC,MAAM,EAAGD,EAAIE,OAAS,EACnC,GACF,EAUaC,EAAiB,SAACC,GAC7B,OAAOZ,EAAWa,MAGhB,KAAOD,GAAQ,IAAIL,QAAQ,MAAQ,IAAIA,QAAQ,MAAQ,IAAM,IAEjE,EAiCaO,EAAe,SAACC,EAAOT,EAAGU,GAMjC,IACAC,EANJC,EAAOF,EAAPE,QACAC,EAAKH,EAALG,MACAC,EAAcJ,EAAdI,eACAC,EAAUL,EAAVK,WACAC,EAAWN,EAAXM,YAGIC,EAAgB,EAMpB,GALIJ,IACFC,EAAiBD,EACjBE,EAAaF,EACbG,EAAcH,IAEXC,IAAmBC,EACtB,MAAM,IAAIG,MACR,yEAGJ,KAAqC,QAA7BP,EAAQF,EAAMU,KAAKnB,KAAgB,CACzC,IAAsBoB,EAAAC,EAALV,EAAK,GAAfW,EAACF,EAAA,GAAElB,EAAGkB,EAAA,GACNG,EAAad,EAAbc,UAEDC,EAAgBD,EAAYD,EAAElB,OAChCoB,EAAgBP,GAClBH,EAAed,EAAIG,MAAMc,EAAeO,IAGtCR,GAAed,EAAIE,OAAS,GAC9Ba,EAAgBM,EAChBP,EAAYM,KAGdV,EAAOa,WAAA,EAAAC,EAAIf,IACXM,EAAgBM,EAClB,CACIN,IAAkBjB,EAAII,QACxBW,EAAWf,EAAIG,MAAMc,GAEzB,ECxGIU,EAA0B,oBAAVC,MAChBA,MAEA,KAMSC,EAAW,SAACC,GACvBH,EAASG,CACX,EAKaC,EAAW,WACtB,OAAOJ,CACT,EAGIK,EAA2B,oBAAbC,SAEdA,SACA,KAMSC,EAAc,SAACC,GAC1BH,EAAOG,CACT,EAKaC,EAAc,WACzB,OAAOJ,CACT,EChBO,IAAMK,EAAO,SAACC,EAAQC,EAAcC,GACzC,OAAOD,EAAaF,KAAK,IAAII,KAAKC,SAChCJ,EACAE,GACAG,QACJ,EASaC,EAAO,SAACN,EAAQC,EAAcC,GACzC,OAAO,IAAIC,KAAKI,WACdP,EAAQE,GACRM,OAAOP,EACX,EA+BaQ,EAAW,SACtBT,EAAQC,EAAcS,EAAKC,EAAaC,GAExC,GAAmB,mBAARF,EACT,OAzB0B,SAC5BV,EAAQC,EAAcU,EAAaC,GAGnC,OADAb,EAAKC,EAAQC,EAAcW,GACpBN,EAAKN,EAAQC,EAAcU,EACpC,CAoBWE,CACLb,EAAiCC,EAAeS,EAAKC,GAGzDZ,EAAKC,EAAQC,EAAcW,GAE3B,IAlFIE,EAkFEC,GAlFFD,EAAIE,KAAKC,MAEc,oBAAhBC,aACoB,mBAApBA,YAAYD,MAErBH,GAAKI,YAAYD,OAEZ,uCAAuCtD,QAAQ,SAAU,SAAUwD,GAExE,IAAMC,EAAIC,KAAKC,OAAOR,EAAoB,GAAhBO,KAAKE,UAAiB,IAEhD,OADAT,EAAIO,KAAKG,MAAMV,EAAI,KACL,MAANK,EAAYC,EAAS,EAAJA,EAAU,GAAMK,SAAS,GAEpD,KAuEMC,EAAmBtC,EAAIa,GAAcS,KACzC,SAAC1B,EAAG2C,GAAC,MAAA,KAAAC,OAAUb,GAAQa,OAAGD,EAAC,KAAA,IAIvBE,EAAQ,GAMRC,EAAO,SAACC,GACZF,EAAMC,KAAKC,IAGb7D,EAEE,IAAI8D,OAAMJ,KAAAA,OAAMb,aAAmB,MACnCT,EAAKN,EAAQ0B,EAAkBf,GAC/B,CACEnC,eAAgBsD,EAChBrD,WAAYqD,EACZxD,QAAOA,SAAEU,EAAGiD,GACVH,EAAKpB,EAAIT,EAAaiC,OAAOD,IAAOC,OAAOD,IAC7C,IAGJ,IACME,EADgCrC,IACfsC,yBAEvB,OADAD,EAAUE,OAAMlD,MAAhBgD,EAAoBN,GACbM,CACT,ECvGaG,EAAmB,SAAHlE,GAAiB,IAAZmE,EAAMnE,EAANmE,OAChC,GAAIC,MAAMC,QAAQF,GAAS,CACzB,GAAyB,mBAAdA,EAAO,GAAmB,CACnC,IAAAG,EAAA3D,EAOOwD,EAAM,GACb,MAAO,CAACI,MAPDD,EAAA,GAOQE,SAPEF,EAAA,GAOQxC,QAPCwC,EAAA,GAOQG,UAPGH,EAAA,GAQvC,CACA,IAAAI,EAAA/D,EAAoCwD,EAAM,GAC1C,MAAO,CAACI,MADIG,EAAA,GACG5C,QADM4C,EAAA,GACGD,UADQC,EAAA,GAElC,CACA,MAAO,CAACH,MAAOJ,EACjB,EAoBaQ,EAA0B,SAAHC,GAAkC,IAA7BL,EAAKK,EAALL,MAAOZ,EAAGiB,EAAHjB,IAAQiB,EAAHC,QAU/CC,EAVoDlD,EAAMgD,EAANhD,OAExD,GACmB,iBAAV2C,GAAuBA,GAA0B,WAAjBQ,EAAOR,IAC9C,aAAcA,EAEd,OAAOA,EAcT,IAAMS,EAAY,SAAHC,GAMT,IALJC,EAAID,EAAJC,KAAIC,EAAAF,EACJnD,QAAAA,OAAU,IAAHqD,EACLL,EAAIK,EAAAC,EAAAH,EAENI,gBAAAA,OAAkB,IAAHD,GAAQA,EAEvB,GAAmB,iBAARzB,EAAkB,CAC3B,IAAsD2B,EAAA3E,EAAdgD,EAAI4B,MAAM,KAAI,GAAjDC,EAAQF,EAAA,GAAEG,EAASH,EAAA,GAAEI,EAAUJ,EAAA,GAEnB,SAAbE,IACFA,EAAW,YAETA,IAAaN,IACVO,EAEOJ,IAAmBK,IAE7B5D,EAAO6D,EAAAA,EAAA,CAAA,EACF7D,GACAnC,EACD0F,GAAmBK,EAAaA,EAAaD,KANjD3D,EAAU,CAAA,EAWhB,CACA,OAAOA,GAGL8D,GAAkB,EACtB,GAAIrB,GAA0B,WAAjBQ,EAAOR,KAAuBH,MAAMC,QAAQE,GAAQ,CAC/D,IAAMsB,EAAYC,OAAOC,KAAKxB,GAAO,GACrC,GAAI,CACF,SAAU,OAAQ,WAAY,YAAa,gBAAiB,WAC5D,SAAU,WAAY,SAAU,WAChC,OAAQ,UACRyB,SAASH,GAAY,CACrB,IAAIpB,EAAWD,EAKTyB,EAEH1B,EAMEsB,GAEHK,EAIEhC,EAAiB,CACnBC,OAQG8B,IAGL,OAbE1B,EAAK2B,EAAL3B,MAAgBO,EAAIoB,EAAbpE,QAAe2C,EAASyB,EAATzB,UAAWD,EAAQ0B,EAAR1B,SAa3BqB,GACR,IAAK,OAAQ,IAAK,WAChBD,GAAkB,EAClB,MACF,IAAK,YAAa,IAAK,gBACrB,IAAMO,EAAM,IAAIpE,KAAKqE,eACnBxE,EACAoD,EAAU,CAACE,KAAM,YAAapD,QAAS2C,KAGzC,OAAO0B,EAAIE,YAAWtF,MAAfoF,EAAGnF,EAGL,CAEEuD,EAEAO,GACDxC,KAAI,SAACgE,GACL,MAAsB,iBAARA,EAAmB,IAAI1D,KAAK0D,GAAOA,CAClD,MAGL,IAAK,SAAU,IAAK,WAAY,IAAK,SAAU,IAAK,WACpD,OAA8B,IAAIvE,KAAKwE,aACrC3E,EAAM+D,EAAAA,EAAA,CAAA,EAEDX,EAAU,CAACE,KAAMW,EAAUW,iBAAe,CAAA,EAAA,CAC7CtB,KAAMW,KAERY,GAA0BlC,GAC9B,IAAK,WAEH,IAAAmC,EAEE,CAAC5B,EAAML,GAET,OAHCA,EAASiC,EAAA,GAAE5B,EAAI4B,EAAA,GAGT,IAAI3E,KAAK4E,mBACd/E,EAAQoD,EAAU,CAACE,KAAM,cACzB9C,OAA8BmC,EAAQE,GAG1C,IAAK,OACH,OAAID,EACKnC,EACkBT,EAEtB2C,EACDC,EACAQ,EAAU,CAACE,KAAM,SACjBF,EAAU,CACRE,KAAM,OAAQpD,QAAS2C,EAAWY,iBAAiB,KAIlDhD,EACkBT,EAEtB2C,EACDS,EAAU,CAACE,KAAM,SACjBF,EAAU,CACRE,KAAM,OAAQpD,QAAS2C,EAAWY,iBAAiB,KAS3D,CACF,CAGA,GACEd,IAGmB,iBAAVA,IACNqB,GAAoB,wBAA0BgB,KACtBjD,MAGzBY,EAAQ,IAAI3B,KAAK2B,IAEE,WAAjBQ,EAAOR,IAAsB,YAAaA,GACjB,mBAAlBA,EAAMsC,SACf,OAAO,IAAI9E,KAAKqE,eACdxE,EACAoD,EAAU,CAACE,KAAM,cACjB9C,OAAOmC,GAKb,GAAIH,MAAMC,QAAQE,GAAQ,CAAA,IAAAuC,EAClBrC,EACJF,EAAM,GAER,OAAOuC,EAAA,IAAI/E,KAAKqE,eACdxE,EACAoD,EAAU,CAACE,KAAM,YAAapD,QAAS2C,MACvC4B,YAAWtF,MAAA+F,EAAA9F,EAEVuD,EAAM9E,MAAM,EAAG,GAAG6C,KAAI,SAACgE,GACtB,MAAsB,iBAARA,EAAmB,IAAI1D,KAAK0D,GAAOA,CAClD,KAEL,CAGA,GAAqB,iBAAV/B,EACT,OAAO,IAAIxC,KAAKgF,aACdnF,EACAoD,EAAU,CAACE,KAAM,YACjB9C,OAAOmC,GAIX,MAAM,IAAIyC,UAAU,oBACtB,ECrQaC,EAASC,GAAA,SAAAD,IAAAE,OAAAF,EAAA,IAahBG,EAAkB,SAAHpH,GAAuD,IAAlD6E,EAAG7E,EAAH6E,IAAKwC,EAAIrH,EAAJqH,KAAMnC,EAAIlF,EAAJkF,KAAIoC,EAAAtH,EAAEuH,aAEnCC,EADgBC,EAAwB,CAACF,kBADS,IAAHD,EAAG,aAAYA,GAE/CI,CAAc,CAACL,KAAAA,GAAOxC,GAC3C,IAAK2C,EACH,MAAM,IAAIhH,MAAK,2BAAAgD,OAA4B0B,EAAI1B,WAAAA,OAAUqB,EAAO,MAIlE,OAAO2C,EAAajD,KACtB,EAKaoD,WAAcC,GAAAC,EAAAF,EAASV,GAAT,IAAAa,EAAAC,EAAAJ,GAIzB,SAAAA,EAAaK,GAAQ,IAAAC,EAEE,OAFFd,OAAAQ,IACnBM,EAAAH,EAAAI,KAAAC,OACKH,OAASA,EAAOC,CACvB,CAgDC,OA/CDf,EAAAS,EAAA,CAAA,CAAA9C,IAAA,kBAAAN,MAIA,SAAiBM,GACf,OAAOuC,EAAgB,CACrBvC,IAAKA,EAAIpF,MAAM,GAAI4H,KAAMc,KAAKH,OAAQ9C,KAAM,SAEhD,GACA,CAAAL,IAAA,UAAAN,MAIA,SAASM,GACP,IAAMuD,EAAavD,EAAIpF,MAAM,GAAG8F,MAAM,KAElC8C,EAASF,KAAKH,OAClB,OACEG,KAAKG,YACLC,cAAc1D,IAAQuD,EAAWI,OAAM,SAACC,GACxC,IAAMC,EAASD,KAAQJ,EAkBvB,OAjBAA,EAeSA,EAAQI,GAEVC,IAEX,IACA,CAAA,CAAA7D,IAAA,gBAAAN,MAIA,SAAsBM,GACpB,OAAOA,EAAI8D,WAAW,IACxB,KAAChB,CAAA,IAMUiB,WAAgBC,GAAAhB,EAAAe,EAAS3B,GAAT,IAAA6B,EAAAf,EAAAa,GAK3B,SAAAA,EAAaG,GAAe,IAAAC,EAES,OAFT7B,OAAAyB,IAC1BI,EAAAF,EAAAZ,KAAAC,OACKY,cAAgBA,EAAcC,CACrC,CAgBC,OAfD9B,EAAA0B,EAAA,CAAA,CAAA/D,IAAA,UAAAN,MAIA,SAASM,GACP,OACEsD,KAAKG,YACLC,cAAc1D,IAAQA,KAAOsD,KAAKY,aACtC,IACA,CAAA,CAAAlE,IAAA,gBAAAN,MAIA,SAAsBM,GACpB,MAAQ,gBAAQ+B,KAAK/B,EACvB,KAAC+D,CAAA,IAMUK,WAAeC,GAAArB,EAAAoB,EAAShC,GAAT,IAAAkC,EAAApB,EAAAkB,GAO1B,SAAAA,EAAaG,EAAQxE,GAAmB,IAAAyE,EAAhBN,EAAanE,EAAbmE,cAGa,OAHA5B,OAAA8B,IACnCI,EAAAF,EAAAjB,KAAAC,OACKiB,SAAWA,EAChBC,EAAKN,cAAgBA,EAAcM,CACrC,CAwPC,OAtPDnC,EAAA+B,EAAA,CAAA,CAAApE,IAAA,kBAAAN,MAUA,SAAiBM,EAAGI,GAAsD,IAUpEC,EAEAJ,EAZiBlD,EAAMqD,EAANrD,OAAQ0H,EAAQrE,EAARqE,SAAU3F,EAAGsB,EAAHtB,IAAK4F,EAAyBtE,EAAzBsE,0BACtCC,EACJrB,KAAKG,YACLmB,OAAO5E,GAAKpF,MAAM,GAIgCiK,EAAA/I,EAAjBwH,KAAKwB,SAASH,GAAG,GAA7CI,EAAMF,EAAA,GAAErC,EAAIqC,EAAA,GAAEG,EAAUH,EAAA,GAM/B,GALAJ,EAAS5F,KAAKmG,GAKVD,GAAUA,EAAO5D,SAAS,KAAM,CAAA,IACA8D,EAAAnJ,EAAjBiJ,EAAOrE,MAAM,KAAI,GAA/BL,EAAI4E,EAAA,GAAEhF,EAAIgF,EAAA,EACf,CACA,IAAKzC,EAKH,OAJAkC,EAA0B,CACxB1E,IAAAA,EACAkF,UAAW5B,OAEN,MAAQtD,EAAM,IAcvB,IAAMmF,EAAkB,SAACzF,EAAO0F,GAC9B,IAAMC,EAAavK,EAAemF,GAClC,OAAO,IAAI/C,KAAKgF,aAAanF,EAAM+D,EAAAA,EAC9BsE,GAAAA,GAAmBC,IACrB9H,OAAOmC,IAQN4F,EAAkB,SAAC5F,EAAO0F,GAC9B,IAAMG,EAAazK,EAAemF,GAClC,OAAO,IAAI/C,KAAKsI,YAAYzI,EAAM+D,EAAAA,EAC7BsE,GAAAA,GAAmBG,IACrBE,OAAO/F,IAENgG,EAAiBpC,KAAKY,cACHc,GAGrB5J,EAAQsK,EACZ,GAA8B,iBAAnBA,EACT,OAAQrF,GACR,IAAK,SACHjF,EAAQ+J,EAAgBO,GACxB,MACF,IAAK,SACHtK,EAAQkK,EAAgBI,GACxB,MACF,QACEtK,EAAQ,IAAI8B,KAAKsI,YAAYzI,GAAQ0I,OAAOC,QAGzC,GAAIA,GAA4C,WAA1BxF,EAAOwF,GAA6B,CAC/D,IAAM1E,EAAYC,OAAOC,KAAKwE,GAAgB,GAC9C,GAAI,CAAC,SAAU,UAAUvE,SAASH,GAAY,CAC5C,IAAAK,EAAyBhC,EAAiB,CACxCC,OAMCoG,EACmC1E,KAR/BtB,EAAK2B,EAAL3B,MAAOzC,EAAOoE,EAAPpE,QAed,GAJKoD,IACHA,EAAOW,EAAUW,iBAECX,EAAUW,gBAAkBtB,GAE9C,MAAM,IAAI8B,UAASxD,mBAAAA,OAEf0B,EAAKsF,cAAa,sBAAAhH,OACCqC,EACtB,OAGH,OAAQX,GACR,IAAK,SACHjF,EAAQ+J,EACiBzF,EAEtBzC,GAEH,MACF,IAAK,SACH7B,EAAQkK,EACiB5F,EAEtBzC,GAIP,CACF,CAIA,IAAMyF,EAAe,aAMfkD,EAAiB,SAACC,GACtB,OAAOA,EAAEnL,QAAQ,MAAQ,QAAQA,QAAQ,MAAQ,QAGnD,IACE,OAAO6H,EAAgB,CACrBG,aAAAA,EACA1C,IAAK5E,EAAQwK,EAAsCxK,GAAU0D,EAC7D0D,KAAAA,EACAnC,KAAM,UAET,CAAC,MAAOyF,GACP,IACE,OAAOvD,EAAgB,CACrBG,aAAAA,EACA1C,IAAK,IACH4F,EAAsCxK,GACxCoH,KAAAA,EACAnC,KAAM,UAET,CAAC,MAAO0F,GACP,IAAMC,EAAI/E,OAAOC,KAAKsB,GAAMyD,MAC1B,SAACC,GAAS,OAAKA,EAAUpC,WAAW,QAEtC,IAAKkC,EACH,MAAM,IAAIrK,MAAK,gCAAAgD,OAAiCgG,IAElD,OAAOpC,EAAgB,CACrBG,aAAAA,EAAc1C,IAAK4F,EAAeI,GAAIxD,KAAAA,EAAMnC,KAAM,UAEtD,CACF,CACF,GAEA,CAAAL,IAAA,UAAAN,MAIA,SAASM,GACP,OAAOmG,QACLnG,GACEsD,KAAKG,YACLC,cAAc1D,IACdsD,KAAKwB,SAAS9E,EAAIpF,MAAM,IAAIC,OAElC,GAcA,CAAAmF,IAAA,WAAAN,MAIA,SAAUiF,GAAI,IAAAyB,EAAA9C,KACN+C,EAAK1B,EAAGjE,MAAM,KAgCpB,OA/B4C2F,EAAGC,QAY7C,SAAClF,EAAK4E,EAAGtH,GACP,GAAIA,EAAI2H,EAAGxL,OAAS,EAAG,CACrB,KAAMmL,KAAK5E,GACT,MAAM,IAAIzF,MAAK,eAAAgD,OAAgBqH,EAACrH,wBAAAA,OAAuBgG,EAAO,OAEhE,OAAOvD,EAAI4E,EACb,CAGA,IAAMO,EAAMtF,OAAOuF,QAAQpF,GAAK6E,MAAK,SAAApE,GAAiB,IAAfqE,EAAepK,EAAA+F,EAAA,GAAN,GAC9C,OAAOmE,IACLI,EAAK3C,YACLmB,OAAOsB,EACX,IAEA,OAAOK,EAAG5H,GAAAA,OAAAxC,EAAOoK,GAAG,CAAEP,IAAK,EAC7B,GAAG1C,KAAKiB,SAIZ,IAEA,CAAA,CAAAvE,IAAA,gBAAAN,MAIA,SAAsBM,GACpB,OAAOA,EAAI8D,WAAW,IACxB,GACA,CAAA9D,IAAA,SAAAN,MAIA,SAAeM,GACb,IAAM5E,EAAQ4E,EAAI5E,MAAM,+IACxB,OAA8BA,GAASA,EAAM,EAC/C,KAACgJ,CAAA,ICzVI,SAAAqC,EAAiBC,EAAMC,EAAOjH,GACpC,IAAKgH,EAAKb,EAAG,CACZ,GAAInG,aAAKkH,EAAmB,CAC3B,IAAIlH,EAAMmG,EAOT,YADAnG,EAAMmH,EAAIJ,EAAQK,KAAK,KAAMJ,EAAMC,IALvB,EAARA,IACHA,EAAQjH,EAAMmG,GAEfnG,EAAQA,EAAMqH,CAKhB,CACA,GAAIrH,GAASA,EAAMsH,KAElB,YADAtH,EAAMsH,KAAKP,EAAQK,KAAK,KAAMJ,EAAMC,GAAQF,EAAQK,KAAK,KAAMJ,EAAM,IAGtEA,EAAKb,EAAIc,EACTD,EAAKK,EAAIrH,EACT,IAAMuH,EAAWP,EAAKG,EAClBI,GACHA,EAASP,EAEX,CACD,CA9DO,IAAME,EAAsB,WAClC,SAAAA,IAAkB,CAiClB,OAhCAA,EAAMM,UAAUF,KAAO,SAASG,EAAaC,GAC5C,IAAMvD,EAAS,IAAA+C,EACTD,EAAQrD,KAAKuC,EACnB,GAAIc,EAAO,CACV,IAAMhH,EAAmB,EAARgH,EAAYQ,EAAcC,EAC3C,GAAIzH,EAAU,CACb,IACC8G,EAAQ5C,EAAQ,EAAGlE,EAAS2D,KAAKyD,GACjC,CAAC,MAAOM,GACRZ,EAAQ5C,EAAQ,EAAGwD,EACpB,CACA,OAAOxD,CACR,CACC,OAAOP,IAET,CAeA,OAdAA,KAAKuD,EAAI,SAASzD,GACjB,IACC,IAAM1D,EAAQ0D,EAAM2D,EACN,EAAV3D,EAAMyC,EACTY,EAAQ5C,EAAQ,EAAGsD,EAAcA,EAAYzH,GAASA,GAC5C0H,EACVX,EAAQ5C,EAAQ,EAAGuD,EAAW1H,IAE9B+G,EAAQ5C,EAAQ,EAAGnE,EAEpB,CAAC,MAAO2H,GACRZ,EAAQ5C,EAAQ,EAAGwD,EACpB,GAEMxD,GAER+C,CACD,CAnCmC,GAgE5B,SAAAU,EAAwBC,GAC9B,OAAOA,aAAQX,GAAkC,EAAbW,EAAS1B,CAC9C,CAnCO,IAAM2B,EAAwB,SACnCC,EAAQC,GACL,IAoCkBnL,EArCJoL,EAAYC,UAAA/M,OAAA,QAAAgN,IAAAD,UAAA,GAAAA,UAAA,GAAG,+BAEhC,IAAKrI,MAAMC,QAAQiI,GACjB,MAAM,IAAItF,UACR,sEAGJ,GAAuB,mBAAZuF,EACT,MAAM,IAAIvF,UACR,yEAGJ,OAyBqB5F,EAzBD,WAAA,IACdgK,EAIAuB,EAoDkBpI,EAAOsH,EAzDXe,GAAA,EAEdC,EAAIC,QAAQC,OACd,IAAIvM,MAAM,uDAEC,OAoDS+D,EAyJnB,SAAcqC,EAAMoG,EAAQ3F,GAElC,IADA,IAAI4F,IACK,CACR,IAAIC,EAAiBtG,IAIrB,GAHIuF,EAAee,KAClBA,EAAiBA,EAAetB,IAE5BsB,EACJ,OAAOxE,EAER,GAAIwE,EAAerB,KAAM,CACxBoB,EAAQ,EACR,KACD,CACA,IAAIvE,EAASrB,IACb,GAAIqB,GAAUA,EAAOmD,KAAM,CAC1B,IAAIM,EAAezD,GAEZ,CACNuE,EAAQ,EACR,KACD,CAJCvE,EAASA,EAAOgC,CAKlB,CACA,GAAIsC,EAAQ,CACX,IAAIG,EAAcH,IAClB,GAAIG,GAAeA,EAAYtB,OAASM,EAAegB,GAAc,CACpEF,EAAQ,EACR,KACD,CACD,CACD,CACA,IAAI1B,EAAO,IAAAE,EACPsB,EAASzB,EAAQK,KAAK,KAAMJ,EAAM,GAEtC,OADW,IAAV0B,EAAcC,EAAerB,KAAKuB,GAA8B,IAAVH,EAAcvE,EAAOmD,KAAKwB,GAAoBF,EAAYtB,KAAKyB,IAAqBzB,UAAK,EAAQkB,GACjJxB,EACP,SAAS8B,EAAiB9I,GACzBmE,EAASnE,EACT,EAAG,CACF,GAAIyI,IACHG,EAAcH,MACKG,EAAYtB,OAASM,EAAegB,GAEtD,YADAA,EAAYtB,KAAKyB,GAAoBzB,UAAK,EAAQkB,GAKpD,KADAG,EAAiBtG,MACOuF,EAAee,KAAoBA,EAAetB,EAEzE,YADAN,EAAQC,EAAM,EAAG7C,GAGlB,GAAIwE,EAAerB,KAElB,YADAqB,EAAerB,KAAKuB,GAAkBvB,UAAK,EAAQkB,GAIhDZ,EADJzD,EAASrB,OAERqB,EAASA,EAAOkD,EAEjB,QAASlD,IAAWA,EAAOmD,MAC5BnD,EAAOmD,KAAKwB,GAAkBxB,UAAK,EAAQkB,EAC5C,CACA,SAASK,EAAiBF,GACrBA,GACHxE,EAASrB,MACKqB,EAAOmD,KACpBnD,EAAOmD,KAAKwB,GAAkBxB,UAAK,EAAQkB,GAE3CM,EAAiB3E,GAGlB4C,EAAQC,EAAM,EAAG7C,EAEnB,CACA,SAAS4E,KACJJ,EAAiBtG,KAChBsG,EAAerB,KAClBqB,EAAerB,KAAKuB,GAAkBvB,UAAK,EAAQkB,GAEnDK,EAAiBF,GAGlB5B,EAAQC,EAAM,EAAG7C,EAEnB,CACD,CAjSiB6E,EAAA,WAAA,OAAAX,SACA,GAAA,WACX,IAAMrI,EAAQ+H,EAAOkB,QAAQ,OA8f5B,SAAgBnG,EAAMoG,GAC5B,IACC,IAAI/E,EAASrB,GACb,CAAC,MAAM6E,GACP,OAAOuB,EAAQvB,EAChB,CACA,OAAIxD,GAAUA,EAAOmD,KACbnD,EAAOmD,UAAK,EAAQ4B,GAErB/E,CACR,CAxgBmCgF,EACzB,WACF,OA8BD,SAAgBnJ,EAAOsH,EAAM8B,GACnC,OAAIA,EACI9B,EAAOA,EAAKtH,GAASA,GAExBA,GAAUA,EAAMsH,OACpBtH,EAAQuI,QAAQc,QAAQrJ,IAElBsH,EAAOtH,EAAMsH,KAAKA,GAAQtH,EAClC,CAtCQsJ,CACYhB,GAAC,SAAAiB,GAAb1C,EAAG0C,EAAWlB,GAAA,CAAA,GAEhB,IAAc,WACZ,GAAID,EACF,MAAM,IAAInM,MAAMgM,GAGbF,EAAO5M,SACViN,GAAW,GAGbE,EAAIN,EAAQhI,KAEhB,IAkC6BsH,WAlC5BkC,GAAA,OACM3C,CAAG,EAkCN7G,GAASA,EAAMsH,KAAOtH,EAAMsH,KAAKA,GAAQA,EAAKtH,EAjCnD,EACK,WACN,IAAK,IAAI3E,EAAO,GAAI2D,EAAI,EAAGA,EAAIkJ,UAAU/M,OAAQ6D,IAChD3D,EAAK2D,GAAKkJ,UAAUlJ,GAErB,IACC,OAAOuJ,QAAQc,QAAQxM,EAAEL,MAAMoH,KAAMvI,GACrC,CAAC,MAAMsM,GACP,OAAOY,QAAQC,OAAOb,EACvB,KARF,ECiIa8B,EAAwB,SAACC,EAAiBrM,GACrD,GAA+B,iBAApBqM,EACT,MAAM,IAAIjH,UACR,+DAGJ,GAAsB,iBAAXpF,EACT,MAAM,IAAIoF,UACR,sDAGJ,GAAK,WAAWJ,KAAKhF,GACnB,MAAM,IAAIoF,UACR,iEAGJ,MAAA,GAAAxD,OAAUyK,EAAgB1O,QAAQ,MAAQ,IAAGiE,cAAAA,OAAa5B,EAAM,iBAClE,ECzIasM,EAAqB,SAAHlO,GAMzB,IALJmO,EAAMnO,EAANmO,OAAQC,EAAGpO,EAAHoO,IAAK9E,EAAQtJ,EAARsJ,SAAUP,EAAa/I,EAAb+I,cAAesF,EAAgBrO,EAAhBqO,iBAAkBzM,EAAM5B,EAAN4B,OACxDoG,EAAMhI,EAANgI,OAAQoB,EAAQpJ,EAARoJ,SAAQkF,EAAAtO,EAChBuO,yBAAAA,OAA2B,IAAHD,EAAG,EAACA,EAC5B/E,EAAyBvJ,EAAzBuJ,0BACAiF,EAA4BxO,EAA5BwO,6BAEA,GAAwC,iBAA7BD,EACT,MAAM,IAAIvH,UAAU,gDAGtB,IAAMyH,EAAkB,WACtB3I,OAAOuF,QAAQtC,GAAe2F,SAAQ,SAAA9J,GAAkB,IAAAK,EAAAtE,EAAAiE,EAAA,GAAhBC,EAAGI,EAAA,GACpB,mBAD2BA,EAAA,IAE9CqE,EAAS5F,KAAKmB,EAElB,KAEF4J,IAEA,IAAME,EAAiB,IAAIhH,EAC0CK,GAE/D4G,EAAmB,IAAIhG,EAAiBG,GACxC8F,EAAkB,IAAI5F,EAEzBG,EACD,CAACL,cAAAA,IAKG+F,EAAkB,sTACpBT,IACFA,EAAmBjK,MAAMC,QAAQgK,GAC7BA,EACA,CAACA,IAWP,IAAMjH,EAAkB,SAAHV,GAA2B,IAE1Cc,EAFoB3C,EAAG6B,EAAH7B,IAAKlB,EAAG+C,EAAH/C,IAAKoL,EAAMrI,EAANqI,OAiElC,OA1DIJ,EAAerG,YACfC,cAAc1D,GAEhB2C,EAAemH,EAAevH,gBAAgBvC,GAIzCgK,EAAgBvG,YAAaC,cAAc1D,GAEhD2C,EAAeqH,EAAgBzH,gBAAgBvC,EAAK,CAElDjD,OAA+BA,EAC/B0H,SAAAA,EACA3F,IAAAA,EACA4F,0BAAAA,IAI0B,mBAD5B/B,EAAeuH,EAAOlK,MAEpB2C,EAAeA,EAAa,CAAC7D,IAAAA,EAAKkB,IAAAA,KAOlCwJ,EACF7G,EAMI6G,EACAlD,QAQA,SAAC6D,EAAOC,GACN,OAAOA,EAAS,CACd1K,MAAOyK,EACPrL,IAAAA,EACAkB,IAAAA,EACAjD,OAAAA,GAEH,GAAE4F,GAEE7D,GAAQ,kGAAoGiD,KAAKjD,KAC1H6D,EAAe7C,EAAwB,CACrCJ,MAAOiD,EAAc7D,IAAAA,EAAKkB,IAAAA,EAAKjD,OAAAA,QAQjCsN,EAAsB,EAUpBC,EAAiB,SAAHC,GAA+C,IAA1C5H,EAAY4H,EAAZ5H,aAAcgC,EAAE4F,EAAF5F,GAAI7F,EAAGyL,EAAHzL,IAAK0L,EAAaD,EAAbC,cAE1CL,EAAQxH,EACZ,GAC0B,iBAAjBA,GACPA,EAAaxB,SAAS,KACtB,CACA,GAAIkJ,IAAwBX,EAC1B,MAAM,IAAIvH,UAAU,0CAGtB,GAEI2H,EAAerG,YACfC,cAAciB,GAChB,CACA,IACI8F,EADAC,EAAcxG,EAEdpF,IACF2L,EAAkB3P,EAAegE,GACjC4L,EAAW5J,EAAAA,KACNoD,GACAuG,IAGPN,EAAQK,EAAc,CACpB/P,IAAKkI,EAAcuH,OAAQQ,EAC3BxF,UAAW4E,IAETW,GACFd,EAA6B,CAACzF,cAAeuG,GAEjD,MAEGT,EAAgBvG,YAAaC,cAAciB,KAE5CwF,EAAQK,EAAc,CACpB/P,IAAKkI,IAGX,CAEA,OAAOwH,GAIT,IAAKZ,EAAK,CAER,IAAIoB,GAAa,EA0CXpE,EAvCU,SAAV7L,EAAOkQ,GAGP,IAFJnQ,EAAGmQ,EAAHnQ,IAAGoQ,EAAAD,EAAEV,OAAAA,OAAShG,IAAH2G,EAAG3G,EAAa2G,EAAAC,EAAAF,EAC3B1F,UAAAA,OAAY6E,IAAHe,EAAGf,EAAgBe,EAE5B,OAAOrQ,EAAIC,QACTuP,GASA,SAAClO,EAAGpB,EAAKgK,EAAIoG,EAAMjM,GACjB,GAAInE,EAAIE,OAAS,EACf,OAAOkB,EAET,GAAI2I,EAA0B,CAC5B1E,IAAK2E,EACLO,UAAAA,IAEA,OAAOnJ,EAGT,IAAI4G,EAAeJ,EAAgB,CAACvC,IAAK2E,EAAI7F,IAAAA,EAAKoL,OAAAA,IAUlD,OARAvH,EAAe2H,EAAe,CAC5B3H,aAAAA,EAAcgC,GAAAA,EAAI7F,IAAAA,EAAK0L,cAAe9P,IAGxCiQ,EAAaA,GACO,OAAjBhI,GAAiD,WAAxBzC,EAAOyC,IACjC,aAAcA,EAChB8B,EAAS5F,KAAK8F,GACPhK,EAAMgI,CACf,IAGQjI,CAAQ,CAACD,IAAK6O,IAC1B,IAAKqB,EAIH,OAHAhB,EAA6B,CAACzF,cAAAA,IAC9BO,EAAS5J,OAAS,EAClB+O,IACOpP,EAAoB+L,GAE7B9B,EAAS5J,OAAS,EAClB+O,GACF,CAEAS,EAAsB,EAGtB,IAsDMzL,EAtDuB,SAAvBoM,EAAoBC,GAEpB,IADJxQ,EAAGwQ,EAAHxQ,IAAGyQ,EAAAD,EAAEf,OAAAA,OAAShG,IAAHgH,EAAGhH,EAAagH,EAAAC,EAAAF,EAAE/F,UAAAA,OAAY6E,IAAHoB,EAAGpB,EAAgBoB,EAGnDvM,EAAQ,GAKR1D,EAAQ,IAAI6D,OAAOkL,EAAiB,MAKpCpL,EAAO,WACXD,EAAMC,KAAI3C,MAAV0C,EAAKgJ,YAqCP,OAlCA3M,EAAaC,EAAOT,EAAK,CACvBa,MAAOuD,EACPxD,QAAO,SAAEU,EAAGpB,EAAKgK,EAAIoG,EAAMjM,GACzB,GAAI4F,EAA0B,CAC5B1E,IAAK2E,EAAIO,UAAAA,IAETrG,EAAK9C,OACA,CACDpB,EAAIE,QACNgE,EAAKlE,GAIP,IAAIgI,EAAeJ,EAAgB,CAACvC,IAAK2E,EAAI7F,IAAAA,EAAKoL,OAAAA,IAClDvH,EAAe2H,EAAe,CAC5B3H,aAAAA,EAAcgC,GAAAA,EAAI7F,IAAAA,EAAK0L,cAAeQ,IAEpCzL,MAAMC,QAAQmD,GAChB9D,EAAI3C,WAAA,EAAAC,EAAIwG,IAIRA,GAAwC,WAAxBzC,EAAOyC,IACvB,aAAcA,EAEd9D,EAAK8D,EAAayI,WAAU,IAG5BvM,EAA4B8D,EAEhC,CACA8B,EAAS5F,KAAK8F,EAChB,IAEK/F,EAEKoM,CAAqB,CAACvQ,IAAK6O,IAIzC,OAFAK,EAA6B,CAACzF,cAAAA,IAC9BO,EAAS5J,OAAS,EACX+D,EAAMnB,KAAI,SAAC4N,GAChB,MAAoB,iBAATA,EACF7Q,EAAoB6Q,GAEtBA,CACT,GACF,ECtWO,SAASC,EAA4BtL,EAAK0C,GAC/C,GAAInD,MAAMC,QAAQQ,IAChBA,EAAI2D,OAAM,SAACqC,GACT,MAAoB,iBAANA,CAChB,KACwB,iBAAjBtD,GAA6BA,EAAa6I,SAAS,UAE1D,OAAOvL,EAAIvC,KAAI,SAACuI,GACd,OAAOA,EACJtL,QAAO8Q,EAAC,SAAuB,CAAAC,YAAA,IAAE,oBACjC/Q,QAAQ,MAAQ,MACrB,IAAGgR,KAAK,KAEV,GAAmB,iBAAR1L,EACT,MAAM,IAAImC,UACR,2EAIJ,OAAOnC,CACT,KCmBa4C,EAA0B,WAG5B,IAALH,GAAKmF,UAAA/M,OAAA,QAAAgN,IAAAD,UAAA,GAAAA,UAAA,GAAP,CAAE,GADJlF,aAAAA,OAAe,IAAHD,EAAG,aAAYA,EAE3B,MAA+B,mBAAjBC,EACVA,EACkB,eAAjBA,EACC,SAACiJ,EAAS3L,GACV,IAAMoB,EAMFuK,GAA8B,WAAnBzL,EAAOyL,IAAwBA,EAAQnJ,KAMhDtB,EAAO,GAQP0K,EAA2B,SAACnK,GAC3BP,EAAKrG,SACRqG,EAAK,GAAK,IAEZA,EAAKA,EAAKrG,OAAS,IAAM4G,GAE3BxG,EAZmC,WAYM+E,EAAK,CAG5C1E,MAAOsQ,EACPvQ,QAAOA,SAAEU,EAAGpB,GAIViR,EAAyBjR,GACzBuG,EAAKrC,KAAK,GACZ,IAEF,IAAMgN,EAAgB3K,EAAKzD,KAAI,SAACkH,GAC9B,OAAOnK,EAAoBmK,EAC7B,IASI4B,GAAM,EACNuF,EAAU1K,EA+Bd,OA9BAyK,EAAcE,MAAK,SAACpH,EAAIjG,EAAGsN,GACzB,OAAKF,GAA8B,WAAnB5L,EAAO4L,KAKrBpN,IAAMsN,EAAInR,OAAS,GAAK8J,KAAMmH,GAC9BA,EAAQnH,IAA8B,WAAvBzE,EAAO4L,EAAQnH,KAC9B,YAAamH,EAAQnH,IAEU,iBAAxBmH,EAAQnH,GAAIsH,UAEnB1F,EAAM,CACJ7G,MAA8BoM,EAAQnH,GAAIsH,QAC1CC,KAIKJ,EAAQnH,KAGjBmH,EAKOA,EAAQnH,IAER,EACT,IACO4B,CACR,EACmB,SAAjB7D,EACC,SAACiJ,EAAS3L,GACV,IAAMoB,EAKCuK,GAA8B,WAAnBzL,EAAOyL,IAAwBA,EAAQnJ,KACzD,SACEpB,GAAsB,WAAflB,EAAOkB,IACdpB,KAAOoB,GAAOA,EAAIpB,IAA4B,WAApBE,EAAOkB,EAAIpB,KACrC,YAAaoB,EAAIpB,IAEW,iBAArBoB,EAAIpB,GAAKiM,UAET,CACLvM,MAAO0B,EAAIpB,GAAKiM,QAChBC,KAAM9K,EAAIpB,GAIf,EACmB,UAAjB0C,EACC,SAACiJ,EAAS3L,GACV,IAAMoB,EAMFuK,GAA8B,WAAnBzL,EAAOyL,IAAwBA,EAAQnJ,KAEtD,SACEpB,GAAsB,WAAflB,EAAOkB,IACdpB,KAAOoB,GAAOA,EAAIpB,IAA4B,iBAAboB,EAAIpB,KAE9B,CACLN,MAAO0B,EAAIpB,GAIhB,EACmB,gBAAjB0C,EACC,SAACiJ,EAAS3L,GACV,IAAMoB,EAMFuK,GAA8B,WAAnBzL,EAAOyL,IAAwBA,EAAQnJ,KAEtD,GAAIpB,GAAsB,WAAflB,EAAOkB,GAAkB,CAGlC,IACM1B,EADOM,EAAIU,MAAM,aACJ4F,QAQjB,SAACO,EAAGb,GACF,OAAIa,GAAkB,WAAb3G,EAAO2G,IAAkBA,EAAEb,GAC3Ba,EAAEb,GAEJ,IACR,GAAE5E,GAEL,GAAI1B,GAA0B,iBAAVA,EAClB,MAAO,CAACA,MAAAA,EAEZ,CACA,OAAO,CACT,EACG,WACD,MAAM,IAAIyC,UAAS,0BAAAxD,OAA6B+D,GAClD,CAFG,EAKf,EC/MayJ,EAAkC,SAAHhR,GAMtC,IAGAV,EARJwR,EAAO9Q,EAAP8Q,QACAG,EAAQjR,EAARiR,SACA1J,EAAYvH,EAAZuH,aAAY2J,EAAAlR,EACZ0H,cAAAA,OAAgBD,IAAHyJ,EAAGzJ,EAAwB,CAACF,aAAAA,IAAc2J,EACvDrM,EAAG7E,EAAH6E,IAKA,GAAuB,iBAAZiM,EACTxR,EAAMwR,OACD,IACQ,IAAbG,SAAsBA,EAEtB3R,GAAM,MACD,KAAI2R,GAAgC,WAApBlM,EAAOkM,GAI5B,MAAM,IAAIjK,UACR,0EAJF,IAAMmK,EAAMzJ,EAAcuJ,EAAUpM,GACpCvF,EAAM6R,EAAMA,EAAI5M,MAAQ4M,CAM1B,CACA,IAAY,IAAR7R,EACF,MAAM,IAAIkB,MAAK,iCAAAgD,OAAkCqB,EAAO,MAE1D,OAAOvF,CACT,ECGa8R,EAAwB,SAAHpR,GAe5B,IAdJmO,EAAMnO,EAANmO,OACAvM,EAAM5B,EAAN4B,OACAoG,EAAMhI,EAANgI,OACAoB,EAAQpJ,EAARoJ,SACwBpJ,EAAxBuO,6BAAwB8C,EAAArR,EACxBqO,iBAAAA,OAAgB,IAAAgD,EAAG,CACjB1M,GACD0M,EAAAC,EAAAtR,EACDuR,YAAAA,OAAcrD,IAAHoD,EAAGpD,EAAkBoD,EAAAE,EAAAxR,EAChC+I,cAAAA,OAAgB,IAAHyI,GAAQA,EAAAC,EAAAzR,EACrBoO,IAAAA,OAAM,IAAHqD,GAAQA,EAAAC,EAAA1R,EACX2R,gBAAAA,OAAkB,IAAHD,GAAQA,EAAAE,EAAA5R,EACvB6R,iCAAAA,OAAmC,IAAHD,GAAOA,EAAAE,EAAA9R,EACvC+R,+BAAAA,OAAiC,IAAHD,GAAOA,EAErC,GAAsB,iBAAX3D,EACT,MAAM,IAAInH,UACR,4GASJ,IAAMgL,EAAmB,SAAC1S,GACxB,IAAMgC,EAAOI,IACb,OAAOiQ,EAEHrQ,EACA2Q,eAAe3S,GACfA,GAIAgK,EAAW,GAyCjB,IACGP,IAAkBsF,IAClBwD,EAED,OAAOG,EAAiB7D,GAErBpF,IACHA,EAAgB,CAAA,GAGlB,IAAMtF,EAAQ8N,EAAY,CACxBpD,OAAAA,EAAQC,IAAAA,EAAK9E,SAAAA,EAAUP,cAAAA,EAAesF,iBAAAA,EAAkBzM,OAAAA,EACxDoG,OAAAA,EACAoB,SAAAA,EACAG,0BAnCgC,SAAHtE,GAEzB,IADJJ,EAAGI,EAAHJ,IAAKkF,EAAS9E,EAAT8E,UAECmI,EAAWnI,EAAUoI,QAAQtN,GACnC,GAMIkF,EAAUzB,YACVC,cAAc1D,KAASqN,EACzB,CACA,GAAIL,EACF,MAAM,IAAIrR,MAAK,2BAAAgD,OAA4BqB,IAE7C,OAAO,CACT,CACA,OAAO,GAkBP2J,6BAnDmC,SAAH5J,GAE5B,IADWmK,EAAMnK,EAArBmE,cAEIgJ,GACFjM,OAAOC,KAAKgJ,GAAQL,SAAQ,SAAC7J,GAC3B,IAAKyE,EAAStD,SAASnB,GACrB,MAAM,IAAIrE,MAAK,yBAAAgD,OAA0BqB,GAE7C,OA6CJ,GAAqB,iBAAVpB,EACT,OAAOuO,EAAiBvO,GAG1B,IACMM,EADOrC,IACoCsC,yBAGjD,OAFAD,EAAUE,OAAMlD,MAAhBgD,EAAS/C,EAAWyC,IAEbM,CACT,ECxEO,SAAA8J,EAAgBtJ,EAAOsH,EAAM8B,GACnC,OAAIA,EACI9B,EAAOA,EAAKtH,GAASA,GAExBA,GAAUA,EAAMsH,OACpBtH,EAAQuI,QAAQc,QAAQrJ,IAElBsH,EAAOtH,EAAMsH,KAAKA,GAAQtH,EAClC,CAtBO,SAAA6N,EAAgBhR,GACtB,OAAO,WACN,IAAK,IAAIxB,EAAO,GAAI2D,EAAI,EAAGA,EAAIkJ,UAAU/M,OAAQ6D,IAChD3D,EAAK2D,GAAKkJ,UAAUlJ,GAErB,IACC,OAAOuJ,QAAQc,QAAQxM,EAAEL,MAAMoH,KAAMvI,GACrC,CAAC,MAAMsM,GACP,OAAOY,QAAQC,OAAOb,EACvB,EAEF,KA9DamG,EAAuB,SAACzQ,GACnC,IAAKA,EAAOoE,SAAS,KACnB,MAAM,IAAIxF,MAAM,wBAKlB,OAAOoB,EAAOrC,QAAQ,iJAAY,GACpC,EASa+S,EAAoB,SAAHtS,GAExB,IADJ4B,EAAM5B,EAAN4B,OAAQ2Q,EAAOvS,EAAPuS,QAAOC,EAAAxS,EAAEyS,cAAAA,OAAgBJ,IAAHG,EAAGH,EAAoBG,EAErD,IACE,MAAQD,EAAQvM,SAASpE,IAEvBA,EAAS6Q,EAAc7Q,EAE1B,CAAC,MAAO+I,GACP,OAAO,CACT,CACA,OAAO/I,CACT,EAiCa8Q,EAAoB,WAMtB,IAAA9N,EAAA6H,UAAA/M,OAAA,QAAAgN,IAAAD,UAAA,GAAAA,UAAA,GAAP,CAAE,EALJ8F,EAAO3N,EAAP2N,QACAI,EAAc/N,EAAd+N,eACAC,EAAchO,EAAdgO,eACA3E,EAAerJ,EAAfqJ,gBACAwE,EAAa7N,EAAb6N,cAEA,OAAiDI,GAAY,CAC3DN,QAAAA,EAASI,eAAAA,EAAgBC,eAAAA,EAAgB3E,gBAAAA,EAAiBwE,cAAAA,GAE9D,EAgBaK,GAAa,WAMf,IAAA7N,EAAAwH,UAAA/M,OAAA,QAAAgN,IAAAD,UAAA,GAAAA,UAAA,GAAP,CAAE,EALJ8F,EAAOtN,EAAPsN,QACAI,EAAc1N,EAAd0N,eACAC,EAAc3N,EAAd2N,eACA3E,EAAehJ,EAAfgJ,gBACAwE,EAAaxN,EAAbwN,cAEA,OAAuCI,GAAY,CACjDN,QAAAA,EAASI,eAAAA,EAAgBC,eAAAA,EAAgB3E,gBAAAA,EAAiBwE,cAAAA,EAC1DM,UAAU,GAEd,EAWMF,GAAWT,GAAA,SAAA1L,GAUf,IAMesM,EAASZ,GAAA,SAAExQ,GACxB,GAAsB,iBAAXA,EACT,MAAM,IAAIoF,UAAU,0BAEtB,IAAMiM,EAAML,EAAe3E,EAAiBrM,GAC5C,GAAmB,iBAARqR,EACT,MAAM,IAAIjM,UACR,yDAEH,OAwZE,SAAgBK,EAAMoG,GAC5B,IACC,IAAI/E,EAASrB,GACb,CAAC,MAAM6E,GACP,OAAOuB,EAAQvB,EAChB,CACA,OAAIxD,GAAUA,EAAOmD,KACbnD,EAAOmD,UAAK,EAAQ4B,GAErB/E,CACR,CAlaKgF,EACG,WACF,IAAMzM,EAAqDI,IAAY,OAAAwM,EACnDkF,EAChB9R,EAAOgS,EAAK,CACZC,OAAQ,SAERjS,EAAOgS,aAJLE,GAON,GAAoB,MAAhBA,EAAKC,OAIP,MAAM,IAAI5S,MAAM,gBACjB,OACGuS,EACKnR,EAAMiM,EAEQsF,EAAKE,QAAM,SAA5BC,GACN,MAAO,CACL1R,OAAAA,EACA0R,QAAAA,EACA,GAAA,GACH,IAAA,SAAQ3I,GACP,GAAwC,gBAAdA,EAAK4I,KAC7B,MAAM5I,EACP,OAAAkD,EAEC4E,EACA7Q,GACKoR,SAEVQ,EAAA9M,EAzDD6L,QAAAA,OAAU,IAAHiB,EAA4B,oBAAlBC,cACb,CAACA,eACoB,oBAAdC,UAA4B,GAAKA,UAAUC,UAASH,EAAAI,EAAAlN,EAC/DiM,eAAAA,OAAc,IAAAiB,EAAG,CAAC,SAAQA,EAAAC,EAAAnN,EAC1BkM,eAAAA,OAAiB5E,IAAH6F,EAAG7F,EAAqB6F,EAAAC,EAAApN,EACtCuH,gBAAAA,OAAkB,IAAH6F,EAAG,IAAGA,EAAAC,EAAArN,EACrB+L,cAAAA,OAAgB,IAAHsB,EAAG,SAAQA,EAAAC,EAAAtN,EACxBqM,SAAAA,OAAW,IAAHiB,GAAQA,EAmDhB,GAAsB,WAAlBvB,EACFA,EAAgBJ,OACX,GAA6B,mBAAlBI,EAChB,MAAM,IAAIzL,UAAU,mDACrB,OACYqF,EAAqB,GAAA7I,OAAAxC,EAC5BuR,GAAOvR,EAAK2R,IAChBK,EACA,gCAAkC,GAAAxP,OAAAxC,EAAIuR,GAAOvR,EAAK2R,IAAgBpC,KAAK,MAE3E,IClHO,SAAA1C,GAAgBtJ,EAAOsH,EAAM8B,GACnC,OAAIA,EACI9B,EAAOA,EAAKtH,GAASA,GAExBA,GAAUA,EAAMsH,OACpBtH,EAAQuI,QAAQc,QAAQrJ,IAElBsH,EAAOtH,EAAMsH,KAAKA,GAAQtH,EAClC,KAAa0P,GAAa,SAAmBjU,GAgB1C,IAfDsT,EAAOtT,EAAPsT,QACAY,EAAclU,EAAdkU,eAAc5M,EAAAtH,EACduH,aAAAA,OAAe,IAAHD,EAAG,aAAYA,EACT6M,EAA4BnU,EAA9CqO,iBACAkD,EAAWvR,EAAXuR,YAAW6C,EAAApU,EACXqU,oBAAAA,OAAsBlE,IAAHiE,EAAGjE,EAA0BiE,EACtCE,EAAetU,EAAzBiR,SACesD,EAAoBvU,EAAnC+I,cACAwF,EAAwBvO,EAAxBuO,yBAAwBkD,EAAAzR,EACxBoO,IAAKoG,OAAc,IAAH/C,GAAQA,EAAAC,EAAA1R,EACxB2R,gBAAiB8C,OAAyB,IAAH/C,GAAQA,EAAAE,EAAA5R,EAC/C6R,iCACE6C,OAA0C,IAAH9C,GAAOA,EAAAE,EAAA9R,EAChD+R,+BACE4C,OAAwC,IAAH7C,GAAOA,EAE9C,IAAKwB,GAA8B,WAAnBvO,EAAOuO,GACrB,MAAM,IAAItM,UAA8C,qCAE1D,IAAMU,EAAgBD,EAAwB,CAACF,aAAAA,IAKzCwC,EAAY,SAAClF,EAAKkE,GAOb,IAAAnE,EAAA6H,UAAA/M,OAAA,QAAAgN,IAAAD,UAAA,GAAAA,UAAA,GAAP,CAAE,EAAAmI,EAAAhQ,EANJyJ,iBAAAA,OAAmB8F,IAAHS,EAAGT,EAA4BS,EAAAC,EAAAjQ,EAC/CqM,SAAAA,OAAWqD,IAAHO,EAAGP,EAAeO,EAAAC,EAAAlQ,EAC1BwJ,IAAAA,OAAMoG,IAAHM,EAAGN,EAAWM,EAAAC,EAAAnQ,EACjB+M,gBAAAA,OAAkB8C,IAAHM,EAAGN,EAAsBM,EAAAC,EAAApQ,EACxCiN,iCAAAA,OAAmC6C,IAAHM,EAAGN,EAAuCM,EAAAC,EAAArQ,EAC1EmN,+BAAAA,OAAiC4C,IAAHM,EAAGN,EAAqCM,EAEtEpQ,EAA6BwP,EAAoBxP,EAAK0C,GACtD,IAAMuJ,EAAUpJ,EAAc4L,EAASzO,GACjCsJ,EAAS6C,EAAgC,CAC7CF,WAASA,GAAoC,iBAAlBA,EAAQvM,QAC/BuM,EAAQvM,MAEZ0M,SAAAA,EACAvJ,cAAAA,EACA7C,IAAAA,IAGF,OAAOuM,EAAsB,CAC3BjD,OAAAA,EACAnG,OAAQsL,EAAQ4B,MAAQ5B,EAAQ4B,KAAKlN,OACrCoB,SAAUkK,EAAQ4B,MAAQ5B,EAAQ4B,KAAK9L,SACvCxH,OAAQsS,EACR3F,yBAAAA,EACAF,iBAAAA,EACAkD,YAAAA,EACAxI,cAAapD,EAAAA,KAAM4O,GAAyBxL,GAC5CqF,IAAAA,EACAuD,gBAAAA,EACAE,iCAAAA,EACAE,+BAAAA,KA0BJ,OAtBAhI,EAAUmK,eAAiBA,EAC3BnK,EAAUuJ,QAAUA,EAGpBvJ,EAAUpI,KAAO,SAACE,EAAcC,GAC9B,OAAOH,EAAKuS,EAAgBrS,EAAcC,IAI5CiI,EAAU1H,SAAW,SAACR,EAAcS,EAAKC,EAAaC,GACpD,OAAOH,EACL6R,EAAgBrS,EAAcS,EAAKC,EAAaC,IAKpDuH,EAAU7H,KAAO,SAACL,EAAcC,GAC9B,OAAOI,EACLgS,EAAgBrS,EAAcC,IAI3BiI,CACT,EAuCaoL,GAAsBA,WAAI,IAAAlQ,EAAAwH,UAAA/M,OAAA,QAAAgN,IAAAD,UAAA,GAAAA,UAAA,GAkBnC,CAAE,EAjBJ8F,EAAOtN,EAAPsN,QACAI,EAAc1N,EAAd0N,eAAcyC,EAAAnQ,EACdoQ,mBAAAA,OAAqB3C,IAAH0C,EAAG1C,EAAiB0C,EACtCnH,EAAehJ,EAAfgJ,gBACA2E,EAAc3N,EAAd2N,eACAH,EAAaxN,EAAbwN,cACAlL,EAAYtC,EAAZsC,aACA8G,EAAgBpJ,EAAhBoJ,iBACAkD,EAAWtM,EAAXsM,YACA8C,EAAmBpP,EAAnBoP,oBACApD,EAAQhM,EAARgM,SACAlI,EAAa9D,EAAb8D,cACAwF,EAAwBtJ,EAAxBsJ,yBACAH,EAAGnJ,EAAHmJ,IACAuD,EAAe1M,EAAf0M,gBACAE,EAAgC5M,EAAhC4M,iCACAE,EAA8B9M,EAA9B8M,+BAA8B,IACxB,OAAAlE,GAC0CwH,EAAmB,CACjE9C,QAAAA,EAASI,eAAAA,EAAgBC,eAAAA,EAAgB3E,gBAAAA,EAAiBwE,cAAAA,cAC1D/L,GAAA,IAsT0BmF,EACzBnD,EAzTI4K,EAAO5M,EAAP4M,QAAiBY,EAAcxN,EAAtB9E,OAAM,OAwTMiK,EA7SP,WAIrB,OAAOoI,GAAW,CAChBX,QAAAA,EACAY,eAAAA,EACA3M,aAAAA,EACA8G,iBAAAA,EACAkD,YAAAA,EACA8C,oBAAAA,EACApD,SAAAA,EACAlI,cAAAA,EACAwF,yBAAAA,EACAH,IAAAA,EACAuD,gBAAAA,EACAE,iCAAAA,EACAE,+BAAAA,GACC,GA4RArJ,EAzTmB,WAAA,IAGjBuI,GAAY0B,EACG,OAAA9E,GACkCwH,EAAmB,CACrE9C,QAASI,EACTA,eAAgB,GAChBC,eAAAA,EAAgB3E,gBAAAA,EAAiBwE,cAAAA,cACjC6C,GAJSrE,EAAQqE,EAAjBhC,QAAwCgC,EAArB1T,SAKCsS,IACpBjD,EAAW,KAAM,GAAA,CA8ST5J,KACCqB,EAAOmD,KACbnD,EAAOmD,KAAKA,GAEbA,EAAKnD,EAhSR,GACJ,OAAAwD,GAAA,OAAAY,QAAAC,OAAAb,EAAA,CAAA"}