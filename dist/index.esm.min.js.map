{"version":3,"file":"index.esm.min.js","sources":["../src/utils.js","../src/shared.js","../src/collation.js","../src/defaultAllSubstitutions.js","../src/Formatter.js","../src/promiseChainForValues.js","../src/defaultLocaleResolver.js","../src/defaultInsertNodes.js","../src/getMessageForKeyByStyle.js","../src/getStringFromMessageAndDefaults.js","../src/getDOMForLocaleString.js","../src/findLocaleStrings.js","../src/i18n.js"],"sourcesContent":["// We want it to work in the browser, so commenting out\n// import jsonExtra from 'json5';\n// import jsonExtra from 'json-6';\n\nlet _jsonExtra = globalThis.jsonExtra;\nexport const setJSONExtra = (__jsonExtra) => {\n  _jsonExtra = __jsonExtra;\n};\n\nexport const unescapeBackslashes = (str) => {\n  return str.replace(/\\\\+/gu, (esc) => {\n    return esc.slice(0, esc.length / 2);\n  });\n};\n\nexport const parseJSONExtra = (args) => {\n  return _jsonExtra.parse(\n    // Doesn't actually currently allow explicit brackets,\n    //  but in case we change our regex to allow inner brackets\n    '{' + (args || '').replace(/^\\{/u, '').replace(/\\}$/u, '') + '}'\n  );\n};\n\n// Todo: Extract to own library (RegExtras?)\nexport const processRegex = (regex, str, {\n  onMatch,\n  extra,\n  betweenMatches,\n  afterMatch,\n  escapeAtOne\n}) => {\n  let match;\n  let previousIndex = 0;\n  if (extra) {\n    betweenMatches = extra;\n    afterMatch = extra;\n    escapeAtOne = extra;\n  }\n  while ((match = regex.exec(str)) !== null) {\n    const [_, esc] = match;\n    const {lastIndex} = regex;\n\n    const startMatchPos = lastIndex - _.length;\n    if (startMatchPos > previousIndex) {\n      betweenMatches(str.slice(previousIndex, startMatchPos));\n    }\n\n    if (escapeAtOne && esc.length % 2) {\n      previousIndex = lastIndex;\n      escapeAtOne(_);\n      continue;\n    }\n    onMatch(...match);\n    previousIndex = lastIndex;\n  }\n  if (previousIndex !== str.length) { // Get text at end\n    afterMatch(str.slice(previousIndex));\n  }\n};\n","/* globals fetch, document */\nlet _fetch = typeof fetch !== 'undefined'\n  /* c8 ignore next */\n  ? fetch\n  : null;\n\n/**\n * @param {fetch} f\n * @returns {void}\n */\nexport const setFetch = (f) => {\n  _fetch = f;\n};\n\n/**\n * @returns {fetch}\n */\nexport const getFetch = () => {\n  return _fetch;\n};\n\nlet _doc = typeof document !== 'undefined'\n  /* c8 ignore next */\n  ? document\n  : null;\n\n/**\n * @param {document} doc\n * @returns {void}\n */\nexport const setDocument = (doc) => {\n  _doc = doc;\n};\n\n/**\n * @returns {document}\n */\nexport const getDocument = () => {\n  return _doc;\n};\n","/* globals performance */\nimport {processRegex} from './utils.js';\nimport {getDocument} from './shared.js';\n\nexport {setDocument, getDocument} from './shared.js';\n\n/**\n *\n * @returns {string}\n */\nfunction generateUUID () { //  Adapted from original: public domain/MIT: http://stackoverflow.com/a/8809472/271577\n  let d = Date.now();\n  /* c8 ignore next 5 */\n  if (typeof performance !== 'undefined' &&\n      typeof performance.now === 'function'\n  ) {\n    d += performance.now(); // use high-precision timer if available\n  }\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/gu, function (c) {\n    /* eslint-disable no-bitwise */\n    const r = Math.trunc((d + Math.random() * 16) % 16);\n    d = Math.floor(d / 16);\n    return (c === 'x' ? r : (r & 0x3 | 0x8)).toString(16);\n    /* eslint-enable no-bitwise */\n  });\n}\n\nexport const sort = (locale, arrayOfItems, options) => {\n  return arrayOfItems.sort(new Intl.Collator(\n    locale,\n    options\n  ).compare);\n};\n\nexport const list = (locale, arrayOfItems, options) => {\n  return new Intl.ListFormat(\n    locale, options\n  ).format(arrayOfItems);\n};\n\nexport const sortListSimple = (\n  locale, arrayOfItems, listOptions, collationOptions\n) => {\n  sort(locale, arrayOfItems, collationOptions);\n  return list(locale, arrayOfItems, listOptions);\n};\n\nexport const sortList = (\n  locale, arrayOfItems, map, listOptions, collationOptions\n) => {\n  if (typeof map !== 'function') {\n    return sortListSimple(locale, arrayOfItems, map, listOptions);\n  }\n  sort(locale, arrayOfItems, collationOptions);\n\n  const randomId = generateUUID();\n\n  const placeholderArray = [...arrayOfItems].map(\n    (_, i) => `<<${randomId}${i}>>`\n  );\n  const nodes = [];\n  const push = (...args) => {\n    nodes.push(...args);\n  };\n\n  processRegex(\n    // // eslint-disable-next-line prefer-named-capture-group\n    new RegExp(`<<${randomId}(\\\\d)>>`, 'gu'),\n    list(locale, placeholderArray, listOptions), {\n      betweenMatches: push,\n      afterMatch: push,\n      onMatch (_, idx) {\n        push(map(arrayOfItems[idx], idx));\n      }\n    }\n  );\n  const _doc = getDocument();\n  const container = _doc.createDocumentFragment();\n  container.append(...nodes);\n  return container;\n};\n","import {parseJSONExtra} from './utils.js';\nimport {sortList} from './collation.js';\n\nexport const getFormatterInfo = ({object}) => {\n  if (Array.isArray(object)) {\n    if (typeof object[1] === 'function') {\n      const [value, callback, options, extraOpts] = object;\n      return {value, callback, options, extraOpts};\n    }\n    const [value, options, extraOpts] = object;\n    return {value, options, extraOpts};\n  }\n  return {value: object};\n};\n\n/* eslint-disable max-len */\n/**\n * Callback to give replacement text based on a substitution value.\n * @callback AllSubstitutionCallback\n * @param {PlainObject} cfg\n * @param {string|Node|number|Date|RelativeTimeInfo|ListInfo|NumberInfo|DateInfo} cfg.value Contains\n *   the value returned by the individual substitution\n * @param {string} cfg.arg See `cfg.arg` of {@link SubstitutionCallback}.\n * @param {string} cfg.key The substitution key Not currently in use\n * @param {string} cfg.locale The locale\n * @returns {string|Element} The replacement text or element\n*/\n/* eslint-enable max-len */\n\n/**\n * @type {AllSubstitutionCallback}\n */\nexport const defaultAllSubstitutions = ({value, arg, key, locale}) => {\n  // Strings or DOM Nodes\n  if (\n    typeof value === 'string' || (value && typeof value === 'object' &&\n    'nodeType' in value)\n  ) {\n    return value;\n  }\n\n  let opts;\n\n  const applyArgs = ({type, options = opts, checkArgOptions = false}) => {\n    if (typeof arg === 'string') {\n      let [userType, extraArgs, argOptions] = arg.split('|');\n      // Alias\n      if (userType === 'DATE') {\n        userType = 'DATETIME';\n      }\n      if (userType === type) {\n        if (!extraArgs) {\n          options = {};\n        } else if (!checkArgOptions || argOptions) {\n          // Todo: Allow escaping and restoring of pipe symbol\n          options = {\n            ...options,\n            ...parseJSONExtra(\n              checkArgOptions && argOptions ? argOptions : extraArgs\n            )\n          };\n        }\n      }\n    }\n    return options;\n  };\n\n  let expectsDatetime = false;\n  if (value && typeof value === 'object' && !Array.isArray(value)) {\n    const singleKey = Object.keys(value)[0];\n    if ([\n      'number', 'date', 'datetime', 'dateRange', 'datetimeRange', 'relative',\n      'region', 'language', 'script', 'currency',\n      'list', 'plural'\n    ].includes(singleKey)) {\n      let extraOpts, callback;\n      ({\n        value, options: opts, extraOpts, callback\n      } = getFormatterInfo({object: value[singleKey]}));\n\n      switch (singleKey) {\n      case 'date': case 'datetime':\n        expectsDatetime = true;\n        break;\n      case 'dateRange': case 'datetimeRange':\n        return new Intl.DateTimeFormat(\n          locale,\n          applyArgs({type: 'DATERANGE', options: extraOpts})\n        ).formatRange(...[value, opts].map((val) => {\n          return typeof val === 'number' ? new Date(val) : val;\n        }));\n      case 'region': case 'language': case 'script': case 'currency':\n        return new Intl.DisplayNames(\n          locale, {\n            ...applyArgs({type: singleKey.toUpperCase()}),\n            type: singleKey\n          }\n        ).of(value);\n      case 'relative':\n        // The second argument actually contains the primary options, so swap\n        [extraOpts, opts] = [opts, extraOpts];\n        return new Intl.RelativeTimeFormat(\n          locale, applyArgs({type: 'RELATIVE'})\n        ).format(value, extraOpts);\n\n      // ListFormat (with Collator)\n      case 'list':\n        if (callback) {\n          return sortList(\n            locale, value, callback,\n            applyArgs({type: 'LIST'}),\n            applyArgs({\n              type: 'LIST', options: extraOpts, checkArgOptions: true\n            })\n          );\n        }\n        return sortList(locale, value, applyArgs({type: 'LIST'}), applyArgs({\n          type: 'LIST', options: extraOpts, checkArgOptions: true\n        }));\n      default:\n        // Let `number` and `date` types drop through so their options\n        //  can be applied\n        // Let `plural` be treated as number (since value should be a number)\n        break;\n      }\n    }\n  }\n\n  // Dates\n  if (\n    value\n  ) {\n    if (\n      typeof value === 'number' &&\n      (expectsDatetime || (/^DATE(?:TIME)(?:\\||$)/u).test(arg))\n    ) {\n      value = new Date(value);\n    }\n    if (typeof value === 'object' && typeof value.getTime === 'function') {\n      return new Intl.DateTimeFormat(\n        locale,\n        applyArgs({type: 'DATETIME'})\n      ).format(value);\n    }\n  }\n\n  // Date range\n  if (Array.isArray(value)) {\n    const extraOpts = value[2];\n    return new Intl.DateTimeFormat(\n      locale,\n      applyArgs({type: 'DATERANGE', options: extraOpts})\n    ).formatRange(...value.slice(0, 2).map((val) => {\n      return typeof val === 'number' ? new Date(val) : val;\n    }));\n  }\n\n  // Numbers\n  if (typeof value === 'number') {\n    return new Intl.NumberFormat(\n      locale,\n      applyArgs({type: 'NUMBER'})\n    ).format(value);\n  }\n\n  // console.log('value', value);\n  throw new TypeError('Unknown formatter');\n};\n","import {getMessageForKeyByStyle} from './index.js';\nimport {parseJSONExtra} from './utils.js';\nimport {getFormatterInfo} from './defaultAllSubstitutions.js';\n\n/**\n * Base class for formatting.\n */\nexport class Formatter {\n}\n\n/**\n * @param {PlainObject} cfg\n * @param {string} cfg.key\n * @param {LocaleBody} cfg.body\n * @param {string} cfg.type\n * @param {\"richNested\"|\"rich\"|\"plain\"|MessageStyleCallback} cfg.messageStyle\n * @returns {string|Element}\n */\nconst getSubstitution = ({key, body, type, messageStyle = 'richNested'}) => {\n  const messageForKey = getMessageForKeyByStyle({messageStyle});\n  const substitution = messageForKey({body}, key);\n  if (!substitution) {\n    throw new Error(`Key value not found for ${type} key: (${key})`);\n  }\n  // We don't allow a substitution function here or below as comes\n  //  from locale and locale content should not pose security concerns\n  return substitution.value;\n};\n\n/**\n * Formatter for local variables.\n */\nexport class LocalFormatter extends Formatter {\n  /**\n   * @param {LocalObject} locals\n   */\n  constructor (locals) {\n    super();\n    this.locals = locals;\n  }\n  /**\n   * @param {string} key\n   * @returns {string|Element}\n   */\n  getSubstitution (key) {\n    return getSubstitution({\n      key: key.slice(1), body: this.locals, type: 'local'\n    });\n  }\n  /**\n   * @param {string} key\n   * @returns {boolean}\n   */\n  isMatch (key) {\n    const components = key.slice(1).split('.');\n    let parent = this.locals;\n    return this.constructor.isMatchingKey(key) && components.every((cmpt) => {\n      const result = cmpt in parent;\n      parent = parent[cmpt];\n      return result;\n    });\n  }\n  /**\n   * @param {string} key\n   * @returns {boolean}\n   */\n  static isMatchingKey (key) {\n    return key.startsWith('-');\n  }\n}\n\n/**\n * Formatter for regular variables.\n */\nexport class RegularFormatter extends Formatter {\n  /**\n   * @param {SubstitutionObject} substitutions\n   */\n  constructor (substitutions) {\n    super();\n    this.substitutions = substitutions;\n  }\n  /**\n   * @param {string} key\n   * @returns {boolean}\n   */\n  isMatch (key) {\n    return this.constructor.isMatchingKey(key) && key in this.substitutions;\n  }\n  /**\n   * @param {string} key\n   * @returns {boolean}\n   */\n  static isMatchingKey (key) {\n    return (/^\\w/u).test(key);\n  }\n}\n\n/**\n * Formatter for switch variables.\n */\nexport class SwitchFormatter extends Formatter {\n  /**\n   * @param {Switches} switches\n   * @param {SubstitutionObject} substitutions\n   */\n  constructor (switches, {substitutions}) {\n    super();\n    this.switches = switches;\n    this.substitutions = substitutions;\n  }\n\n  /**\n   * @param {string} key\n   * @param {PlainObject} cfg\n   * @param {string} cfg.locale\n   * @param {string[]} cfg.usedKeys\n   * @param {string} cfg.arg\n   * @param {MissingSuppliedFormattersCallback} cfg.missingSuppliedFormatters\n   * @returns {string}\n   */\n  getSubstitution (key, {locale, usedKeys, arg, missingSuppliedFormatters}) {\n    const ky = this.constructor.getKey(key).slice(1);\n    // Expression might not actually use formatter, e.g., for singular,\n    //  the conditional might just write out \"one\"\n\n    const [objKey, body, keySegment] = this.getMatch(ky);\n    usedKeys.push(keySegment);\n\n    let type, opts;\n    if (objKey && objKey.includes('|')) {\n      [, type, opts] = objKey.split('|');\n    }\n    if (!body) {\n      missingSuppliedFormatters({\n        key,\n        formatter: this\n      });\n      return '\\\\{' + key + '}';\n    }\n\n    /*\n    if (!(ky in this.substitutions)) {\n      throw new Error(`Switch expecting formatter: ${ky}`);\n    }\n    */\n\n    const getNumberFormat = (value, defaultOptions) => {\n      const numberOpts = parseJSONExtra(opts);\n      return new Intl.NumberFormat(locale, {\n        ...defaultOptions, ...numberOpts\n      }).format(value);\n    };\n\n    const getPluralFormat = (value, defaultOptions) => {\n      const pluralOpts = parseJSONExtra(opts);\n      return new Intl.PluralRules(locale, {\n        ...defaultOptions, ...pluralOpts\n      }).select(value);\n    };\n\n    const formatterValue = this.substitutions[keySegment];\n\n    let match = formatterValue;\n    if (typeof formatterValue === 'number') {\n      switch (type) {\n      case 'NUMBER':\n        match = getNumberFormat(formatterValue);\n        break;\n      case 'PLURAL':\n        match = getPluralFormat(formatterValue);\n        break;\n      default:\n        match = new Intl.PluralRules(locale).select(formatterValue);\n        break;\n      }\n    } else if (formatterValue && typeof formatterValue === 'object') {\n      const singleKey = Object.keys(formatterValue)[0];\n      if (['number', 'plural'].includes(singleKey)) {\n        const {value, options} = getFormatterInfo({\n          object: formatterValue[singleKey]\n        });\n        if (!type) {\n          type = singleKey.toUpperCase();\n        }\n        const typeMatches = singleKey.toUpperCase() === type;\n        if (!typeMatches) {\n          throw new TypeError(\n            `Expecting type \"${\n              type.toLowerCase()\n            }\"; instead found \"${singleKey}\".`\n          );\n        }\n        // eslint-disable-next-line default-case\n        switch (type) {\n        case 'NUMBER':\n          match = getNumberFormat(value, options);\n          break;\n        case 'PLURAL':\n          match = getPluralFormat(value, options);\n          break;\n        }\n      }\n    }\n\n    // We do not want the default `richNested` here as that will split\n    //  up the likes of `0.0`\n    const messageStyle = 'richNested';\n\n    const preventNesting = (s) => {\n      return s.replace(/\\\\/gu, '\\\\\\\\').replace(/\\./gu, '\\\\.');\n    };\n\n    try {\n      return getSubstitution({\n        messageStyle,\n        key: match ? preventNesting(match) : arg,\n        body,\n        type: 'switch'\n      });\n    } catch (err) {\n      try {\n        return getSubstitution({\n          messageStyle, key: '*' + preventNesting(match), body, type: 'switch'\n        });\n      } catch (error) {\n        const k = Object.keys(body).find(\n          (switchKey) => switchKey.startsWith('*')\n        );\n        if (!k) {\n          throw new Error(`No defaults found for switch ${ky}`);\n        }\n        return getSubstitution({\n          messageStyle, key: preventNesting(k), body, type: 'switch'\n        });\n      }\n    }\n  }\n\n  /**\n   * @param {string} key\n   * @returns {boolean}\n   */\n  isMatch (key) {\n    return key && this.constructor.isMatchingKey(key) &&\n      Boolean(this.getMatch(key.slice(1)).length);\n  }\n\n  /**\n  * @typedef {GenericArray} SwitchMatch\n  * @property {string} 0 objKey\n  * @property {LocaleBody} 1 body\n  * @property {string} 2 keySegment\n  */\n\n  /**\n   * @param {string} ky\n   * @returns {SwitchMatch}\n   */\n  getMatch (ky) {\n    const ks = ky.split('.');\n    return ks.reduce((obj, k, i) => {\n      if (i < ks.length - 1) {\n        if (!(k in obj)) {\n          throw new Error(`Switch key \"${k}\" not found (from \"~${ky}\")`);\n        }\n        return obj[k];\n      }\n      // Todo: Should throw on encountering duplicate fundamental keys (even\n      //  if there are different arguments, that should not be allowed)\n      const ret = Object.entries(obj).find(([switchKey]) => {\n        return k === this.constructor.getKey(switchKey);\n      });\n\n      return ret ? [...ret, k] : [];\n    }, this.switches);\n  }\n\n  /**\n   * @param {string} key\n   * @returns {boolean}\n   */\n  static isMatchingKey (key) {\n    return key.startsWith('~');\n  }\n  /**\n   * @param {string} key\n   * @returns {string}\n   */\n  static getKey (key) {\n    const match = key.match(/^[^|]*/u);\n    return match && match[0];\n  }\n}\n","/**\n* @callback PromiseChainErrback\n* @param {(value: any) => Promise<any>} errBack\n* @returns {Promise<any>|any}\n*/\n\n/**\n * The given array will have its items processed in series; if the supplied\n *  `errBack` (which is guaranteed to run at least once), when passed the\n *  current item, returns a `Promise` or value that resolves, that value will\n *  be used for the return result of this function and no other items in\n *  the array will continue to be processed; if it rejects, however, the\n *  next item will be processed with `errBack`.\n * Accept an array of values to pass to an errback which should return\n *  a promise (or final result value) which resolves to a result or which\n *  rejects so that the next item in the array can be checked in series.\n * @param {Array<any>} values Array of values\n * @param {PromiseChainErrback} errBack Accepts an item of the array as its\n *   single argument\n * @param {string} [errorMessage=\"Reached end of values array.\"]\n * @returns {Promise<any>} Either resolves to a value derived from an item in\n *  the array or rejects if all items reject\n * @example\npromiseChainForValues(['a', 'b', 'c'], (val) => {\n  return new Promise(function (resolve, reject) {\n    if (val === 'a') {\n      reject(new Error('missing'));\n    }\n    setTimeout(() => {\n      resolve(val);\n    }, 100);\n  });\n});\n */\nexport const promiseChainForValues = (\n  values, errBack, errorMessage = 'Reached end of values array.'\n) => {\n  if (!Array.isArray(values)) {\n    throw new TypeError(\n      'The `values` argument to `promiseChainForValues` must be an array.'\n    );\n  }\n  if (typeof errBack !== 'function') {\n    throw new TypeError(\n      'The `errBack` argument to `promiseChainForValues` must be a function.'\n    );\n  }\n  return (async () => {\n    let ret;\n    let p = Promise.reject(\n      new Error('Intentionally reject so as to begin checking chain')\n    );\n    let breaking;\n    while (true) {\n      const value = values.shift();\n      try {\n        // eslint-disable-next-line no-await-in-loop\n        ret = await p;\n        break;\n      } catch (err) {\n        if (breaking) {\n          throw new Error(errorMessage);\n        }\n        // We allow one more try\n        if (!values.length) {\n          breaking = true;\n        }\n        // // eslint-disable-next-line no-await-in-loop\n        p = errBack(value);\n      }\n    }\n    return ret;\n  })();\n};\n","/**\n* @callback SubstitutionCallback\n* @param {PlainObject} cfg\n* @param {string} cfg.arg By default, accepts the third portion of the\n*   `formattingRegex` within `insertNodes`, i.e., to allow the locale to\n*   supply arguments back to the calling script.\n* @param {string} cfg.key The substitution key\n* @returns {string|Element} The replacement text or element\n*/\n\n/**\n * May have additional properties if supplying options to an underlying\n * formatter.\n * @typedef {GenericArray} ValueArray\n * @property {string|Node|number|Date} 0 The main value\n * @property {PlainObject} [1] The options related to the main value\n * @property {PlainObject} [2] Any additional options\n*/\n\n/**\n* @typedef {PlainObject} RelativeTimeInfo\n* @property {ValueArray} relative\n*/\n\n/**\n* @typedef {PlainObject} ListInfo\n* @property {ValueArray} list\n*/\n\n/**\n* @typedef {PlainObject} NumberInfo\n* @property {ValueArray} number\n*/\n\n/**\n* @typedef {PlainObject} DateInfo\n* @property {ValueArray} date\n*/\n\n/**\n* @typedef {Object<string, string>} PlainLocaleStringBodyObject\n*/\n\n/**\n* @typedef {PlainObject} SwitchCaseInfo\n* @property {boolean} [default=false] Whether this conditional is the default\n*/\n\n/**\n* @typedef {GenericArray} SwitchCase\n* @property {string} 0 The type\n* @property {string} 1 The message\n* @property {SwitchCaseInfo} [2] Info about the switch case\n*/\n\n/**\n* @typedef {PlainObject<string, SwitchCase>} Switch\n*/\n\n/**\n* @typedef {PlainObject<{string, Switch}>} Switches\n*/\n\n/**\n* @typedef {PlainObject} LocaleStringSubObject\n* @property {string} [message] The locale message with any formatting\n*   place-holders; defaults to use of any single conditional\n* @property {string} [description] A description to add translators\n* @property {Switches} [switches] Conditionals\n*/\n\n/**\n* @typedef {PlainObject<string, LocaleStringSubObject>} LocaleStringBodyObject\n*/\n\n/**\n * Takes a base path and locale and gives a URL.\n * @callback LocaleResolver\n * @param {string} localesBasePath (Trailing slash optional)\n * @param {string} locale BCP-47 language string\n * @returns {string} URL of the locale file to be fetched\n*/\n\n/**\n* @typedef {PlainObject<string, string|Element|\n* SubstitutionCallback>} SubstitutionObject\n*/\n\n/**\n * @type {LocaleResolver}\n */\nexport const defaultLocaleResolver = (localesBasePath, locale) => {\n  if (typeof localesBasePath !== 'string') {\n    throw new TypeError(\n      '`defaultLocaleResolver` expects a string `localesBasePath`.'\n    );\n  }\n  if (typeof locale !== 'string') {\n    throw new TypeError(\n      '`defaultLocaleResolver` expects a string `locale`.'\n    );\n  }\n  if ((/[./\\\\]/u).test(locale)) {\n    throw new TypeError(\n      'Locales cannot use file-reserved characters, `.`, `/` or `\\\\`'\n    );\n  }\n  return `${localesBasePath.replace(/\\/$/u, '')}/_locales/${locale}/messages.json`;\n};\n","import {\n  LocalFormatter, RegularFormatter, SwitchFormatter\n} from './Formatter.js';\nimport {defaultAllSubstitutions} from './defaultAllSubstitutions.js';\nimport {unescapeBackslashes, parseJSONExtra, processRegex} from './utils.js';\n\n/* eslint-disable max-len */\n/**\n * Callback to return a string or array of nodes and strings based on a localized\n * string, substitutions object, and other metadata.\n * @callback InsertNodesCallback\n * @param {PlainObject} cfg\n * @param {string} cfg.string The localized string\n * @param {boolean} [cfg.dom] If substitutions known to contain DOM, can be set\n *   to `true` to optimize\n * @param {string[]} [cfg.usedKeys=[]] Array for tracking which keys have been used\n * @param {SubstitutionObject} cfg.substitutions The formatting substitutions object\n * @param {?(AllSubstitutionCallback|AllSubstitutionCallback[])} [cfg.allSubstitutions] The\n *   callback or array composed thereof for applying to each substitution.\n * @param {string} locale The successfully resolved locale\n * @param {Integer} [maximumLocalNestingDepth=3] Depth of local variable resolution to\n *   check before reporting a recursion error\n * @param {MissingSuppliedFormattersCallback} [cfg.missingSuppliedFormatters] Callback\n *   supplied key to throw if the supplied key is present (if\n *   `throwOnMissingSuppliedFormatters` is enabled). Defaults to no-op.\n * @param {CheckExtraSuppliedFormattersCallback} [cfg.checkExtraSuppliedFormatters] No\n *   argument callback to check if any formatters are not present in `string`\n *   (if `throwOnExtraSuppliedFormatters` is enabled). Defaults to no-op.\n * @returns {string|Array<Node|string>}\n */\n\n/**\n * @type {InsertNodesCallback}\n */\nexport const defaultInsertNodes = ({\n  /* eslint-enable max-len */\n  string, dom, usedKeys, substitutions, allSubstitutions, locale,\n  locals, switches,\n  maximumLocalNestingDepth = 3,\n  missingSuppliedFormatters,\n  checkExtraSuppliedFormatters\n}) => {\n  if (typeof maximumLocalNestingDepth !== 'number') {\n    throw new TypeError('`maximumLocalNestingDepth` must be a number.');\n  }\n\n  const addFunctionKeys = () => {\n    Object.entries(substitutions).forEach(([key, value]) => {\n      if (typeof value === 'function') {\n        usedKeys.push(key);\n      }\n    });\n  };\n  addFunctionKeys();\n\n  const localFormatter = new LocalFormatter(locals);\n  const regularFormatter = new RegularFormatter(substitutions);\n  const switchFormatter = new SwitchFormatter(switches, {substitutions});\n\n  // eslint-disable-next-line max-len\n  // eslint-disable-next-line prefer-named-capture-group, unicorn/no-unsafe-regex\n  const formattingRegex = /(\\\\*)\\{((?:[^}]|\\\\\\})*?)(?:(\\|)([^}]*))?\\}/gu;\n  if (allSubstitutions) {\n    allSubstitutions = Array.isArray(allSubstitutions)\n      ? allSubstitutions\n      : [allSubstitutions];\n  }\n\n  const getSubstitution = ({key, arg, substs}) => {\n    let substitution;\n    const isLocalKey = localFormatter.constructor.isMatchingKey(key);\n    if (isLocalKey) {\n      substitution = localFormatter.getSubstitution(key);\n    } else if (switchFormatter.constructor.isMatchingKey(key)) {\n      substitution = switchFormatter.getSubstitution(key, {\n        locale, usedKeys, arg,\n        missingSuppliedFormatters\n      });\n    } else {\n      substitution = substs[key];\n      if (typeof substitution === 'function') {\n        substitution = substitution({arg, key});\n      }\n    }\n    // Todo: Could support resolving locals within arguments\n    // Todo: Even for `null` `allSubstitutions`, we could have\n    //  a mode to throw for non-string/non-DOM (non-numbers?),\n    //  or whatever is not likely intended as a target for `toString()`.\n    if (allSubstitutions) {\n      substitution = allSubstitutions.reduce((subst, allSubst) => {\n        return allSubst({\n          value: subst, arg, key, locale\n        });\n      }, substitution);\n    } else if (arg && (/^(?:NUMBER|DATE(?:TIME|RANGE|TIMERANGE)?|REGION|LANGUAGE|SCRIPT|CURRENCY|RELATIVE|LIST)(?:\\||$)/u).test(arg)) {\n      substitution = defaultAllSubstitutions({\n        value: substitution, arg, key, locale\n      });\n    }\n    return substitution;\n  };\n\n  let recursiveLocalCount = 1;\n  const checkLocalVars = ({substitution, ky, arg, processSubsts}) => {\n    if (\n      typeof substitution === 'string' &&\n      substitution.includes('{')\n    ) {\n      if (recursiveLocalCount++ > maximumLocalNestingDepth) {\n        throw new TypeError('Too much recursion in local variables.');\n      }\n\n      if (localFormatter.constructor.isMatchingKey(ky)) {\n        let extraSubsts = substitutions;\n        let localFormatters;\n        if (arg) {\n          localFormatters = parseJSONExtra(arg);\n          extraSubsts = {\n            ...substitutions,\n            ...localFormatters\n          };\n        }\n        substitution = processSubsts({\n          str: substitution, substs: extraSubsts,\n          formatter: localFormatter\n        });\n        if (localFormatters) {\n          checkExtraSuppliedFormatters({substitutions: localFormatters});\n        }\n      } else if (switchFormatter.constructor.isMatchingKey(ky)) {\n        substitution = processSubsts({\n          str: substitution\n        });\n      }\n    }\n    return substitution;\n  };\n\n  // Give chance to avoid this block when known to contain DOM\n  if (!dom) {\n    // Run this block to optimize non-DOM substitutions\n    let returnsDOM = false;\n    const replace = ({\n      str, substs = substitutions,\n      formatter = regularFormatter\n    }) => {\n      return str.replace(formattingRegex, (_, esc, ky, pipe, arg) => {\n        if (esc.length % 2) {\n          return _;\n        }\n        if (missingSuppliedFormatters({\n          key: ky,\n          formatter\n        })) {\n          return _;\n        }\n        let substitution = getSubstitution({key: ky, arg, substs});\n\n        substitution = checkLocalVars({\n          substitution, ky, arg, processSubsts: replace\n        });\n\n        returnsDOM = returnsDOM ||\n          (substitution && typeof substitution === 'object' &&\n          'nodeType' in substitution);\n        usedKeys.push(ky);\n        return esc + substitution;\n      });\n    };\n    const ret = replace({str: string});\n    if (!returnsDOM) {\n      checkExtraSuppliedFormatters({substitutions});\n      usedKeys.length = 0;\n      addFunctionKeys();\n      return unescapeBackslashes(ret);\n    }\n    usedKeys.length = 0;\n    addFunctionKeys();\n  }\n\n  recursiveLocalCount = 1;\n  const processSubstitutions = ({\n    str, substs = substitutions, formatter = regularFormatter\n  }) => {\n    const nodes = [];\n\n    // Copy to ensure we are resetting index on each instance (manually\n    // resetting on `formattingRegex` is problematic with recursion that\n    // uses the same regex copy)\n    const regex = new RegExp(formattingRegex, 'gu');\n\n    const push = (...args) => {\n      nodes.push(...args);\n    };\n\n    processRegex(regex, str, {\n      extra: push,\n      onMatch (_, esc, ky, pipe, arg) {\n        if (missingSuppliedFormatters({\n          key: ky, formatter\n        })) {\n          push(_);\n        } else {\n          if (esc.length) {\n            push(esc);\n          }\n\n          let substitution = getSubstitution({key: ky, arg, substs});\n          substitution = checkLocalVars({\n            substitution, ky, arg, processSubsts: processSubstitutions\n          });\n          if (Array.isArray(substitution)) {\n            push(...substitution);\n          } else if (\n            // Clone so that multiple instances may be added (and no\n            // side effects to user code)\n            substitution && typeof substitution === 'object' &&\n            'nodeType' in substitution\n          ) {\n            push(substitution.cloneNode(true));\n          } else {\n            push(substitution);\n          }\n        }\n        usedKeys.push(ky);\n      }\n    });\n    return nodes;\n  };\n  const nodes = processSubstitutions({str: string});\n\n  checkExtraSuppliedFormatters({substitutions});\n  usedKeys.length = 0;\n  return nodes.map((node) => {\n    if (typeof node === 'string') {\n      return unescapeBackslashes(node);\n    }\n    return node;\n  });\n};\n","import {unescapeBackslashes, processRegex} from './utils.js';\n\n/**\n* @typedef {LocaleBody} LocalObject\n*/\n\n/**\n * May also contain language code and direction, translator name and\n * contact, etc., but no defaults currently apply besides reserving `locals`\n * @typedef {PlainObject} LocaleHead\n * @property {LocalObject} locals\n*/\n\n/**\n* @typedef {LocaleStringBodyObject|\n* PlainLocaleStringBodyObject|PlainObject} LocaleBody\n*/\n\n/**\n* @typedef {PlainObject} LocaleObject\n* @property {LocaleHead} [head]\n* @property {LocaleBody} body\n*/\n\n/**\n* @typedef {PlainObject} MessageStyleCallbackResult\n* @property {string} value Regardless of message style, will contain the\n*   string result\n* @property {LocaleStringSubObject} [info] Full info on the localized item\n*   (for rich message styles only)\n*/\n\n/**\n* @callback MessageStyleCallback\n* @param {LocaleObject} obj The exact\n*   format depends on the `cfg.defaults` of `i18n`\n* @param {string} key\n* @returns {false|MessageStyleCallbackResult} If `false`, will resort to default\n*/\n\n/* eslint-disable max-len */\n/**\n * @param {PlainObject} [cfg]\n * @param {\"richNested\"|\"rich\"|\"plain\"|MessageStyleCallback} [cfg.messageStyle=\"richNested\"]\n * @returns {MessageStyleCallback}\n */\nexport const getMessageForKeyByStyle = ({\n  /* eslint-enable max-len */\n  messageStyle = 'richNested'\n} = {}) => {\n  // Todo: Support `plainNested` style\n  return typeof messageStyle === 'function'\n    ? messageStyle\n    : (messageStyle === 'richNested'\n      ? (mainObj, key) => {\n        const obj = mainObj && typeof mainObj === 'object' && mainObj.body;\n        const keys = [];\n        // eslint-disable-next-line prefer-named-capture-group\n        const possiblyEscapedCharPattern = /(\\\\*)\\./gu;\n        const mergeWithPreviousOrStart = (val) => {\n          if (!keys.length) {\n            keys[0] = '';\n          }\n          keys[keys.length - 1] += val;\n        };\n        processRegex(possiblyEscapedCharPattern, key, {\n          // If odd, this is just an escaped dot, so merge content with\n          //   any previous\n          extra: mergeWithPreviousOrStart,\n          onMatch (_, esc) {\n            // If even, there are no backslashes, or they are just escaped\n            //  backslashes and not an escaped dot, so start anew, though\n            //  first merge any backslashes\n            mergeWithPreviousOrStart(esc);\n            keys.push('');\n          }\n        });\n        const keysUnescaped = keys.map((ky) => {\n          return unescapeBackslashes(ky);\n        });\n\n        let ret = false;\n        let currObj = obj;\n        keysUnescaped.some((ky, i, kys) => {\n          if (!currObj || typeof currObj !== 'object') {\n            return true;\n          }\n          if (\n            // If specified key is too deep, we should fail\n            i === kys.length - 1 &&\n            ky in currObj && currObj[ky] && typeof currObj[ky] === 'object' &&\n            'message' in currObj[ky] &&\n            // NECESSARY FOR SECURITY ON UNTRUSTED LOCALES\n            typeof currObj[ky].message === 'string'\n          ) {\n            ret = {\n              value: currObj[ky].message,\n              info: currObj[ky]\n            };\n          }\n          currObj = currObj[ky];\n\n          return false;\n        });\n        return ret;\n      }\n      : (messageStyle === 'rich'\n        ? (mainObj, key) => {\n          const obj = mainObj && typeof mainObj === 'object' && mainObj.body;\n          if (\n            obj && typeof obj === 'object' &&\n            key in obj && obj[key] && typeof obj[key] === 'object' &&\n            'message' in obj[key] &&\n            // NECESSARY FOR SECURITY ON UNTRUSTED LOCALES\n            typeof obj[key].message === 'string'\n          ) {\n            return {\n              value: obj[key].message,\n              info: obj[key]\n            };\n          }\n          return false;\n        }\n        : (messageStyle === 'plain'\n          ? (mainObj, key) => {\n            const obj = mainObj && typeof mainObj === 'object' && mainObj.body;\n            if (\n              obj && typeof obj === 'object' &&\n              key in obj && obj[key] && typeof obj[key] === 'string'\n            ) {\n              return {\n                value: obj[key]\n              };\n            }\n            return false;\n          }\n          : (() => {\n            throw new TypeError(`Unknown \\`messageStyle\\` ${messageStyle}`);\n          })())\n      )\n    );\n};\n","import {getMessageForKeyByStyle} from './getMessageForKeyByStyle.js';\n\n/* eslint-disable max-len */\n/**\n * @param {PlainObject} cfg\n * @param {string} [cfg.message] If present, this string will be the return value.\n * @param {false|null|undefined|LocaleObject} [cfg.defaults]\n * @param {\"richNested\"|\"rich\"|\"plain\"|MessageStyleCallback} [cfg.messageStyle=\"richNested\"]\n * @param {MessageStyleCallback} [cfg.messageForKey] Defaults to getting `MessageStyleCallback` based on `messageStyle`\n * @param {string} cfg.key Key to check against object of strings; used to find a default if no string `message` is provided.\n * @returns {string}\n */\nexport const getStringFromMessageAndDefaults = ({\n  /* eslint-enable max-len */\n  message,\n  defaults,\n  messageStyle,\n  messageForKey = getMessageForKeyByStyle({messageStyle}),\n  key\n} = {}) => {\n  if (typeof key !== 'string') {\n    throw new TypeError(\n      'An options object with a `key` string is expected on ' +\n      '`getStringFromMessageAndDefaults`'\n    );\n  }\n  // NECESSARY CHECK FOR SECURITY ON UNTRUSTED LOCALES\n  let str;\n  if (typeof message === 'string') {\n    str = message;\n  } else if (\n    defaults === false || defaults === undefined || defaults === null\n  ) {\n    str = false;\n  } else if (defaults && typeof defaults === 'object') {\n    str = messageForKey({body: defaults}, key);\n    if (str) {\n      str = str.value;\n    }\n  } else {\n    throw new TypeError(\n      `Default locale strings must resolve to \\`false\\`, ` +\n      `nullish, or an object!`\n    );\n  }\n  if (str === false) {\n    throw new Error(`Key value not found for key: (${key})`);\n  }\n  return str;\n};\n","import {defaultAllSubstitutions} from './defaultAllSubstitutions.js';\nimport {defaultInsertNodes} from './defaultInsertNodes.js';\nimport {getDocument} from './shared.js';\n\nexport {setDocument, getDocument} from './shared.js';\n\n/* eslint-disable max-len */\n/**\n *\n * @param {PlainObject} cfg\n * @param {string} cfg.string\n * @param {string} cfg.locale The (possibly already resolved) locale for use by\n *   configuring formatters\n * @param {LocalObject} [cfg.locals]\n * @param {LocalObject} [cfg.switches]\n * @param {Integer} [cfg.maximumLocalNestingDepth=3]\n * @param {?(AllSubstitutionCallback|AllSubstitutionCallback[])} [cfg.allSubstitutions=[defaultAllSubstitutions]]\n * @param {InsertNodesCallback} [cfg.insertNodes=defaultInsertNodes]\n * @param {false|SubstitutionObject} [cfg.substitutions=false]\n * @param {boolean} [cfg.dom=false]\n * @param {boolean} [cfg.forceNodeReturn=false]\n * @param {boolean} [cfg.throwOnMissingSuppliedFormatters=true]\n * @param {boolean} [cfg.throwOnExtraSuppliedFormatters=true]\n * @returns {string|DocumentFragment}\n */\nexport const getDOMForLocaleString = ({\n  /* eslint-enable max-len */\n  string,\n  locale,\n  locals,\n  switches,\n  maximumLocalNestingDepth,\n  allSubstitutions = [\n    defaultAllSubstitutions\n  ],\n  insertNodes = defaultInsertNodes,\n  substitutions = false,\n  dom = false,\n  forceNodeReturn = false,\n  throwOnMissingSuppliedFormatters = true,\n  throwOnExtraSuppliedFormatters = true\n} = {}) => {\n  if (typeof string !== 'string') {\n    throw new TypeError(\n      'An options object with a `string` property set to a string must ' +\n      'be provided for `getDOMForLocaleString`.'\n    );\n  }\n  const stringOrTextNode = (str) => {\n    const _doc = getDocument();\n    return forceNodeReturn ? _doc.createTextNode(str) : str;\n  };\n\n  const usedKeys = [];\n\n  /**\n  * @callback CheckExtraSuppliedFormattersCallback\n  * @param {SubstitutionObject} substs\n  * @throws {Error} Upon an extra formatting key being found\n  * @returns {void}\n  */\n\n  /**\n   * @type {CheckExtraSuppliedFormattersCallback}\n   */\n  const checkExtraSuppliedFormatters = ({\n    substitutions: substs\n  }) => {\n    if (throwOnExtraSuppliedFormatters) {\n      Object.keys(substs).forEach((key) => {\n        if (!usedKeys.includes(key)) {\n          throw new Error(`Extra formatting key: ${key}`);\n        }\n      });\n    }\n  };\n\n  /**\n  * @callback MissingSuppliedFormattersCallback\n  * @param {string} key\n  * @param {SubstitutionObject} substs\n  * @throws {Error} If missing formatting key\n  * @returns {boolean}\n  */\n  /**\n   * @type {MissingSuppliedFormattersCallback}\n   */\n  const missingSuppliedFormatters = ({\n    key, formatter\n  }) => {\n    const matching = formatter.isMatch(key);\n    if (formatter.constructor.isMatchingKey(key) && !matching) {\n      if (throwOnMissingSuppliedFormatters) {\n        throw new Error(`Missing formatting key: ${key}`);\n      }\n      return true;\n    }\n    return false;\n  };\n\n  if (\n    !substitutions && !allSubstitutions &&\n    !throwOnMissingSuppliedFormatters\n  ) {\n    return stringOrTextNode(string);\n  }\n  if (!substitutions) {\n    substitutions = {};\n  }\n\n  const nodes = insertNodes({\n    string, dom, usedKeys, substitutions, allSubstitutions, locale,\n    locals, switches,\n    missingSuppliedFormatters,\n    checkExtraSuppliedFormatters\n  });\n  if (typeof nodes === 'string') {\n    return stringOrTextNode(nodes);\n  }\n\n  const _doc = getDocument();\n  const container = _doc.createDocumentFragment();\n  container.append(...nodes);\n\n  return container;\n};\n","/* globals intlDomLocale */\n\nimport {defaultLocaleResolver} from './defaultLocaleResolver.js';\nimport {promiseChainForValues} from './promiseChainForValues.js';\nimport {getFetch} from './shared.js';\n\nexport {setFetch, getFetch} from './shared.js';\n\n/**\n * Takes a locale and returns a new locale to check.\n * @callback LocaleMatcher\n * @param {string} locale The failed locale\n * @throws {Error} If there are no further hyphens left to check\n * @returns {string|Promise<string>} The new locale to check\n*/\n\n/**\n * @type {LocaleMatcher}\n */\nexport const defaultLocaleMatcher = (locale) => {\n  if (!locale.includes('-')) {\n    throw new Error('Locale not available');\n  }\n  // Try without hyphen, i.e., the \"lookup\" algorithm:\n  // See https://tools.ietf.org/html/rfc4647#section-3.4 and\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl\n  return locale.replace(/-[^-]*$/u, '');\n};\n\n/**\n * @param {PlainObject} cfg\n * @param {string} cfg.locale\n * @param {string[]} cfg.locales\n * @param {LocaleResolver} [cfg.localeResolver=defaultLocaleMatcher]\n * @returns {string|false}\n */\nexport const getMatchingLocale = ({\n  locale, locales, localeResolver = defaultLocaleMatcher\n}) => {\n  try {\n    while (!locales.includes(locale)) {\n      // Catch as `defaultLocaleMatcher` will throw if no hyphen found\n      locale = localeResolver(locale);\n    }\n  } catch (err) {\n    return false;\n  }\n  return locale;\n};\n\n/**\n* @typedef {PlainObject} LocaleObjectInfo\n* @property {LocaleObject} strings The successfully retrieved locale strings\n* @property {string} locale The successfully resolved locale\n*/\n\n/**\n * @callback LocaleStringFinder\n * @param {PlainObject} [cfg={}]\n * @param {string[]} [cfg.locales=navigator.languages] BCP-47 language strings\n * @param {string[]} [cfg.defaultLocales=[\"en-US\"]]\n * @param {string} [cfg.localesBasePath=\".\"]\n * @param {LocaleResolver} [cfg.localeResolver=defaultLocaleResolver]\n * @param {\"lookup\"|LocaleMatcher} [cfg.localeMatcher]\n * @returns {Promise<LocaleObjectInfo>}\n */\n\n/**\n *\n * @type {LocaleStringFinder}\n */\nexport const findLocaleStrings = ({\n  locales,\n  defaultLocales,\n  localeResolver,\n  localesBasePath,\n  localeMatcher\n} = {}) => {\n  return _findLocale({\n    locales, defaultLocales, localeResolver, localesBasePath, localeMatcher\n  });\n};\n\n/**\n * @callback LocaleFinder\n * @param {PlainObject} [cfg={}]\n * @param {string[]} [cfg.locales=navigator.languages] BCP-47 language strings\n * @param {string[]} [cfg.defaultLocales=[\"en-US\"]]\n * @param {string} [cfg.localesBasePath=\".\"]\n * @param {LocaleResolver} [cfg.localeResolver=defaultLocaleResolver]\n * @param {\"lookup\"|LocaleMatcher} [cfg.localeMatcher]\n * @returns {Promise<string>} Resolves to the successfully resolved locale\n */\n\n/**\n *\n * @type {LocaleFinder}\n */\nexport const findLocale = ({\n  locales,\n  defaultLocales,\n  localeResolver,\n  localesBasePath,\n  localeMatcher\n} = {}) => {\n  return _findLocale({\n    locales, defaultLocales, localeResolver, localesBasePath, localeMatcher,\n    headOnly: true\n  });\n};\n\n/**\n * @type {LocaleStringFinder|LocaleFinder} Also has a `headOnly` boolean\n *  property to determine whether to make a simple HEAD and resolve to\n *  the locale rather than locale and contents\n */\nconst _findLocale = async ({\n  locales = typeof intlDomLocale !== 'undefined'\n    ? [intlDomLocale]\n    : typeof navigator === 'undefined' ? [] : navigator.languages,\n  defaultLocales = ['en-US'],\n  localeResolver = defaultLocaleResolver,\n  localesBasePath = '.',\n  localeMatcher = 'lookup',\n  headOnly = false\n}) => {\n  /**\n   * @callback getLocale\n   * @throws {SyntaxError|TypeError|Error}\n   * @param {string} locale\n   * @returns {Promise<LocaleObjectInfo>}\n   */\n  async function getLocale (locale) {\n    if (typeof locale !== 'string') {\n      throw new TypeError('Non-string locale type');\n    }\n    const url = localeResolver(localesBasePath, locale);\n    if (typeof url !== 'string') {\n      throw new TypeError(\n        '`localeResolver` expected to resolve to (URL) string.'\n      );\n    }\n    try {\n      const _fetch = getFetch();\n      const resp = await (headOnly\n        ? _fetch(url, {\n          method: 'HEAD'\n        })\n        : _fetch(url)\n      );\n\n      if (resp.status === 404) {\n        // Don't allow browser (tested in Firefox) to continue\n        //  and give `SyntaxError` with missing file or we won't be\n        //  able to try without the hyphen\n        throw new Error('Trying again');\n      }\n      if (headOnly) {\n        return locale;\n      }\n      const strings = await (resp.json());\n      return {\n        locale,\n        strings\n      };\n    } catch (err) {\n      if (err.name === 'SyntaxError') {\n        throw err;\n      }\n      const newLocale = await localeMatcher(locale);\n      return getLocale(newLocale);\n    }\n  }\n  if (localeMatcher === 'lookup') {\n    localeMatcher = defaultLocaleMatcher;\n  } else if (typeof localeMatcher !== 'function') {\n    throw new TypeError('`localeMatcher` must be \"lookup\" or a function!');\n  }\n  return await promiseChainForValues(\n    [...locales, ...defaultLocales],\n    getLocale,\n    'No matching locale found!'\n  );\n};\n","import {getMessageForKeyByStyle} from './getMessageForKeyByStyle.js';\nimport {findLocaleStrings} from './findLocaleStrings.js';\nimport {getDOMForLocaleString} from './getDOMForLocaleString.js';\nimport {\n  getStringFromMessageAndDefaults\n} from './getStringFromMessageAndDefaults.js';\nimport {sort, sortList, list} from './collation.js';\n\n/**\n * Checks a key (against an object of strings). Optionally\n *  accepts an object of substitutions which are used when finding text\n *  within curly brackets (pipe symbol not allowed in its keys); the\n *  substitutions may be DOM elements as well as strings and may be\n *  functions which return the same (being provided the text after the\n *  pipe within brackets as the single argument).) Optionally accepts a\n *  config object, with the optional key \"dom\" which if set to `true`\n *  optimizes when DOM elements are (known to be) present.\n * @callback I18NCallback\n * @param {string} key Key to check against object of strings\n * @param {false|SubstitutionObject} [substitutions=false]\n * @param {PlainObject} [cfg={}]\n * @param {boolean} [cfg.dom=false]\n * @returns {string|DocumentFragment}\n*/\n\n/* eslint-disable max-len */\n/**\n * @param {PlainObject} cfg\n * @param {LocaleObject} cfg.strings\n * @param {string} cfg.resolvedLocale\n * @param {\"richNested\"|\"rich\"|\"plain\"|MessageStyleCallback} [cfg.messageStyle=\"richNested\"]\n * @param {?AllSubstitutionCallback|AllSubstitutionCallback[]} [cfg.allSubstitutions]\n * @param {InsertNodesCallback} [cfg.insertNodes=defaultInsertNodes]\n * @param {false|null|undefined|LocaleObject} [cfg.defaults]\n * @param {false|SubstitutionObject} [cfg.substitutions={}]\n * @param {Integer} [cfg.maximumLocalNestingDepth=3]\n * @param {boolean} [cfg.dom=false]\n * @param {boolean} [cfg.forceNodeReturn=false]\n * @param {boolean} [cfg.throwOnMissingSuppliedFormatters=true]\n * @param {boolean} [cfg.throwOnExtraSuppliedFormatters=true]\n * @returns {Promise<I18NCallback>} Rejects if no suitable locale is found.\n */\nexport const i18nServer = function i18nServer ({\n  /* eslint-enable max-len */\n  strings,\n  resolvedLocale,\n  messageStyle,\n  allSubstitutions: defaultAllSubstitutionsValue,\n  insertNodes,\n  defaults: defaultDefaults,\n  substitutions: defaultSubstitutions,\n  maximumLocalNestingDepth,\n  dom: domDefaults = false,\n  forceNodeReturn: forceNodeReturnDefault = false,\n  throwOnMissingSuppliedFormatters:\n    throwOnMissingSuppliedFormattersDefault = true,\n  throwOnExtraSuppliedFormatters:\n    throwOnExtraSuppliedFormattersDefault = true\n}) {\n  if (!strings || typeof strings !== 'object') {\n    throw new TypeError(`Locale strings must be an object!`);\n  }\n  const messageForKey = getMessageForKeyByStyle({messageStyle});\n  const formatter = (key, substitutions, {\n    allSubstitutions = defaultAllSubstitutionsValue,\n    defaults = defaultDefaults,\n    dom = domDefaults,\n    forceNodeReturn = forceNodeReturnDefault,\n    throwOnMissingSuppliedFormatters = throwOnMissingSuppliedFormattersDefault,\n    throwOnExtraSuppliedFormatters = throwOnExtraSuppliedFormattersDefault\n  } = {}) => {\n    const message = messageForKey(strings, key);\n    const string = getStringFromMessageAndDefaults({\n      message: message && typeof message.value === 'string'\n        ? message.value\n        : false,\n      defaults,\n      messageForKey,\n      key\n    });\n\n    return getDOMForLocaleString({\n      string,\n      locals: strings.head && strings.head.locals,\n      switches: strings.head && strings.head.switches,\n      locale: resolvedLocale,\n      maximumLocalNestingDepth,\n      allSubstitutions,\n      insertNodes,\n      substitutions: {...defaultSubstitutions, ...substitutions},\n      dom,\n      forceNodeReturn,\n      throwOnMissingSuppliedFormatters,\n      throwOnExtraSuppliedFormatters\n    });\n  };\n\n  formatter.resolvedLocale = resolvedLocale;\n  formatter.strings = strings;\n\n  formatter.sort = (...args) => {\n    return sort(resolvedLocale, ...args);\n  };\n\n  formatter.sortList = (...args) => {\n    return sortList(\n      resolvedLocale, ...args\n    );\n  };\n\n  formatter.list = (...args) => {\n    return list(\n      resolvedLocale, ...args\n    );\n  };\n\n  return formatter;\n};\n\n/* eslint-disable max-len */\n/**\n * @param {PlainObject} [cfg={}]\n * @param {string[]} [cfg.locales=navigator.languages] BCP-47 language strings\n * @param {string[]} [cfg.defaultLocales=[\"en-US\"]]\n * @param {LocaleStringFinder} [cfg.localeStringFinder=findLocaleStrings]\n * @param {string} [cfg.localesBasePath=\".\"]\n * @param {LocaleResolver} [cfg.localeResolver=defaultLocaleResolver]\n * @param {\"lookup\"|LocaleMatcher} [cfg.localeMatcher=\"lookup\"]\n * @param {\"richNested\"|\"rich\"|\"plain\"|MessageStyleCallback} [cfg.messageStyle=\"richNested\"]\n * @param {?AllSubstitutionCallback|AllSubstitutionCallback[]} [cfg.allSubstitutions]\n * @param {InsertNodesCallback} [cfg.insertNodes=defaultInsertNodes]\n * @param {false|null|undefined|LocaleObject} [cfg.defaults]\n * @param {false|SubstitutionObject} [cfg.substitutions={}]\n * @param {Integer} [cfg.maximumLocalNestingDepth=3]\n * @param {boolean} [cfg.dom=false]\n * @param {boolean} [cfg.forceNodeReturn=false]\n * @param {boolean} [cfg.throwOnMissingSuppliedFormatters=true]\n * @param {boolean} [cfg.throwOnExtraSuppliedFormatters=true]\n * @returns {Promise<I18NCallback>} Rejects if no suitable locale is found.\n */\nexport const i18n = async function i18n ({\n  /* eslint-enable max-len */\n  locales,\n  defaultLocales,\n  localeStringFinder = findLocaleStrings,\n  localesBasePath,\n  localeResolver,\n  localeMatcher,\n  messageStyle,\n  allSubstitutions,\n  insertNodes,\n  defaults,\n  substitutions,\n  maximumLocalNestingDepth,\n  dom,\n  forceNodeReturn,\n  throwOnMissingSuppliedFormatters,\n  throwOnExtraSuppliedFormatters\n} = {}) {\n  const {strings, locale: resolvedLocale} = await localeStringFinder({\n    locales, defaultLocales, localeResolver, localesBasePath, localeMatcher\n  });\n\n  return i18nServer({\n    strings,\n    resolvedLocale,\n    messageStyle,\n    allSubstitutions,\n    insertNodes,\n    defaults,\n    substitutions,\n    maximumLocalNestingDepth,\n    dom,\n    forceNodeReturn,\n    throwOnMissingSuppliedFormatters,\n    throwOnExtraSuppliedFormatters\n  });\n};\n"],"names":["_jsonExtra","globalThis","jsonExtra","setJSONExtra","__jsonExtra","unescapeBackslashes","str","replace","esc","slice","length","parseJSONExtra","args","parse","processRegex","regex","_ref","match","onMatch","extra","betweenMatches","afterMatch","escapeAtOne","previousIndex","exec","_match2","_slicedToArray","_","lastIndex","startMatchPos","apply","_fetch","fetch","setFetch","f","getFetch","_doc","document","setDocument","doc","getDocument","sort","locale","arrayOfItems","options","Intl","Collator","compare","list","ListFormat","format","sortList","map","listOptions","collationOptions","sortListSimple","d","randomId","Date","now","performance","c","r","Math","trunc","random","floor","toString","placeholderArray","_toConsumableArray","i","nodes","push","arguments","RegExp","concat","idx","container","createDocumentFragment","append","getFormatterInfo","object","Array","isArray","_object","value","callback","extraOpts","_object2","defaultAllSubstitutions","_ref2","_Intl$DateTimeFormat","arg","key","opts","_typeof","applyArgs","_ref3","type","_ref3$options","_ref3$checkArgOptions","checkArgOptions","_arg$split2","split","userType","extraArgs","argOptions","expectsDatetime","singleKey","Object","keys","includes","_getFormatterInfo","DateTimeFormat","formatRange","val","DisplayNames","_objectSpread","toUpperCase","of","_ref4","RelativeTimeFormat","test","getTime","_Intl$DateTimeFormat2","NumberFormat","TypeError","Formatter","_createClass","_classCallCheck","this","getSubstitution","body","_ref$messageStyle","messageStyle","substitution","getMessageForKeyByStyle","messageForKey","Error","LocalFormatter","_Formatter","_inherits","_super","_createSuper","locals","_this","call","components","parent","constructor","isMatchingKey","every","cmpt","result","startsWith","RegularFormatter","_Formatter2","_super2","substitutions","_this2","SwitchFormatter","_Formatter3","_super3","switches","_this3","usedKeys","missingSuppliedFormatters","ky","getKey","_this$getMatch2","getMatch","objKey","keySegment","_objKey$split2","formatter","getNumberFormat","defaultOptions","numberOpts","getPluralFormat","pluralOpts","PluralRules","select","formatterValue","toLowerCase","preventNesting","s","err","error","k","find","switchKey","Boolean","_this4","ks","reduce","obj","ret","entries","_await","then","direct","Promise","resolve","recover","e","_settle","pact","state","o","bind","v","observer","_Pact","prototype","onFulfilled","onRejected","_isSettledPact","thenable","_for","update","stage","shouldContinue","updateValue","reject","_resumeAfterTest","_resumeAfterBody","_resumeAfterUpdate","_async","promiseChainForValues","values","errBack","errorMessage","breaking","_interrupt","p","_continue","shift","_catch","_p","_result2","defaultLocaleResolver","localesBasePath","defaultInsertNodes","string","dom","allSubstitutions","_ref$maximumLocalNest","maximumLocalNestingDepth","checkExtraSuppliedFormatters","addFunctionKeys","forEach","localFormatter","regularFormatter","switchFormatter","formattingRegex","substs","subst","allSubst","recursiveLocalCount","checkLocalVars","_ref5","processSubsts","localFormatters","extraSubsts","returnsDOM","_ref6","_ref6$substs","_ref6$formatter","pipe","processSubstitutions","_ref7","_ref7$substs","_ref7$formatter","cloneNode","node","undefined","mainObj","mergeWithPreviousOrStart","keysUnescaped","currObj","some","kys","message","info","getStringFromMessageAndDefaults","defaults","_ref$messageForKey","getDOMForLocaleString","_ref$allSubstitutions","_ref$insertNodes","insertNodes","_ref$substitutions","_ref$dom","_ref$forceNodeReturn","forceNodeReturn","_ref$throwOnMissingSu","throwOnMissingSuppliedFormatters","_ref$throwOnExtraSupp","throwOnExtraSuppliedFormatters","stringOrTextNode","createTextNode","matching","isMatch","defaultLocaleMatcher","getMatchingLocale","locales","_ref$localeResolver","localeResolver","findLocaleStrings","defaultLocales","localeMatcher","_findLocale","findLocale","headOnly","getLocale","url","method","resp","status","json","strings","name","_ref4$locales","intlDomLocale","navigator","languages","_ref4$defaultLocales","_ref4$localeResolver","_ref4$localesBasePath","_ref4$localeMatcher","_ref4$headOnly","i18nServer","resolvedLocale","defaultAllSubstitutionsValue","defaultDefaults","defaultSubstitutions","domDefaults","forceNodeReturnDefault","throwOnMissingSuppliedFormattersDefault","throwOnExtraSuppliedFormattersDefault","_ref2$allSubstitution","_ref2$defaults","_ref2$dom","_ref2$forceNodeReturn","_ref2$throwOnMissingS","_ref2$throwOnExtraSup","head","_len","_key","_len2","_key2","_len3","_key3","i18n","_ref3$localeStringFin","localeStringFinder"],"mappings":"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"}