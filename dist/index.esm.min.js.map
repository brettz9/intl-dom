{"version":3,"file":"index.esm.min.js","sources":["../src/utils.js","../src/shared.js","../src/collation.js","../src/defaultAllSubstitutions.js","../src/Formatter.js","../src/promiseChainForValues.js","../src/defaultLocaleResolver.js","../src/defaultInsertNodes.js","../src/getMessageForKeyByStyle.js","../src/getStringFromMessageAndDefaults.js","../src/getDOMForLocaleString.js","../src/findLocaleStrings.js","../src/i18n.js"],"sourcesContent":["// We want it to work in the browser, so commenting out\n// import jsonExtra from 'json5';\n// import jsonExtra from 'json-6';\n\nlet _jsonExtra = globalThis.jsonExtra;\nexport const setJSONExtra = (__jsonExtra) => {\n  _jsonExtra = __jsonExtra;\n};\n\nexport const unescapeBackslashes = (str) => {\n  return str.replace(/\\\\+/gu, (esc) => {\n    return esc.slice(0, esc.length / 2);\n  });\n};\n\nexport const parseJSONExtra = (args) => {\n  return _jsonExtra.parse(\n    // Doesn't actually currently allow explicit brackets,\n    //  but in case we change our regex to allow inner brackets\n    '{' + (args || '').replace(/^\\{/u, '').replace(/\\}$/u, '') + '}'\n  );\n};\n\n// Todo: Extract to own library (RegExtras?)\nexport const processRegex = (regex, str, {\n  onMatch,\n  extra,\n  betweenMatches,\n  afterMatch,\n  escapeAtOne\n}) => {\n  let match;\n  let previousIndex = 0;\n  if (extra) {\n    betweenMatches = extra;\n    afterMatch = extra;\n    escapeAtOne = extra;\n  }\n  while ((match = regex.exec(str)) !== null) {\n    const [_, esc] = match;\n    const {lastIndex} = regex;\n\n    const startMatchPos = lastIndex - _.length;\n    if (startMatchPos > previousIndex) {\n      betweenMatches(str.slice(previousIndex, startMatchPos));\n    }\n\n    if (escapeAtOne && esc.length % 2) {\n      previousIndex = lastIndex;\n      escapeAtOne(_);\n      continue;\n    }\n    onMatch(...match);\n    previousIndex = lastIndex;\n  }\n  if (previousIndex !== str.length) { // Get text at end\n    afterMatch(str.slice(previousIndex));\n  }\n};\n","/* globals fetch, document */\nlet _fetch = typeof fetch !== 'undefined'\n  // istanbul ignore next\n  ? fetch\n  : null;\n\n/**\n * @param {fetch} f\n * @returns {void}\n */\nexport const setFetch = (f) => {\n  _fetch = f;\n};\n\n/**\n * @returns {fetch}\n */\nexport const getFetch = () => {\n  return _fetch;\n};\n\nlet _doc = typeof document !== 'undefined'\n  // istanbul ignore next\n  ? document\n  : null;\n\n/**\n * @param {document} doc\n * @returns {void}\n */\nexport const setDocument = (doc) => {\n  _doc = doc;\n};\n\n/**\n * @returns {document}\n */\nexport const getDocument = () => {\n  return _doc;\n};\n","/* globals performance */\nimport {processRegex} from './utils.js';\nimport {getDocument} from './shared.js';\n\nexport {setDocument, getDocument} from './shared.js';\n\n/**\n *\n * @returns {string}\n */\nfunction generateUUID () { //  Adapted from original: public domain/MIT: http://stackoverflow.com/a/8809472/271577\n  let d = Date.now();\n  /* istanbul ignore next */\n  if (typeof performance !== 'undefined' &&\n      typeof performance.now === 'function'\n  ) {\n    d += performance.now(); // use high-precision timer if available\n  }\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/gu, function (c) {\n    /* eslint-disable no-bitwise */\n    const r = Math.trunc((d + Math.random() * 16) % 16);\n    d = Math.floor(d / 16);\n    return (c === 'x' ? r : (r & 0x3 | 0x8)).toString(16);\n    /* eslint-enable no-bitwise */\n  });\n}\n\nexport const sort = (locale, arrayOfItems, options) => {\n  return arrayOfItems.sort(new Intl.Collator(\n    locale,\n    options\n  ).compare);\n};\n\nexport const list = (locale, arrayOfItems, options) => {\n  return new Intl.ListFormat(\n    locale, options\n  ).format(arrayOfItems);\n};\n\nexport const sortListSimple = (\n  locale, arrayOfItems, listOptions, collationOptions\n) => {\n  sort(locale, arrayOfItems, collationOptions);\n  return list(locale, arrayOfItems, listOptions);\n};\n\nexport const sortList = (\n  locale, arrayOfItems, map, listOptions, collationOptions\n) => {\n  if (typeof map !== 'function') {\n    return sortListSimple(locale, arrayOfItems, map, listOptions);\n  }\n  sort(locale, arrayOfItems, collationOptions);\n\n  const randomId = generateUUID();\n\n  const placeholderArray = [...arrayOfItems].map(\n    (_, i) => `<<${randomId}${i}>>`\n  );\n  const nodes = [];\n  const push = (...args) => {\n    nodes.push(...args);\n  };\n\n  processRegex(\n    // // eslint-disable-next-line prefer-named-capture-group\n    new RegExp(`<<${randomId}(\\\\d)>>`, 'gu'),\n    list(locale, placeholderArray, listOptions), {\n      betweenMatches: push,\n      afterMatch: push,\n      onMatch (_, idx) {\n        push(map(arrayOfItems[idx], idx));\n      }\n    }\n  );\n  const _doc = getDocument();\n  const container = _doc.createDocumentFragment();\n  container.append(...nodes);\n  return container;\n};\n","import {parseJSONExtra} from './utils.js';\nimport {sortList} from './collation.js';\n\nexport const getFormatterInfo = ({object}) => {\n  if (Array.isArray(object)) {\n    if (typeof object[1] === 'function') {\n      const [value, callback, options, extraOpts] = object;\n      return {value, callback, options, extraOpts};\n    }\n    const [value, options, extraOpts] = object;\n    return {value, options, extraOpts};\n  }\n  return {value: object};\n};\n\n/* eslint-disable max-len */\n/**\n * Callback to give replacement text based on a substitution value.\n * @callback AllSubstitutionCallback\n * @param {PlainObject} cfg\n * @param {string|Node|number|Date|RelativeTimeInfo|ListInfo|NumberInfo|DateInfo} cfg.value Contains\n *   the value returned by the individual substitution\n * @param {string} cfg.arg See `cfg.arg` of {@link SubstitutionCallback}.\n * @param {string} cfg.key The substitution key Not currently in use\n * @param {string} cfg.locale The locale\n * @returns {string|Element} The replacement text or element\n*/\n/* eslint-enable max-len */\n\n/**\n * @type {AllSubstitutionCallback}\n */\nexport const defaultAllSubstitutions = ({value, arg, key, locale}) => {\n  // Strings or DOM Nodes\n  if (\n    typeof value === 'string' || (value && typeof value === 'object' &&\n    'nodeType' in value)\n  ) {\n    return value;\n  }\n\n  let opts;\n\n  const applyArgs = ({type, options = opts, checkArgOptions = false}) => {\n    if (typeof arg === 'string') {\n      let [userType, extraArgs, argOptions] = arg.split('|');\n      // Alias\n      if (userType === 'DATE') {\n        userType = 'DATETIME';\n      }\n      if (userType === type) {\n        if (!extraArgs) {\n          options = {};\n        } else if (!checkArgOptions || argOptions) {\n          // Todo: Allow escaping and restoring of pipe symbol\n          options = {\n            ...options,\n            ...parseJSONExtra(\n              checkArgOptions && argOptions ? argOptions : extraArgs\n            )\n          };\n        }\n      }\n    }\n    return options;\n  };\n\n  if (value && typeof value === 'object' && !Array.isArray(value)) {\n    const singleKey = Object.keys(value)[0];\n    if ([\n      'number', 'date', 'datetime', 'dateRange', 'datetimeRange', 'relative',\n      'region', 'language', 'script', 'currency',\n      'list', 'plural'\n    ].includes(singleKey)) {\n      let extraOpts, callback;\n      ({\n        value, options: opts, extraOpts, callback\n      } = getFormatterInfo({object: value[singleKey]}));\n\n      switch (singleKey) {\n      case 'dateRange': case 'datetimeRange':\n        return new Intl.DateTimeFormat(\n          locale,\n          applyArgs({type: 'DATERANGE', options: extraOpts})\n        ).formatRange(value, opts);\n      case 'region': case 'language': case 'script': case 'currency':\n        return new Intl.DisplayNames(\n          locale, {\n            ...applyArgs({type: singleKey.toUpperCase()}),\n            type: singleKey\n          }\n        ).of(value);\n      case 'relative':\n        // The second argument actually contains the primary options, so swap\n        [extraOpts, opts] = [opts, extraOpts];\n        return new Intl.RelativeTimeFormat(\n          locale, applyArgs({type: 'RELATIVE'})\n        ).format(value, extraOpts);\n\n      // ListFormat (with Collator)\n      case 'list':\n        if (callback) {\n          return sortList(\n            locale, value, callback,\n            applyArgs({type: 'LIST'}),\n            applyArgs({\n              type: 'LIST', options: extraOpts, checkArgOptions: true\n            })\n          );\n        }\n        return sortList(locale, value, applyArgs({type: 'LIST'}), applyArgs({\n          type: 'LIST', options: extraOpts, checkArgOptions: true\n        }));\n      default:\n        // Let `number` and `date` types drop through so their options\n        //  can be applied\n        // Let `plural` be treated as number (since value should be a number)\n        break;\n      }\n    }\n  }\n\n  // Numbers\n  if (typeof value === 'number') {\n    return new Intl.NumberFormat(\n      locale,\n      applyArgs({type: 'NUMBER'})\n    ).format(value);\n  }\n\n  // Dates\n  if (\n    value && typeof value === 'object' &&\n    typeof value.getTime === 'function'\n  ) {\n    return new Intl.DateTimeFormat(\n      locale,\n      applyArgs({type: 'DATETIME'})\n    ).format(value);\n  }\n\n  // Date range\n  if (Array.isArray(value)) {\n    const extraOpts = value[2];\n    return new Intl.DateTimeFormat(\n      locale,\n      applyArgs({type: 'DATERANGE', options: extraOpts})\n    ).formatRange(...value.slice(0, 2));\n  }\n\n  // console.log('value', value);\n  throw new TypeError('Unknown formatter');\n};\n","import {getMessageForKeyByStyle} from './index.js';\nimport {parseJSONExtra} from './utils.js';\nimport {getFormatterInfo} from './defaultAllSubstitutions.js';\n\n/**\n * Base class for formatting.\n */\nexport class Formatter {\n}\n\n/**\n * @param {PlainObject} cfg\n * @param {string} cfg.key\n * @param {LocaleBody} cfg.body\n * @param {string} cfg.type\n * @param {\"richNested\"|\"rich\"|\"plain\"|MessageStyleCallback} cfg.messageStyle\n * @returns {string|Element}\n */\nconst getSubstitution = ({key, body, type, messageStyle = 'richNested'}) => {\n  const messageForKey = getMessageForKeyByStyle({messageStyle});\n  const substitution = messageForKey({body}, key);\n  if (!substitution) {\n    throw new Error(`Key value not found for ${type} key: (${key})`);\n  }\n  // We don't allow a substitution function here or below as comes\n  //  from locale and locale content should not pose security concerns\n  return substitution.value;\n};\n\n/**\n * Formatter for local variables.\n */\nexport class LocalFormatter extends Formatter {\n  /**\n   * @param {LocalObject} locals\n   */\n  constructor (locals) {\n    super();\n    this.locals = locals;\n  }\n  /**\n   * @param {string} key\n   * @returns {string|Element}\n   */\n  getSubstitution (key) {\n    return getSubstitution({\n      key: key.slice(1), body: this.locals, type: 'local'\n    });\n  }\n  /**\n   * @param {string} key\n   * @returns {boolean}\n   */\n  isMatch (key) {\n    const components = key.slice(1).split('.');\n    let parent = this.locals;\n    return this.constructor.isMatchingKey(key) && components.every((cmpt) => {\n      const result = cmpt in parent;\n      parent = parent[cmpt];\n      return result;\n    });\n  }\n  /**\n   * @param {string} key\n   * @returns {boolean}\n   */\n  static isMatchingKey (key) {\n    return key.startsWith('-');\n  }\n}\n\n/**\n * Formatter for regular variables.\n */\nexport class RegularFormatter extends Formatter {\n  /**\n   * @param {SubstitutionObject} substitutions\n   */\n  constructor (substitutions) {\n    super();\n    this.substitutions = substitutions;\n  }\n  /**\n   * @param {string} key\n   * @returns {boolean}\n   */\n  isMatch (key) {\n    return this.constructor.isMatchingKey(key) && key in this.substitutions;\n  }\n  /**\n   * @param {string} key\n   * @returns {boolean}\n   */\n  static isMatchingKey (key) {\n    return (/^\\w/u).test(key);\n  }\n}\n\n/**\n * Formatter for switch variables.\n */\nexport class SwitchFormatter extends Formatter {\n  /**\n   * @param {Switches} switches\n   * @param {SubstitutionObject} substitutions\n   */\n  constructor (switches, {substitutions}) {\n    super();\n    this.switches = switches;\n    this.substitutions = substitutions;\n  }\n\n  /**\n   * @param {string} key\n   * @param {PlainObject} cfg\n   * @param {string} cfg.locale\n   * @param {string[]} cfg.usedKeys\n   * @param {string} cfg.arg\n   * @param {MissingSuppliedFormattersCallback} cfg.missingSuppliedFormatters\n   * @returns {string}\n   */\n  getSubstitution (key, {locale, usedKeys, arg, missingSuppliedFormatters}) {\n    const ky = this.constructor.getKey(key).slice(1);\n    // Expression might not actually use formatter, e.g., for singular,\n    //  the conditional might just write out \"one\"\n\n    const [objKey, body, keySegment] = this.getMatch(ky);\n    usedKeys.push(keySegment);\n\n    let type, opts;\n    if (objKey && objKey.includes('|')) {\n      [, type, opts] = objKey.split('|');\n    }\n    if (!body) {\n      missingSuppliedFormatters({\n        key,\n        formatter: this\n      });\n      return '\\\\{' + key + '}';\n    }\n\n    /*\n    if (!(ky in this.substitutions)) {\n      throw new Error(`Switch expecting formatter: ${ky}`);\n    }\n    */\n\n    const getNumberFormat = (value, defaultOptions) => {\n      const numberOpts = parseJSONExtra(opts);\n      return new Intl.NumberFormat(locale, {\n        ...defaultOptions, ...numberOpts\n      }).format(value);\n    };\n\n    const getPluralFormat = (value, defaultOptions) => {\n      const pluralOpts = parseJSONExtra(opts);\n      return new Intl.PluralRules(locale, {\n        ...defaultOptions, ...pluralOpts\n      }).select(value);\n    };\n\n    const formatterValue = this.substitutions[keySegment];\n\n    let match = formatterValue;\n    if (typeof formatterValue === 'number') {\n      switch (type) {\n      case 'NUMBER':\n        match = getNumberFormat(formatterValue);\n        break;\n      case 'PLURAL':\n        match = getPluralFormat(formatterValue);\n        break;\n      default:\n        match = new Intl.PluralRules(locale).select(formatterValue);\n        break;\n      }\n    } else if (formatterValue && typeof formatterValue === 'object') {\n      const singleKey = Object.keys(formatterValue)[0];\n      if (['number', 'plural'].includes(singleKey)) {\n        const {value, options} = getFormatterInfo({\n          object: formatterValue[singleKey]\n        });\n        if (!type) {\n          type = singleKey.toUpperCase();\n        }\n        const typeMatches = singleKey.toUpperCase() === type;\n        if (!typeMatches) {\n          throw new TypeError(\n            `Expecting type \"${\n              type.toLowerCase()\n            }\"; instead found \"${singleKey}\".`\n          );\n        }\n        // eslint-disable-next-line default-case\n        switch (type) {\n        case 'NUMBER':\n          match = getNumberFormat(value, options);\n          break;\n        case 'PLURAL':\n          match = getPluralFormat(value, options);\n          break;\n        }\n      }\n    }\n\n    // We do not want the default `richNested` here as that will split\n    //  up the likes of `0.0`\n    const messageStyle = 'richNested';\n\n    const preventNesting = (s) => {\n      return s.replace(/\\\\/gu, '\\\\\\\\').replace(/\\./gu, '\\\\.');\n    };\n\n    try {\n      return getSubstitution({\n        messageStyle,\n        key: match ? preventNesting(match) : arg,\n        body,\n        type: 'switch'\n      });\n    } catch (err) {\n      try {\n        return getSubstitution({\n          messageStyle, key: '*' + preventNesting(match), body, type: 'switch'\n        });\n      } catch (error) {\n        const k = Object.keys(body).find(\n          (switchKey) => switchKey.startsWith('*')\n        );\n        if (!k) {\n          throw new Error(`No defaults found for switch ${ky}`);\n        }\n        return getSubstitution({\n          messageStyle, key: preventNesting(k), body, type: 'switch'\n        });\n      }\n    }\n  }\n\n  /**\n   * @param {string} key\n   * @returns {boolean}\n   */\n  isMatch (key) {\n    return key && this.constructor.isMatchingKey(key) &&\n      Boolean(this.getMatch(key.slice(1)).length);\n  }\n\n  /**\n  * @typedef {GenericArray} SwitchMatch\n  * @property {string} 0 objKey\n  * @property {LocaleBody} 1 body\n  * @property {string} 2 keySegment\n  */\n\n  /**\n   * @param {string} ky\n   * @returns {SwitchMatch}\n   */\n  getMatch (ky) {\n    const ks = ky.split('.');\n    return ks.reduce((obj, k, i) => {\n      if (i < ks.length - 1) {\n        if (!(k in obj)) {\n          throw new Error(`Switch key \"${k}\" not found (from \"~${ky}\")`);\n        }\n        return obj[k];\n      }\n      // Todo: Should throw on encountering duplicate fundamental keys (even\n      //  if there are different arguments, that should not be allowed)\n      const ret = Object.entries(obj).find(([switchKey]) => {\n        return k === this.constructor.getKey(switchKey);\n      });\n\n      return ret ? [...ret, k] : [];\n    }, this.switches);\n  }\n\n  /**\n   * @param {string} key\n   * @returns {boolean}\n   */\n  static isMatchingKey (key) {\n    return key.startsWith('~');\n  }\n  /**\n   * @param {string} key\n   * @returns {string}\n   */\n  static getKey (key) {\n    const match = key.match(/^[^|]*/u);\n    return match && match[0];\n  }\n}\n","/**\n* @callback PromiseChainErrback\n* @param {any} errBack\n* @returns {Promise<any>|any}\n*/\n\n/**\n * The given array will have its items processed in series; if the supplied\n *  `errBack` (which is guaranteed to run at least once), when passed the\n *  current item, returns a `Promise` or value that resolves, that value will\n *  be used for the return result of this function and no other items in\n *  the array will continue to be processed; if it rejects, however, the\n *  next item will be processed with `errBack`.\n * Accept an array of values to pass to an errback which should return\n *  a promise (or final result value) which resolves to a result or which\n *  rejects so that the next item in the array can be checked in series.\n * @param {Array<any>} values Array of values\n * @param {PromiseChainErrback} errBack Accepts an item of the array as its\n *   single argument\n * @param {string} [errorMessage=\"Reached end of values array.\"]\n * @returns {Promise<any>} Either resolves to a value derived from an item in\n *  the array or rejects if all items reject\n * @example\npromiseChainForValues(['a', 'b', 'c'], (val) => {\n  return new Promise(function (resolve, reject) {\n    if (val === 'a') {\n      reject(new Error('missing'));\n    }\n    setTimeout(() => {\n      resolve(val);\n    }, 100);\n  });\n});\n */\nexport const promiseChainForValues = (\n  values, errBack, errorMessage = 'Reached end of values array.'\n) => {\n  if (!Array.isArray(values)) {\n    throw new TypeError(\n      'The `values` argument to `promiseChainForValues` must be an array.'\n    );\n  }\n  if (typeof errBack !== 'function') {\n    throw new TypeError(\n      'The `errBack` argument to `promiseChainForValues` must be a function.'\n    );\n  }\n  return (async () => {\n    let ret;\n    let p = Promise.reject(\n      new Error('Intentionally reject so as to begin checking chain')\n    );\n    let breaking;\n    while (true) {\n      const value = values.shift();\n      try {\n        // eslint-disable-next-line no-await-in-loop\n        ret = await p;\n        break;\n      } catch (err) {\n        if (breaking) {\n          throw new Error(errorMessage);\n        }\n        // We allow one more try\n        if (!values.length) {\n          breaking = true;\n        }\n        // // eslint-disable-next-line no-await-in-loop\n        p = errBack(value);\n      }\n    }\n    return ret;\n  })();\n};\n","/**\n* @callback SubstitutionCallback\n* @param {PlainObject} cfg\n* @param {string} cfg.arg By default, accepts the third portion of the\n*   `formattingRegex` within `insertNodes`, i.e., to allow the locale to\n*   supply arguments back to the calling script.\n* @param {string} cfg.key The substitution key\n* @returns {string|Element} The replacement text or element\n*/\n\n/**\n * May have additional properties if supplying options to an underlying\n * formatter.\n * @typedef {GenericArray} ValueArray\n * @property {string|Node|number|Date} 0 The main value\n * @property {PlainObject} [1] The options related to the main value\n * @property {PlainObject} [2] Any additional options\n*/\n\n/**\n* @typedef {PlainObject} RelativeTimeInfo\n* @property {ValueArray} relative\n*/\n\n/**\n* @typedef {PlainObject} ListInfo\n* @property {ValueArray} list\n*/\n\n/**\n* @typedef {PlainObject} NumberInfo\n* @property {ValueArray} number\n*/\n\n/**\n* @typedef {PlainObject} DateInfo\n* @property {ValueArray} date\n*/\n\n/**\n* @typedef {Object<string, string>} PlainLocaleStringBodyObject\n*/\n\n/**\n* @typedef {PlainObject} SwitchCaseInfo\n* @property {boolean} [default=false] Whether this conditional is the default\n*/\n\n/**\n* @typedef {GenericArray} SwitchCase\n* @property {string} 0 The type\n* @property {string} 1 The message\n* @property {SwitchCaseInfo} [2] Info about the switch case\n*/\n\n/**\n* @typedef {PlainObject<string, SwitchCase>} Switch\n*/\n\n/**\n* @typedef {PlainObject<{string, Switch}>} Switches\n*/\n\n/**\n* @typedef {PlainObject} LocaleStringSubObject\n* @property {string} [message] The locale message with any formatting\n*   place-holders; defaults to use of any single conditional\n* @property {string} [description] A description to add translators\n* @property {Switches} [switches] Conditionals\n*/\n\n/**\n* @typedef {PlainObject<string, LocaleStringSubObject>} LocaleStringBodyObject\n*/\n\n/**\n * Takes a base path and locale and gives a URL.\n * @callback LocaleResolver\n * @param {string} localesBasePath (Trailing slash optional)\n * @param {string} locale BCP-47 language string\n * @returns {string} URL of the locale file to be fetched\n*/\n\n/**\n* @typedef {PlainObject<string, string|Element|\n* SubstitutionCallback>} SubstitutionObject\n*/\n\n/**\n * @type {LocaleResolver}\n */\nexport const defaultLocaleResolver = (localesBasePath, locale) => {\n  if (typeof localesBasePath !== 'string') {\n    throw new TypeError(\n      '`defaultLocaleResolver` expects a string `localesBasePath`.'\n    );\n  }\n  if (typeof locale !== 'string') {\n    throw new TypeError(\n      '`defaultLocaleResolver` expects a string `locale`.'\n    );\n  }\n  if ((/[./\\\\]/u).test(locale)) {\n    throw new TypeError(\n      'Locales cannot use file-reserved characters, `.`, `/` or `\\\\`'\n    );\n  }\n  return `${localesBasePath.replace(/\\/$/u, '')}/_locales/${locale}/messages.json`;\n};\n","import {\n  LocalFormatter, RegularFormatter, SwitchFormatter\n} from './Formatter.js';\nimport {defaultAllSubstitutions} from './defaultAllSubstitutions.js';\nimport {unescapeBackslashes, parseJSONExtra, processRegex} from './utils.js';\n\n/* eslint-disable max-len */\n/**\n * Callback to return a string or array of nodes and strings based on a localized\n * string, substitutions object, and other metadata.\n * @callback InsertNodesCallback\n * @param {PlainObject} cfg\n * @param {string} cfg.string The localized string\n * @param {boolean} [cfg.dom] If substitutions known to contain DOM, can be set\n *   to `true` to optimize\n * @param {string[]} [cfg.usedKeys=[]] Array for tracking which keys have been used\n * @param {SubstitutionObject} cfg.substitutions The formatting substitutions object\n * @param {?(AllSubstitutionCallback|AllSubstitutionCallback[])} [cfg.allSubstitutions] The\n *   callback or array composed thereof for applying to each substitution.\n * @param {string} locale The successfully resolved locale\n * @param {Integer} [maximumLocalNestingDepth=3] Depth of local variable resolution to\n *   check before reporting a recursion error\n * @param {MissingSuppliedFormattersCallback} [cfg.missingSuppliedFormatters] Callback\n *   supplied key to throw if the supplied key is present (if\n *   `throwOnMissingSuppliedFormatters` is enabled). Defaults to no-op.\n * @param {CheckExtraSuppliedFormattersCallback} [cfg.checkExtraSuppliedFormatters] No\n *   argument callback to check if any formatters are not present in `string`\n *   (if `throwOnExtraSuppliedFormatters` is enabled). Defaults to no-op.\n * @returns {string|Array<Node|string>}\n */\n\n/**\n * @type {InsertNodesCallback}\n */\nexport const defaultInsertNodes = ({\n  /* eslint-enable max-len */\n  string, dom, usedKeys, substitutions, allSubstitutions, locale,\n  locals, switches,\n  maximumLocalNestingDepth = 3,\n  missingSuppliedFormatters,\n  checkExtraSuppliedFormatters\n}) => {\n  if (typeof maximumLocalNestingDepth !== 'number') {\n    throw new TypeError('`maximumLocalNestingDepth` must be a number.');\n  }\n  Object.entries(substitutions).forEach(([key, value]) => {\n    if (typeof value === 'function') {\n      usedKeys.push();\n    }\n  });\n  const localFormatter = new LocalFormatter(locals);\n  const regularFormatter = new RegularFormatter(substitutions);\n  const switchFormatter = new SwitchFormatter(switches, {substitutions});\n\n  // eslint-disable-next-line max-len\n  // eslint-disable-next-line prefer-named-capture-group, unicorn/no-unsafe-regex\n  const formattingRegex = /(\\\\*)\\{((?:[^}]|\\\\\\})*?)(?:(\\|)([^}]*))?\\}/gu;\n  if (allSubstitutions) {\n    allSubstitutions = Array.isArray(allSubstitutions)\n      ? allSubstitutions\n      : [allSubstitutions];\n  }\n\n  const getSubstitution = ({key, arg, substs}) => {\n    let substitution;\n    const isLocalKey = localFormatter.constructor.isMatchingKey(key);\n    if (isLocalKey) {\n      substitution = localFormatter.getSubstitution(key);\n    } else if (switchFormatter.constructor.isMatchingKey(key)) {\n      substitution = switchFormatter.getSubstitution(key, {\n        locale, usedKeys, arg,\n        missingSuppliedFormatters\n      });\n    } else {\n      substitution = substs[key];\n      if (typeof substitution === 'function') {\n        substitution = substitution({arg, key});\n      }\n    }\n    // Todo: Could support resolving locals within arguments\n    // Todo: Even for `null` `allSubstitutions`, we could have\n    //  a mode to throw for non-string/non-DOM (non-numbers?),\n    //  or whatever is not likely intended as a target for `toString()`.\n    if (allSubstitutions) {\n      substitution = allSubstitutions.reduce((subst, allSubst) => {\n        return allSubst({\n          value: subst, arg, key, locale\n        });\n      }, substitution);\n    } else if (arg && (/^(?:NUMBER|DATE(?:TIME|RANGE|TIMERANGE)?|REGION|LANGUAGE|SCRIPT|CURRENCY|RELATIVE|LIST)(?:\\||$)/u).test(arg)) {\n      substitution = defaultAllSubstitutions({\n        value: substitution, arg, key, locale\n      });\n    }\n    return substitution;\n  };\n\n  let recursiveLocalCount = 1;\n  const checkLocalVars = ({substitution, ky, arg, processSubsts}) => {\n    if (\n      typeof substitution === 'string' &&\n      substitution.includes('{')\n    ) {\n      if (recursiveLocalCount++ > maximumLocalNestingDepth) {\n        throw new TypeError('Too much recursion in local variables.');\n      }\n\n      if (localFormatter.constructor.isMatchingKey(ky)) {\n        let extraSubsts = substitutions;\n        let localFormatters;\n        if (arg) {\n          localFormatters = parseJSONExtra(arg);\n          extraSubsts = {\n            ...substitutions,\n            ...localFormatters\n          };\n        }\n        substitution = processSubsts({\n          str: substitution, substs: extraSubsts,\n          formatter: localFormatter\n        });\n        if (localFormatters) {\n          checkExtraSuppliedFormatters({substitutions: localFormatters});\n        }\n      } else if (switchFormatter.constructor.isMatchingKey(ky)) {\n        substitution = processSubsts({\n          str: substitution\n        });\n      }\n    }\n    return substitution;\n  };\n\n  // Give chance to avoid this block when known to contain DOM\n  if (!dom) {\n    // Run this block to optimize non-DOM substitutions\n    let returnsDOM = false;\n    const replace = ({\n      str, substs = substitutions,\n      formatter = regularFormatter\n    }) => {\n      return str.replace(formattingRegex, (_, esc, ky, pipe, arg) => {\n        if (esc.length % 2) {\n          return _;\n        }\n        if (missingSuppliedFormatters({\n          key: ky,\n          formatter\n        })) {\n          return _;\n        }\n        let substitution = getSubstitution({key: ky, arg, substs});\n\n        substitution = checkLocalVars({\n          substitution, ky, arg, processSubsts: replace\n        });\n\n        returnsDOM = returnsDOM ||\n          (substitution && typeof substitution === 'object' &&\n          'nodeType' in substitution);\n        usedKeys.push(ky);\n        return esc + substitution;\n      });\n    };\n    const ret = replace({str: string});\n    if (!returnsDOM) {\n      checkExtraSuppliedFormatters({substitutions});\n      usedKeys.length = 0;\n      return unescapeBackslashes(ret);\n    }\n    usedKeys.length = 0;\n  }\n\n  recursiveLocalCount = 1;\n  const processSubstitutions = ({\n    str, substs = substitutions, formatter = regularFormatter\n  }) => {\n    const nodes = [];\n\n    // Copy to ensure we are resetting index on each instance (manually\n    // resetting on `formattingRegex` is problematic with recursion that\n    // uses the same regex copy)\n    const regex = new RegExp(formattingRegex, 'gu');\n\n    const push = (...args) => {\n      nodes.push(...args);\n    };\n\n    processRegex(regex, str, {\n      extra: push,\n      onMatch (_, esc, ky, pipe, arg) {\n        if (missingSuppliedFormatters({\n          key: ky, formatter\n        })) {\n          push(_);\n        } else {\n          if (esc.length) {\n            push(esc);\n          }\n\n          let substitution = getSubstitution({key: ky, arg, substs});\n          substitution = checkLocalVars({\n            substitution, ky, arg, processSubsts: processSubstitutions\n          });\n          if (Array.isArray(substitution)) {\n            push(...substitution);\n          } else if (\n            // Clone so that multiple instances may be added (and no\n            // side effects to user code)\n            substitution && typeof substitution === 'object' &&\n            'nodeType' in substitution\n          ) {\n            push(substitution.cloneNode(true));\n          } else {\n            push(substitution);\n          }\n        }\n        usedKeys.push(ky);\n      }\n    });\n    return nodes;\n  };\n  const nodes = processSubstitutions({str: string});\n\n  checkExtraSuppliedFormatters({substitutions});\n  usedKeys.length = 0;\n  return nodes.map((node) => {\n    if (typeof node === 'string') {\n      return unescapeBackslashes(node);\n    }\n    return node;\n  });\n};\n","import {unescapeBackslashes, processRegex} from './utils.js';\n\n/**\n* @typedef {LocaleBody} LocalObject\n*/\n\n/**\n * May also contain language code and direction, translator name and\n * contact, etc., but no defaults currently apply besides reserving `locals`\n * @typedef {PlainObject} LocaleHead\n * @property {LocalObject} locals\n*/\n\n/**\n* @typedef {LocaleStringBodyObject|\n* PlainLocaleStringBodyObject|PlainObject} LocaleBody\n*/\n\n/**\n* @typedef {PlainObject} LocaleObject\n* @property {LocaleHead} [head]\n* @property {LocaleBody} body\n*/\n\n/**\n* @typedef {PlainObject} MessageStyleCallbackResult\n* @property {string} value Regardless of message style, will contain the\n*   string result\n* @property {LocaleStringSubObject} [info] Full info on the localized item\n*   (for rich message styles only)\n*/\n\n/**\n* @callback MessageStyleCallback\n* @param {LocaleObject} obj The exact\n*   format depends on the `cfg.defaults` of `i18n`\n* @param {string} key\n* @returns {false|MessageStyleCallbackResult} If `false`, will resort to default\n*/\n\n/* eslint-disable max-len */\n/**\n * @param {PlainObject} [cfg]\n * @param {\"richNested\"|\"rich\"|\"plain\"|MessageStyleCallback} [cfg.messageStyle=\"richNested\"]\n * @returns {MessageStyleCallback}\n */\nexport const getMessageForKeyByStyle = ({\n  /* eslint-enable max-len */\n  messageStyle = 'richNested'\n} = {}) => {\n  // Todo: Support `plainNested` style\n  return typeof messageStyle === 'function'\n    ? messageStyle\n    : (messageStyle === 'richNested'\n      ? (mainObj, key) => {\n        const obj = mainObj && typeof mainObj === 'object' && mainObj.body;\n        const keys = [];\n        // eslint-disable-next-line prefer-named-capture-group\n        const possiblyEscapedCharPattern = /(\\\\*)\\./gu;\n        const mergeWithPreviousOrStart = (val) => {\n          if (!keys.length) {\n            keys[0] = '';\n          }\n          keys[keys.length - 1] += val;\n        };\n        processRegex(possiblyEscapedCharPattern, key, {\n          // If odd, this is just an escaped dot, so merge content with\n          //   any previous\n          extra: mergeWithPreviousOrStart,\n          onMatch (_, esc) {\n            // If even, there are no backslashes, or they are just escaped\n            //  backslashes and not an escaped dot, so start anew, though\n            //  first merge any backslashes\n            mergeWithPreviousOrStart(esc);\n            keys.push('');\n          }\n        });\n        const keysUnescaped = keys.map((ky) => {\n          return unescapeBackslashes(ky);\n        });\n\n        let ret = false;\n        let currObj = obj;\n        keysUnescaped.some((ky, i, kys) => {\n          if (!currObj || typeof currObj !== 'object') {\n            return true;\n          }\n          if (\n            // If specified key is too deep, we should fail\n            i === kys.length - 1 &&\n            ky in currObj && currObj[ky] && typeof currObj[ky] === 'object' &&\n            'message' in currObj[ky] &&\n            // NECESSARY FOR SECURITY ON UNTRUSTED LOCALES\n            typeof currObj[ky].message === 'string'\n          ) {\n            ret = {\n              value: currObj[ky].message,\n              info: currObj[ky]\n            };\n          }\n          currObj = currObj[ky];\n\n          return false;\n        });\n        return ret;\n      }\n      : (messageStyle === 'rich'\n        ? (mainObj, key) => {\n          const obj = mainObj && typeof mainObj === 'object' && mainObj.body;\n          if (\n            obj && typeof obj === 'object' &&\n            key in obj && obj[key] && typeof obj[key] === 'object' &&\n            'message' in obj[key] &&\n            // NECESSARY FOR SECURITY ON UNTRUSTED LOCALES\n            typeof obj[key].message === 'string'\n          ) {\n            return {\n              value: obj[key].message,\n              info: obj[key]\n            };\n          }\n          return false;\n        }\n        : (messageStyle === 'plain'\n          ? (mainObj, key) => {\n            const obj = mainObj && typeof mainObj === 'object' && mainObj.body;\n            if (\n              obj && typeof obj === 'object' &&\n              key in obj && obj[key] && typeof obj[key] === 'string'\n            ) {\n              return {\n                value: obj[key]\n              };\n            }\n            return false;\n          }\n          : (() => {\n            throw new TypeError(`Unknown \\`messageStyle\\` ${messageStyle}`);\n          })())\n      )\n    );\n};\n","import {getMessageForKeyByStyle} from './getMessageForKeyByStyle.js';\n\n/* eslint-disable max-len */\n/**\n * @param {PlainObject} cfg\n * @param {string} [cfg.message] If present, this string will be the return value.\n * @param {false|null|undefined|LocaleObject} [cfg.defaults]\n * @param {\"richNested\"|\"rich\"|\"plain\"|MessageStyleCallback} [cfg.messageStyle=\"richNested\"]\n * @param {MessageStyleCallback} [cfg.messageForKey] Defaults to getting `MessageStyleCallback` based on `messageStyle`\n * @param {string} cfg.key Key to check against object of strings; used to find a default if no string `message` is provided.\n * @returns {string}\n */\nexport const getStringFromMessageAndDefaults = ({\n  /* eslint-enable max-len */\n  message,\n  defaults,\n  messageStyle,\n  messageForKey = getMessageForKeyByStyle({messageStyle}),\n  key\n} = {}) => {\n  if (typeof key !== 'string') {\n    throw new TypeError(\n      'An options object with a `key` string is expected on ' +\n      '`getStringFromMessageAndDefaults`'\n    );\n  }\n  // NECESSARY CHECK FOR SECURITY ON UNTRUSTED LOCALES\n  let str;\n  if (typeof message === 'string') {\n    str = message;\n  } else if (\n    defaults === false || defaults === undefined || defaults === null\n  ) {\n    str = false;\n  } else if (defaults && typeof defaults === 'object') {\n    str = messageForKey({body: defaults}, key);\n    if (str) {\n      str = str.value;\n    }\n  } else {\n    throw new TypeError(\n      `Default locale strings must resolve to \\`false\\`, ` +\n      `nullish, or an object!`\n    );\n  }\n  if (str === false) {\n    throw new Error(`Key value not found for key: (${key})`);\n  }\n  return str;\n};\n","import {defaultAllSubstitutions} from './defaultAllSubstitutions.js';\nimport {defaultInsertNodes} from './defaultInsertNodes.js';\nimport {getDocument} from './shared.js';\n\nexport {setDocument, getDocument} from './shared.js';\n\n/* eslint-disable max-len */\n/**\n *\n * @param {PlainObject} cfg\n * @param {string} cfg.string\n * @param {string} cfg.locale The (possibly already resolved) locale for use by\n *   configuring formatters\n * @param {LocalObject} [cfg.locals]\n * @param {LocalObject} [cfg.switches]\n * @param {Integer} [cfg.maximumLocalNestingDepth=3]\n * @param {?(AllSubstitutionCallback|AllSubstitutionCallback[])} [cfg.allSubstitutions=[defaultAllSubstitutions]]\n * @param {InsertNodesCallback} [cfg.insertNodes=defaultInsertNodes]\n * @param {false|SubstitutionObject} [cfg.substitutions=false]\n * @param {boolean} [cfg.dom=false]\n * @param {boolean} [cfg.forceNodeReturn=false]\n * @param {boolean} [cfg.throwOnMissingSuppliedFormatters=true]\n * @param {boolean} [cfg.throwOnExtraSuppliedFormatters=true]\n * @returns {string|DocumentFragment}\n */\nexport const getDOMForLocaleString = ({\n  /* eslint-enable max-len */\n  string,\n  locale,\n  locals,\n  switches,\n  maximumLocalNestingDepth,\n  allSubstitutions = [\n    defaultAllSubstitutions\n  ],\n  insertNodes = defaultInsertNodes,\n  substitutions = false,\n  dom = false,\n  forceNodeReturn = false,\n  throwOnMissingSuppliedFormatters = true,\n  throwOnExtraSuppliedFormatters = true\n} = {}) => {\n  if (typeof string !== 'string') {\n    throw new TypeError(\n      'An options object with a `string` property set to a string must ' +\n      'be provided for `getDOMForLocaleString`.'\n    );\n  }\n  const stringOrTextNode = (str) => {\n    const _doc = getDocument();\n    return forceNodeReturn ? _doc.createTextNode(str) : str;\n  };\n\n  const usedKeys = [];\n\n  /**\n  * @callback CheckExtraSuppliedFormattersCallback\n  * @param {SubstitutionObject} substs\n  * @throws {Error} Upon an extra formatting key being found\n  * @returns {void}\n  */\n\n  /**\n   * @type {CheckExtraSuppliedFormattersCallback}\n   */\n  const checkExtraSuppliedFormatters = ({\n    substitutions: substs\n  }) => {\n    if (throwOnExtraSuppliedFormatters) {\n      Object.keys(substs).forEach((key) => {\n        if (!usedKeys.includes(key)) {\n          throw new Error(`Extra formatting key: ${key}`);\n        }\n      });\n    }\n  };\n\n  /**\n  * @callback MissingSuppliedFormattersCallback\n  * @param {string} key\n  * @param {SubstitutionObject} substs\n  * @throws {Error} If missing formatting key\n  * @returns {boolean}\n  */\n  /**\n   * @type {MissingSuppliedFormattersCallback}\n   */\n  const missingSuppliedFormatters = ({\n    key, formatter\n  }) => {\n    const matching = formatter.isMatch(key);\n    if (formatter.constructor.isMatchingKey(key) && !matching) {\n      if (throwOnMissingSuppliedFormatters) {\n        throw new Error(`Missing formatting key: ${key}`);\n      }\n      return true;\n    }\n    return false;\n  };\n\n  if (\n    !substitutions && !allSubstitutions &&\n    !throwOnMissingSuppliedFormatters\n  ) {\n    return stringOrTextNode(string);\n  }\n  if (!substitutions) {\n    substitutions = {};\n  }\n\n  const nodes = insertNodes({\n    string, dom, usedKeys, substitutions, allSubstitutions, locale,\n    locals, switches,\n    missingSuppliedFormatters,\n    checkExtraSuppliedFormatters\n  });\n  if (typeof nodes === 'string') {\n    return stringOrTextNode(nodes);\n  }\n\n  const _doc = getDocument();\n  const container = _doc.createDocumentFragment();\n  container.append(...nodes);\n\n  return container;\n};\n","/* globals intlDomLocale */\n\nimport {defaultLocaleResolver} from './defaultLocaleResolver.js';\nimport {promiseChainForValues} from './promiseChainForValues.js';\nimport {getFetch} from './shared.js';\n\nexport {setFetch, getFetch} from './shared.js';\n\n/**\n * Takes a locale and returns a new locale to check.\n * @callback LocaleMatcher\n * @param {string} locale The failed locale\n * @throws {Error} If there are no further hyphens left to check\n * @returns {string|Promise<string>} The new locale to check\n*/\n\n/**\n * @type {LocaleMatcher}\n */\nexport const defaultLocaleMatcher = (locale) => {\n  if (!locale.includes('-')) {\n    throw new Error('Locale not available');\n  }\n  // Try without hyphen, i.e., the \"lookup\" algorithm:\n  // See https://tools.ietf.org/html/rfc4647#section-3.4 and\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl\n  return locale.replace(/-[^-]*$/u, '');\n};\n\n/**\n * @param {PlainObject} cfg\n * @param {string} cfg.locale\n * @param {string[]} cfg.locales\n * @param {LocaleResolver} [cfg.localeResolver=defaultLocaleMatcher]\n * @returns {string|false}\n */\nexport const getMatchingLocale = ({\n  locale, locales, localeResolver = defaultLocaleMatcher\n}) => {\n  try {\n    while (!locales.includes(locale)) {\n      // Catch as `defaultLocaleMatcher` will throw if no hyphen found\n      locale = localeResolver(locale);\n    }\n  } catch (err) {\n    return false;\n  }\n  return locale;\n};\n\n/**\n* @typedef {PlainObject} LocaleObjectInfo\n* @property {LocaleObject} strings The successfully retrieved locale strings\n* @property {string} locale The successfully resolved locale\n*/\n\n/**\n * @callback LocaleStringFinder\n * @param {PlainObject} [cfg={}]\n * @param {string[]} [cfg.locales=navigator.languages] BCP-47 language strings\n * @param {string[]} [cfg.defaultLocales=[\"en-US\"]]\n * @param {string} [cfg.localesBasePath=\".\"]\n * @param {LocaleResolver} [cfg.localeResolver=defaultLocaleResolver]\n * @param {\"lookup\"|LocaleMatcher} [cfg.localeMatcher]\n * @returns {Promise<LocaleObjectInfo>}\n */\n\n/**\n *\n * @type {LocaleStringFinder}\n */\nexport const findLocaleStrings = ({\n  locales,\n  defaultLocales,\n  localeResolver,\n  localesBasePath,\n  localeMatcher\n} = {}) => {\n  return _findLocale({\n    locales, defaultLocales, localeResolver, localesBasePath, localeMatcher\n  });\n};\n\n/**\n * @callback LocaleFinder\n * @param {PlainObject} [cfg={}]\n * @param {string[]} [cfg.locales=navigator.languages] BCP-47 language strings\n * @param {string[]} [cfg.defaultLocales=[\"en-US\"]]\n * @param {string} [cfg.localesBasePath=\".\"]\n * @param {LocaleResolver} [cfg.localeResolver=defaultLocaleResolver]\n * @param {\"lookup\"|LocaleMatcher} [cfg.localeMatcher]\n * @returns {Promise<string>} Resolves to the successfully resolved locale\n */\n\n/**\n *\n * @type {LocaleFinder}\n */\nexport const findLocale = ({\n  locales,\n  defaultLocales,\n  localeResolver,\n  localesBasePath,\n  localeMatcher\n} = {}) => {\n  return _findLocale({\n    locales, defaultLocales, localeResolver, localesBasePath, localeMatcher,\n    headOnly: true\n  });\n};\n\n/**\n * @type {LocaleStringFinder|LocaleFinder} Also has a `headOnly` boolean\n *  property to determine whether to make a simple HEAD and resolve to\n *  the locale rather than locale and contents\n */\nconst _findLocale = async ({\n  locales = typeof intlDomLocale !== 'undefined'\n    ? [intlDomLocale]\n    : typeof navigator === 'undefined' ? [] : navigator.languages,\n  defaultLocales = ['en-US'],\n  localeResolver = defaultLocaleResolver,\n  localesBasePath = '.',\n  localeMatcher = 'lookup',\n  headOnly = false\n}) => {\n  /**\n   * @callback getLocale\n   * @throws {SyntaxError|TypeError|Error}\n   * @param {string} locale\n   * @returns {Promise<LocaleObjectInfo>}\n   */\n  async function getLocale (locale) {\n    if (typeof locale !== 'string') {\n      throw new TypeError('Non-string locale type');\n    }\n    const url = localeResolver(localesBasePath, locale);\n    if (typeof url !== 'string') {\n      throw new TypeError(\n        '`localeResolver` expected to resolve to (URL) string.'\n      );\n    }\n    try {\n      const _fetch = getFetch();\n      const resp = await (headOnly\n        ? _fetch(url, {\n          method: 'HEAD'\n        })\n        : _fetch(url)\n      );\n\n      if (resp.status === 404) {\n        // Don't allow browser (tested in Firefox) to continue\n        //  and give `SyntaxError` with missing file or we won't be\n        //  able to try without the hyphen\n        throw new Error('Trying again');\n      }\n      if (headOnly) {\n        return locale;\n      }\n      const strings = await (resp.json());\n      return {\n        locale,\n        strings\n      };\n    } catch (err) {\n      if (err.name === 'SyntaxError') {\n        throw err;\n      }\n      const newLocale = await localeMatcher(locale);\n      return getLocale(newLocale);\n    }\n  }\n  if (localeMatcher === 'lookup') {\n    localeMatcher = defaultLocaleMatcher;\n  } else if (typeof localeMatcher !== 'function') {\n    throw new TypeError('`localeMatcher` must be \"lookup\" or a function!');\n  }\n  return await promiseChainForValues(\n    [...locales, ...defaultLocales],\n    getLocale,\n    'No matching locale found!'\n  );\n};\n","import {getMessageForKeyByStyle} from './getMessageForKeyByStyle.js';\nimport {findLocaleStrings} from './findLocaleStrings.js';\nimport {getDOMForLocaleString} from './getDOMForLocaleString.js';\nimport {\n  getStringFromMessageAndDefaults\n} from './getStringFromMessageAndDefaults.js';\nimport {sort, sortList, list} from './collation.js';\n\n/**\n * Checks a key (against an object of strings). Optionally\n *  accepts an object of substitutions which are used when finding text\n *  within curly brackets (pipe symbol not allowed in its keys); the\n *  substitutions may be DOM elements as well as strings and may be\n *  functions which return the same (being provided the text after the\n *  pipe within brackets as the single argument).) Optionally accepts a\n *  config object, with the optional key \"dom\" which if set to `true`\n *  optimizes when DOM elements are (known to be) present.\n * @callback I18NCallback\n * @param {string} key Key to check against object of strings\n * @param {false|SubstitutionObject} [substitutions=false]\n * @param {PlainObject} [cfg={}]\n * @param {boolean} [cfg.dom=false]\n * @returns {string|DocumentFragment}\n*/\n\n/* eslint-disable max-len */\n/**\n * @param {PlainObject} cfg\n * @param {LocaleObject} cfg.strings\n * @param {string} cfg.resolvedLocale\n * @param {\"richNested\"|\"rich\"|\"plain\"|MessageStyleCallback} [cfg.messageStyle=\"richNested\"]\n * @param {?AllSubstitutionCallback|AllSubstitutionCallback[]} [cfg.allSubstitutions]\n * @param {InsertNodesCallback} [cfg.insertNodes=defaultInsertNodes]\n * @param {false|null|undefined|LocaleObject} [cfg.defaults]\n * @param {false|SubstitutionObject} [cfg.substitutions={}]\n * @param {Integer} [cfg.maximumLocalNestingDepth=3]\n * @param {boolean} [cfg.dom=false]\n * @param {boolean} [cfg.forceNodeReturn=false]\n * @param {boolean} [cfg.throwOnMissingSuppliedFormatters=true]\n * @param {boolean} [cfg.throwOnExtraSuppliedFormatters=true]\n * @returns {Promise<I18NCallback>} Rejects if no suitable locale is found.\n */\nexport const i18nServer = function i18nServer ({\n  /* eslint-enable max-len */\n  strings,\n  resolvedLocale,\n  messageStyle,\n  allSubstitutions: defaultAllSubstitutionsValue,\n  insertNodes,\n  defaults: defaultDefaults,\n  substitutions: defaultSubstitutions,\n  maximumLocalNestingDepth,\n  dom: domDefaults = false,\n  forceNodeReturn: forceNodeReturnDefault = false,\n  throwOnMissingSuppliedFormatters:\n    throwOnMissingSuppliedFormattersDefault = true,\n  throwOnExtraSuppliedFormatters:\n    throwOnExtraSuppliedFormattersDefault = true\n}) {\n  if (!strings || typeof strings !== 'object') {\n    throw new TypeError(`Locale strings must be an object!`);\n  }\n  const messageForKey = getMessageForKeyByStyle({messageStyle});\n  const formatter = (key, substitutions, {\n    allSubstitutions = defaultAllSubstitutionsValue,\n    defaults = defaultDefaults,\n    dom = domDefaults,\n    forceNodeReturn = forceNodeReturnDefault,\n    throwOnMissingSuppliedFormatters = throwOnMissingSuppliedFormattersDefault,\n    throwOnExtraSuppliedFormatters = throwOnExtraSuppliedFormattersDefault\n  } = {}) => {\n    const message = messageForKey(strings, key);\n    const string = getStringFromMessageAndDefaults({\n      message: (message && message.value) || false,\n      defaults,\n      messageForKey,\n      key\n    });\n\n    return getDOMForLocaleString({\n      string,\n      locals: strings.head && strings.head.locals,\n      switches: strings.head && strings.head.switches,\n      locale: resolvedLocale,\n      maximumLocalNestingDepth,\n      allSubstitutions,\n      insertNodes,\n      substitutions: {...defaultSubstitutions, ...substitutions},\n      dom,\n      forceNodeReturn,\n      throwOnMissingSuppliedFormatters,\n      throwOnExtraSuppliedFormatters\n    });\n  };\n\n  formatter.resolvedLocale = resolvedLocale;\n  formatter.strings = strings;\n\n  formatter.sort = (...args) => {\n    return sort(resolvedLocale, ...args);\n  };\n\n  formatter.sortList = (...args) => {\n    return sortList(\n      resolvedLocale, ...args\n    );\n  };\n\n  formatter.list = (...args) => {\n    return list(\n      resolvedLocale, ...args\n    );\n  };\n\n  return formatter;\n};\n\n/* eslint-disable max-len */\n/**\n * @param {PlainObject} [cfg={}]\n * @param {string[]} [cfg.locales=navigator.languages] BCP-47 language strings\n * @param {string[]} [cfg.defaultLocales=[\"en-US\"]]\n * @param {LocaleStringFinder} [cfg.localeStringFinder=findLocaleStrings]\n * @param {string} [cfg.localesBasePath=\".\"]\n * @param {LocaleResolver} [cfg.localeResolver=defaultLocaleResolver]\n * @param {\"lookup\"|LocaleMatcher} [cfg.localeMatcher=\"lookup\"]\n * @param {\"richNested\"|\"rich\"|\"plain\"|MessageStyleCallback} [cfg.messageStyle=\"richNested\"]\n * @param {?AllSubstitutionCallback|AllSubstitutionCallback[]} [cfg.allSubstitutions]\n * @param {InsertNodesCallback} [cfg.insertNodes=defaultInsertNodes]\n * @param {false|null|undefined|LocaleObject} [cfg.defaults]\n * @param {false|SubstitutionObject} [cfg.substitutions={}]\n * @param {Integer} [cfg.maximumLocalNestingDepth=3]\n * @param {boolean} [cfg.dom=false]\n * @param {boolean} [cfg.forceNodeReturn=false]\n * @param {boolean} [cfg.throwOnMissingSuppliedFormatters=true]\n * @param {boolean} [cfg.throwOnExtraSuppliedFormatters=true]\n * @returns {Promise<I18NCallback>} Rejects if no suitable locale is found.\n */\nexport const i18n = async function i18n ({\n  /* eslint-enable max-len */\n  locales,\n  defaultLocales,\n  localeStringFinder = findLocaleStrings,\n  localesBasePath,\n  localeResolver,\n  localeMatcher,\n  messageStyle,\n  allSubstitutions,\n  insertNodes,\n  defaults,\n  substitutions,\n  maximumLocalNestingDepth,\n  dom,\n  forceNodeReturn,\n  throwOnMissingSuppliedFormatters,\n  throwOnExtraSuppliedFormatters\n} = {}) {\n  const {strings, locale: resolvedLocale} = await localeStringFinder({\n    locales, defaultLocales, localeResolver, localesBasePath, localeMatcher\n  });\n\n  return i18nServer({\n    strings,\n    resolvedLocale,\n    messageStyle,\n    allSubstitutions,\n    insertNodes,\n    defaults,\n    substitutions,\n    maximumLocalNestingDepth,\n    dom,\n    forceNodeReturn,\n    throwOnMissingSuppliedFormatters,\n    throwOnExtraSuppliedFormatters\n  });\n};\n"],"names":["_jsonExtra","globalThis","jsonExtra","setJSONExtra","__jsonExtra","unescapeBackslashes","str","replace","esc","slice","length","parseJSONExtra","args","parse","processRegex","regex","match","onMatch","extra","betweenMatches","afterMatch","escapeAtOne","previousIndex","exec","_","lastIndex","startMatchPos","_fetch","fetch","setFetch","f","getFetch","_doc","document","setDocument","doc","getDocument","sort","locale","arrayOfItems","options","Intl","Collator","compare","list","ListFormat","format","sortList","map","listOptions","collationOptions","sortListSimple","d","randomId","Date","now","performance","c","r","Math","trunc","random","floor","toString","placeholderArray","_toConsumableArray","i","nodes","push","RegExp","idx","container","createDocumentFragment","append","getFormatterInfo","object","Array","isArray","value","callback","extraOpts","defaultAllSubstitutions","arg","key","opts","_typeof","applyArgs","type","checkArgOptions","split","userType","extraArgs","argOptions","singleKey","Object","keys","includes","DateTimeFormat","formatRange","DisplayNames","toUpperCase","of","RelativeTimeFormat","NumberFormat","getTime","TypeError","Formatter","getSubstitution","body","messageStyle","substitution","getMessageForKeyByStyle","messageForKey","Error","LocalFormatter","locals","this","components","parent","constructor","isMatchingKey","every","cmpt","result","startsWith","RegularFormatter","substitutions","test","SwitchFormatter","switches","usedKeys","missingSuppliedFormatters","ky","getKey","getMatch","objKey","keySegment","formatter","getNumberFormat","defaultOptions","numberOpts","getPluralFormat","pluralOpts","PluralRules","select","formatterValue","toLowerCase","preventNesting","s","err","error","k","find","switchKey","Boolean","ks","reduce","obj","ret","entries","_this4","then","direct","Promise","resolve","recover","e","pact","state","o","_settle","bind","v","observer","_Pact","prototype","onFulfilled","onRejected","_this","thenable","update","stage","shouldContinue","_isSettledPact","updateValue","reject","_resumeAfterTest","_resumeAfterBody","_resumeAfterUpdate","arguments","apply","promiseChainForValues","values","errBack","errorMessage","_async","breaking","p","shift","defaultLocaleResolver","localesBasePath","defaultInsertNodes","string","dom","allSubstitutions","maximumLocalNestingDepth","checkExtraSuppliedFormatters","forEach","localFormatter","regularFormatter","switchFormatter","formattingRegex","substs","subst","allSubst","recursiveLocalCount","checkLocalVars","processSubsts","localFormatters","extraSubsts","returnsDOM","pipe","processSubstitutions","cloneNode","node","mainObj","mergeWithPreviousOrStart","val","keysUnescaped","currObj","some","kys","message","info","getStringFromMessageAndDefaults","defaults","getDOMForLocaleString","insertNodes","forceNodeReturn","throwOnMissingSuppliedFormatters","throwOnExtraSuppliedFormatters","stringOrTextNode","createTextNode","matching","isMatch","defaultLocaleMatcher","getMatchingLocale","locales","localeResolver","findLocaleStrings","defaultLocales","localeMatcher","_findLocale","findLocale","headOnly","getLocale","url","method","resp","status","json","strings","name","intlDomLocale","navigator","languages","i18nServer","resolvedLocale","defaultAllSubstitutionsValue","defaultDefaults","defaultSubstitutions","domDefaults","forceNodeReturnDefault","throwOnMissingSuppliedFormattersDefault","throwOnExtraSuppliedFormattersDefault","head","i18n","localeStringFinder"],"mappings":"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"}