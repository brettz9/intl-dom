{"version":3,"file":"index.esm.min.js","sources":["../node_modules/json-6/dist/index.mjs","../src/utils.js","../src/collation.js","../src/defaultAllSubstitutions.js","../src/Formatter.js","../src/promiseChainForValues.js","../src/defaultLocaleResolver.js","../src/defaultInsertNodes.js","../src/getMessageForKeyByStyle.js","../src/getStringFromMessageAndDefaults.js","../src/getDOMForLocaleString.js","../src/findLocaleStrings.js","../src/i18n.js"],"sourcesContent":["function createCommonjsModule(fn, module) {\n\treturn module = { exports: {} }, fn(module, module.exports), module.exports;\n}\n\nvar json6 = createCommonjsModule(function (module, exports) {\n\nconst VALUE_UNDEFINED = -1;\nconst VALUE_UNSET = 0;\nconst VALUE_NULL = 1;\nconst VALUE_TRUE = 2;\nconst VALUE_FALSE = 3;\nconst VALUE_STRING = 4;\nconst VALUE_NUMBER = 5;\nconst VALUE_OBJECT = 6;\nconst VALUE_ARRAY = 7;\nconst VALUE_NEG_NAN = 8;\nconst VALUE_NAN = 9;\nconst VALUE_NEG_INFINITY = 10;\nconst VALUE_INFINITY = 11;\nconst VALUE_EMPTY = 13; // [,] makes an array with 'empty item'\n\nconst WORD_POS_RESET = 0;\nconst WORD_POS_TRUE_1 = 1;\nconst WORD_POS_TRUE_2 = 2;\nconst WORD_POS_TRUE_3 = 3;\nconst WORD_POS_FALSE_1 = 5;\nconst WORD_POS_FALSE_2 = 6;\nconst WORD_POS_FALSE_3 = 7;\nconst WORD_POS_FALSE_4 = 8;\nconst WORD_POS_NULL_1 = 9;\nconst WORD_POS_NULL_2 = 10;\nconst WORD_POS_NULL_3 = 11;\nconst WORD_POS_UNDEFINED_1 = 12;\nconst WORD_POS_UNDEFINED_2 = 13;\nconst WORD_POS_UNDEFINED_3 = 14;\nconst WORD_POS_UNDEFINED_4 = 15;\nconst WORD_POS_UNDEFINED_5 = 16;\nconst WORD_POS_UNDEFINED_6 = 17;\nconst WORD_POS_UNDEFINED_7 = 18;\nconst WORD_POS_UNDEFINED_8 = 19;\nconst WORD_POS_NAN_1 = 20;\nconst WORD_POS_NAN_2 = 21;\nconst WORD_POS_INFINITY_1 = 22;\nconst WORD_POS_INFINITY_2 = 23;\nconst WORD_POS_INFINITY_3 = 24;\nconst WORD_POS_INFINITY_4 = 25;\nconst WORD_POS_INFINITY_5 = 26;\nconst WORD_POS_INFINITY_6 = 27;\nconst WORD_POS_INFINITY_7 = 28;\n\nconst WORD_POS_FIELD = 29;\nconst WORD_POS_AFTER_FIELD = 30;\nconst WORD_POS_END = 31;\n\nconst CONTEXT_UNKNOWN = 0;\nconst CONTEXT_IN_ARRAY = 1;\nconst CONTEXT_OBJECT_FIELD = 3;\nconst CONTEXT_OBJECT_FIELD_VALUE = 4;\n\nconst contexts = [];\nfunction getContext() { var ctx = contexts.pop(); if( !ctx ) ctx = { context : CONTEXT_UNKNOWN, elements : null, element_array : null }; return ctx; }\nfunction dropContext(ctx) { contexts.push( ctx ); }\n\nconst buffers = [];\nfunction getBuffer() { var buf = buffers.pop(); if( !buf ) buf = { buf:null, n:0 }; else buf.n = 0; return buf; }\nfunction dropBuffer(buf) { buffers.push( buf ); }\n\nvar JSON6 = (exports);\n\nJSON6.escape = function(string) {\n\tvar n;\n\tvar output = '';\n\tif( !string ) return string;\n\tfor( n = 0; n < string.length; n++ ) {\n\t\tif( ( string[n] == '\"' ) || ( string[n] == '\\\\' ) || ( string[n] == '`' )|| ( string[n] == '\\'' )) {\n\t\t\toutput += '\\\\';\n\t\t}\n\t\toutput += string[n];\n\t}\n\treturn output;\n};\n\n\nJSON6.begin = function( cb, reviver ) {\n\n\tconst val = { name : null,\t  // name of this value (if it's contained in an object)\n\t\t \tvalue_type: VALUE_UNSET, // value from above indiciating the type of this value\n\t \t\tstring : '',   // the string value of this value (strings and number types only)\n\t\t\tcontains : null,\n\t\t};\n\n\tconst pos = { line:1, col:1 };\n\tlet\tn = 0;\n\tlet     str;\n\tvar word = WORD_POS_RESET,\n\t\tstatus = true,\n\t\tnegative = false,\n\t\tresult = null,\n\t\telements = undefined,\n\t\telement_array = [],\n\t\tcontext_stack = {\n\t\t\tfirst : null,\n\t\t\tlast : null,\n\t\t\tsaved : null,\n\t\t\tpush(node) {\n\t\t\t\tvar recover = this.saved;\n\t\t\t\tif( recover ) { this.saved = recover.next; recover.node = node; recover.next = null; recover.prior = this.last; }\n\t\t\t\telse { recover = { node : node, next : null, prior : this.last }; }\n\t\t\t\tif( !this.last ) this.first = recover;\n\t\t\t\tthis.last = recover;\n\t\t\t},\n\t\t\tpop() {\n\t\t\t\tvar result = this.last;\n\t\t\t\tif( !result ) return null;\n\t\t\t\tif( !(this.last = result.prior ) ) this.first = null;\n\t\t\t\tresult.next = this.saved; this.saved = result;\n\t\t\t\treturn result.node;\n\t\t\t}\n\t\t},\n\n\t\tparse_context = CONTEXT_UNKNOWN,\n\t\tcomment = 0,\n\t\tfromHex = false,\n\t\tdecimal = false,\n\t\texponent = false,\n\t\texponent_sign = false,\n\t\texponent_digit = false,\n\t\tinQueue = {\n\t\t\tfirst : null,\n\t\t\tlast : null,\n\t\t\tsaved : null,\n\t\t\tpush(node) {\n\t\t\t\tvar recover = this.saved;\n\t\t\t\tif( recover ) { this.saved = recover.next; recover.node = node; recover.next = null; recover.prior = this.last; }\n\t\t\t\telse { recover = { node : node, next : null, prior : this.last }; }\n\t\t\t\tif( !this.last ) this.first = recover;\n\t\t\t\tthis.last = recover;\n\t\t\t},\n\t\t\tshift() {\n\t\t\t\tvar result = this.first;\n\t\t\t\tif( !result ) return null;\n\t\t\t\tif( !(this.first = result.next ) ) this.last = null;\n\t\t\t\tresult.next = this.saved; this.saved = result;\n\t\t\t\treturn result.node;\n\t\t\t},\n\t\t\tunshift(node) {\n\t\t\t\tvar recover = this.saved;\n\t\t\t\tif( recover ) { this.saved = recover.next; recover.node = node; recover.next = this.first; recover.prior = null; }\n\t\t\t\telse { recover = { node : node, next : this.first, prior : null }; }\n\t\t\t\tif( !this.first ) this.last = recover;\n\t\t\t\tthis.first = recover;\n\t\t\t}\n\t\t},\n\t\tgatheringStringFirstChar = null,\n\t\tgatheringString = false,\n\t\tgatheringNumber = false,\n\t\tstringEscape = false,\n\t\tcr_escaped = false,\n\t\tunicodeWide = false,\n\t\tstringUnicode = false,\n\t\tstringHex = false,\n\t\thex_char = 0,\n\t\thex_char_len = 0,\n\t\tstringOct = false,\n\t\tcompleted = false\n\t\t;\n\n\treturn {\n\t\tvalue() {\n\t\t\tvar r = result;\n\t\t\tresult = undefined;\n\t\t\treturn r;\n\t\t},\n\t\treset() {\n\t\t\tword = WORD_POS_RESET;\n\t\t\tstatus = true;\n\t\t\tif( inQueue.last ) inQueue.last.next = inQueue.save;\n\t\t\tinQueue.save = inQueue.first;\n\t\t\tinQueue.first = inQueue.last = null;\n\t\t\tif( context_stack.last ) context_stack.last.next = context_stack.save;\n\t\t\tcontext_stack.save = inQueue.first;\n\t\t\tcontext_stack.first = context_stack.last = null;//= [];\n\t\t\telement_array = null;\n\t\t\telements = undefined;\n\t\t\tparse_context = CONTEXT_UNKNOWN;\n\t\t\tval.value_type = VALUE_UNSET;\n\t\t\tval.name = null;\n\t\t\tval.string = '';\n\t\t\tpos.line = 1;\n\t\t\tpos.col = 1;\n\t\t\tnegative = false;\n\t\t\tcomment = 0;\n\t\t\tcompleted = false;\n\t\t\tgatheringString = false;\n\t\t\tstringEscape = false;  // string stringEscape intro\n\t\t\tcr_escaped = false;   // carraige return escaped\n\t\t\t//stringUnicode = false;  // reading \\u\n\t\t\t//unicodeWide = false;  // reading \\u{} in string\n\t\t\t//stringHex = false;  // reading \\x in string\n\t\t\t//stringOct = false;  // reading \\[0-3]xx in string\n\t\t},\n\t\twrite(msg) {\n\t\t\tvar retcode;\n\t\t\tif (typeof msg !== \"string\") msg = String(msg);\n\t\t\tfor( retcode = this._write(msg,false); retcode > 0; retcode = this._write() ) {\n\t\t\t\tif( result ) {\n\t\t\t\t\tif( typeof reviver === 'function' ) (function walk(holder, key) {\n\t\t\t\t\t\tvar k, v, value = holder[key];\n\t\t\t\t\t\tif (value && typeof value === 'object') {\n\t\t\t\t\t\t\tfor (k in value) {\n\t\t\t\t\t\t\t\tif (Object.prototype.hasOwnProperty.call(value, k)) {\n\t\t\t\t\t\t\t\t\tv = walk(value, k);\n\t\t\t\t\t\t\t\t\tif (v !== undefined) {\n\t\t\t\t\t\t\t\t\t\tvalue[k] = v;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tdelete value[k];\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn reviver.call(holder, key, value);\n\t\t\t\t\t}({'': result}, ''));\n\t\t\t\t\tcb( result );\n\t\t\t\t\tresult = undefined;\n\t\t\t\t}\n\t\t\t\tif( retcode < 2 )\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t},\n\t\t_write(msg,complete_at_end) {\n\t\t\tvar cInt;\n\t\t\tvar input;\n\t\t\tvar buf;\n\t\t\tvar retval = 0;\n\n\t\t\tfunction throwError( leader, c ) {\n\t\t\t\tthrow new Error( `${leader} '${String.fromCodePoint( c )}' unexpected at ${n} (near '${buf.substr(n>4?(n-4):0,n>4?3:(n-1))}[${String.fromCodePoint( c )}]${buf.substr(n, 10)}') [${pos.line}:${pos.col}]`);\n\t\t\t}\n\n\t\t\tfunction RESET_VAL()  {\n\t\t\t\tval.value_type = VALUE_UNSET;\n\t\t\t\tval.string = '';\n\t\t\t}\n\n\t\t\tfunction numberConvert( string ) {\n\t\t\t\tif( string.length > 1 ) {\n\t\t\t\t\tif( !fromHex && !decimal && !exponent ) {\n\t\t\t\t\t\tif( string.charCodeAt(0) === 48/*'0'*/ )\n\t\t\t\t\t\t\treturn (negative?-1:1) * Number( \"0o\" + string );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn (negative?-1:1) * Number( string );\n\t\t\t}\n\n\t\t\tfunction arrayPush() {\n\t\t\t\tswitch( val.value_type ){\n\t\t\t\tcase VALUE_NUMBER:\n\t\t\t\t\telement_array.push( numberConvert(val.string) );//(negative?-1:1) * Number( val.string ) );\n\t\t\t\t\tbreak;\n\t\t\t\tcase VALUE_STRING:\n\t\t\t\t\telement_array.push( val.string );\n\t\t\t\t\tbreak;\n\t\t\t\tcase VALUE_TRUE:\n\t\t\t\t\telement_array.push( true );\n\t\t\t\t\tbreak;\n\t\t\t\tcase VALUE_FALSE:\n\t\t\t\t\telement_array.push( false );\n\t\t\t\t\tbreak;\n\t\t\t\tcase VALUE_NEG_NAN:\n\t\t\t\t\telement_array.push( -NaN );\n\t\t\t\t\tbreak;\n\t\t\t\tcase VALUE_NAN:\n\t\t\t\t\telement_array.push( NaN );\n\t\t\t\t\tbreak;\n\t\t\t\tcase VALUE_NEG_INFINITY:\n\t\t\t\t\telement_array.push( -Infinity );\n\t\t\t\t\tbreak;\n\t\t\t\tcase VALUE_INFINITY:\n\t\t\t\t\telement_array.push( Infinity );\n\t\t\t\t\tbreak;\n\t\t\t\tcase VALUE_NULL:\n\t\t\t\t\telement_array.push( null );\n\t\t\t\t\tbreak;\n\t\t\t\tcase VALUE_UNDEFINED:\n\t\t\t\t\telement_array.push( undefined );\n\t\t\t\t\tbreak;\n\t\t\t\tcase VALUE_EMPTY:\n\t\t\t\t\telement_array.push( undefined );\n\t\t\t\t\tdelete element_array[element_array.length-1];\n\t\t\t\t\tbreak;\n\t\t\t\tcase VALUE_OBJECT:\n\t\t\t\t\telement_array.push( val.contains );\n\t\t\t\t\tbreak;\n\t\t\t\tcase VALUE_ARRAY:\n\t\t\t\t\telement_array.push( val.contains );\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tconsole.log( \"Unhandled array push.\" );\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tfunction objectPush() {\n\t\t\t\tswitch( val.value_type ){\n\t\t\t\tcase VALUE_NUMBER:\n\t\t\t\t\telements[val.name] = numberConvert(val.string);//(negative?-1:1) * Number( val.string );\n\t\t\t\t\tbreak;\n\t\t\t\tcase VALUE_STRING:\n\t\t\t\t\telements[val.name] = ( val.string );\n\t\t\t\t\tbreak;\n\t\t\t\tcase VALUE_TRUE:\n\t\t\t\t\telements[val.name] = ( true );\n\t\t\t\t\tbreak;\n\t\t\t\tcase VALUE_FALSE:\n\t\t\t\t\telements[val.name] = ( false );\n\t\t\t\t\tbreak;\n\t\t\t\tcase VALUE_NEG_NAN:\n\t\t\t\t\telements[val.name] = ( -NaN );\n\t\t\t\t\tbreak;\n\t\t\t\tcase VALUE_NAN:\n\t\t\t\t\telements[val.name] = ( NaN );\n\t\t\t\t\tbreak;\n\t\t\t\tcase VALUE_NEG_INFINITY:\n\t\t\t\t\telements[val.name] = ( -Infinity );\n\t\t\t\t\tbreak;\n\t\t\t\tcase VALUE_INFINITY:\n\t\t\t\t\telements[val.name] = ( Infinity );\n\t\t\t\t\tbreak;\n\t\t\t\tcase VALUE_NULL:\n\t\t\t\t\telements[val.name] = ( null );\n\t\t\t\t\tbreak;\n\t\t\t\tcase VALUE_UNDEFINED:\n\t\t\t\t\telements[val.name] = ( undefined );\n\t\t\t\t\tbreak;\n\t\t\t\tcase VALUE_OBJECT:\n\t\t\t\t\telements[val.name] = val.contains;\n\t\t\t\t\tbreak;\n\t\t\t\tcase VALUE_ARRAY:\n\t\t\t\t\telements[val.name] = val.contains;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction gatherString( start_c ) {\n\t\t\t\tlet retval = 0;\n\t\t\t\twhile( retval == 0 && ( n < buf.length ) )\n\t\t\t\t{\n\t\t\t\t\tstr = buf.charAt(n);\n\t\t\t\t\tlet cInt = buf.codePointAt(n++);\n\t\t\t\t\tif( cInt >= 0x10000 ) { str += buf.charAt(n); n++; }\n\t\t\t\t\t//console.log( \"gathering....\", stringEscape, str, cInt, unicodeWide, stringHex, stringUnicode, hex_char_len );\n\t\t\t\t\tpos.col++;\n\t\t\t\t\tif( cInt == start_c )//( cInt == 34/*'\"'*/ ) || ( cInt == 39/*'\\''*/ ) || ( cInt == 96/*'`'*/ ) )\n\t\t\t\t\t{\n\t\t\t\t\t\tif( stringEscape ) { val.string += str; stringEscape = false; }\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tretval = -1;\n\t\t\t\t\t\t\tif( stringOct )\n\t\t\t\t\t\t\t\tthrowError( \"Incomplete Octal sequence\", cInt );\n\t\t\t\t\t\t\telse if( stringHex )\n\t\t\t\t\t\t\t\tthrowError( \"Incomplete hexidecimal sequence\", cInt );\n\t\t\t\t\t\t\telse if( stringUnicode )\n\t\t\t\t\t\t\t\tthrowError( \"Incomplete unicode sequence\", cInt );\n\t\t\t\t\t\t\telse if( unicodeWide )\n\t\t\t\t\t\t\t\tthrowError( \"Incomplete long unicode sequence\", cInt );\n\t\t\t\t\t\t\tretval = 1;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\telse if( stringEscape ) {\n\t\t\t\t\t\tif( stringOct ) {\n\t\t\t\t\t\t\tif( hex_char_len < 3 && cInt >= 48/*'0'*/ && cInt <= 57/*'9'*/ ) {\n\t\t\t\t\t\t\t\thex_char *= 8;\n\t\t\t\t\t\t\t\thex_char += cInt - 0x30;\n\t\t\t\t\t\t\t\thex_char_len++;\n\t\t\t\t\t\t\t\tif( hex_char_len === 3 ) {\n\t\t\t\t\t\t\t\t\tval.string += String.fromCodePoint( hex_char );\n\t\t\t\t\t\t\t\t\tstringOct = false;\n\t\t\t\t\t\t\t\t\tstringEscape = false;\n\t\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tif( hex_char > 255 ) {\n\t\t\t\t\t\t\t\t\tthrowError( \"(escaped character, parsing octal escape val=%d) fault while parsing\", cInt );\n\t\t\t\t\t\t\t\t\tretval = -1;\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tval.string += String.fromCodePoint( hex_char );\n\t\t\t\t\t\t\t\tstringOct = false;\n\t\t\t\t\t\t\t\tstringEscape = false;\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if( unicodeWide ) {\n\t\t\t\t\t\t\tif( cInt == 125/*'}'*/ ) {\n\t\t\t\t\t\t\t\tval.string += String.fromCodePoint( hex_char );\n\t\t\t\t\t\t\t\tunicodeWide = false;\n\t\t\t\t\t\t\t\tstringUnicode = false;\n\t\t\t\t\t\t\t\tstringEscape = false;\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\thex_char *= 16;\n\t\t\t\t\t\t\tif( cInt >= 48/*'0'*/ && cInt <= 57/*'9'*/ )      hex_char += cInt - 0x30;\n\t\t\t\t\t\t\telse if( cInt >= 65/*'A'*/ && cInt <= 70/*'F'*/ ) hex_char += ( cInt - 65 ) + 10;\n\t\t\t\t\t\t\telse if( cInt >= 97/*'a'*/ && cInt <= 102/*'f'*/ ) hex_char += ( cInt - 97 ) + 10;\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\tthrowError( \"(escaped character, parsing hex of \\\\u)\", cInt );\n\t\t\t\t\t\t\t\tretval = -1;\n\t\t\t\t\t\t\t\tunicodeWide = false;\n\t\t\t\t\t\t\t\tstringEscape = false;\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if( stringHex || stringUnicode ) {\n\t\t\t\t\t\t\tif( hex_char_len === 0 && cInt === 123/*'{'*/ ) {\n\t\t\t\t\t\t\t\tunicodeWide = true;\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif( hex_char_len < 2 || ( stringUnicode && hex_char_len < 4 ) ) {\n\t\t\t\t\t\t\t\thex_char *= 16;\n\t\t\t\t\t\t\t\tif( cInt >= 48/*'0'*/ && cInt <= 57/*'9'*/ )      hex_char += cInt - 0x30;\n\t\t\t\t\t\t\t\telse if( cInt >= 65/*'A'*/ && cInt <= 70/*'F'*/ ) hex_char += ( cInt - 65 ) + 10;\n\t\t\t\t\t\t\t\telse if( cInt >= 97/*'a'*/ && cInt <= 102/*'f'*/ ) hex_char += ( cInt - 97 ) + 10;\n\t\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\t\tthrowError( stringUnicode?\"(escaped character, parsing hex of \\\\u)\":\"(escaped character, parsing hex of \\\\x)\", cInt );\n\t\t\t\t\t\t\t\t\tretval = -1;\n\t\t\t\t\t\t\t\t\tstringHex = false;\n\t\t\t\t\t\t\t\t\tstringEscape = false;\n\t\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\thex_char_len++;\n\t\t\t\t\t\t\t\tif( stringUnicode ) {\n\t\t\t\t\t\t\t\t\tif( hex_char_len == 4 ) {\n\t\t\t\t\t\t\t\t\t\tval.string += String.fromCodePoint( hex_char );\n\t\t\t\t\t\t\t\t\t\tstringUnicode = false;\n\t\t\t\t\t\t\t\t\t\tstringEscape = false;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse if( hex_char_len == 2 ) {\n\t\t\t\t\t\t\t\t\tval.string += String.fromCodePoint( hex_char );\n\t\t\t\t\t\t\t\t\tstringHex = false;\n\t\t\t\t\t\t\t\t\tstringEscape = false;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tswitch( cInt )\n\t\t\t\t\t\t{\n\t\t\t\t\t\tcase 13/*'\\r'*/:\n\t\t\t\t\t\t\tcr_escaped = true;\n\t\t\t\t\t\t\tpos.col = 1;\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\tcase 10/*'\\n'*/:\n\t\t\t\t\t\tcase 2028: // LS (Line separator)\n\t\t\t\t\t\tcase 2029: // PS (paragraph separate)\n\t\t\t\t\t\t\tpos.line++;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 116/*'t'*/:\n\t\t\t\t\t\t\tval.string += '\\t';\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 98/*'b'*/:\n\t\t\t\t\t\t\tval.string += '\\b';\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 110/*'n'*/:\n\t\t\t\t\t\t\tval.string += '\\n';\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 114/*'r'*/:\n\t\t\t\t\t\t\tval.string += '\\r';\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 102/*'f'*/:\n\t\t\t\t\t\t\tval.string += '\\f';\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 48/*'0'*/: case 49/*'1'*/: case 50/*'2'*/: case 51/*'3'*/:\n\t\t\t\t\t\t\tstringOct = true;\n\t\t\t\t\t\t\thex_char = cInt - 48;\n\t\t\t\t\t\t\thex_char_len = 1;\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\tcase 120/*'x'*/:\n\t\t\t\t\t\t\tstringHex = true;\n\t\t\t\t\t\t\thex_char_len = 0;\n\t\t\t\t\t\t\thex_char = 0;\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\tcase 117/*'u'*/:\n\t\t\t\t\t\t\tstringUnicode = true;\n\t\t\t\t\t\t\thex_char_len = 0;\n\t\t\t\t\t\t\thex_char = 0;\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t//case 47/*'/'*/:\n\t\t\t\t\t\t//case 92/*'\\\\'*/:\n\t\t\t\t\t\t//case 34/*'\"'*/:\n\t\t\t\t\t\t//case 39/*\"'\"*/:\n\t\t\t\t\t\t//case 96/*'`'*/:\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tval.string += str;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//console.log( \"other...\" );\n\t\t\t\t\t\tstringEscape = false;\n\t\t\t\t\t}\n\t\t\t\t\telse if( cInt === 92/*'\\\\'*/ )\n\t\t\t\t\t{\n\t\t\t\t\t\tif( stringEscape ) {\n\t\t\t\t\t\t\tval.string += '\\\\';\n\t\t\t\t\t\t\tstringEscape = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tstringEscape = true;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif( cr_escaped ) {\n\t\t\t\t\t\t\tcr_escaped = false;\n\t\t\t\t\t\t\tif( cInt == 10/*'\\n'*/ ) {\n\t\t\t\t\t\t\t\tpos.line++;\n\t\t\t\t\t\t\t\tpos.col = 1;\n\t\t\t\t\t\t\t\tstringEscape = false;\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tpos.line++;\n\t\t\t\t\t\t\t\tpos.col = 1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tval.string += str;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn retval;\n\t\t\t}\n\n\n\t\t\tfunction collectNumber() {\n\t\t\t\tlet _n;\n\t\t\t\twhile( (_n = n) < buf.length )\n\t\t\t\t{\n\t\t\t\t\tstr = buf.charAt(_n);\n\t\t\t\t\tlet cInt = buf.codePointAt(n++);\n\t\t\t\t\tif( cInt >= 0x10000 ) { throwError( \"fault while parsing number;\", cInt ); str += buf.charAt(n); n++; }\n\t\t\t\t\tif( cInt == 95 /*_*/ )\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\tpos.col++;\n\t\t\t\t\t// leading zeros should be forbidden.\n\t\t\t\t\tif( cInt >= 48/*'0'*/ && cInt <= 57/*'9'*/ )\n\t\t\t\t\t{\n\t\t\t\t\t\tif( exponent ) {\n\t\t\t\t\t\t\texponent_digit = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tval.string += str;\n\t\t\t\t\t} else if( cInt == 45/*'-'*/ || cInt == 43/*'+'*/ ) {\n\t\t\t\t\t\tif( val.string.length == 0 || ( exponent && !exponent_sign && !exponent_digit ) ) {\n\t\t\t\t\t\t\tval.string += str;\n\t\t\t\t\t\t\texponent_sign = true;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tstatus = false; \n\t\t\t\t\t\t\tthrowError( \"fault while parsing number;\", cInt );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if( cInt == 46/*'.'*/ ) {\n\t\t\t\t\t\tif( !decimal && !fromHex && !exponent ) {\n\t\t\t\t\t\t\tval.string += str;\n\t\t\t\t\t\t\tdecimal = true;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tstatus = false;\n\t\t\t\t\t\t\tthrowError( \"fault while parsing number;\", cInt );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if( cInt == 120/*'x'*/ || cInt == 98/*'b'*/ || cInt == 111/*'o'*/\n\t\t\t\t\t         || cInt == 88/*'X'*/ || cInt == 66/*'B'*/ || cInt == 79/*'O'*/ ) {\n\t\t\t\t\t\t// hex conversion.\n\t\t\t\t\t\tif( !fromHex && val.string == '0' ) {\n\t\t\t\t\t\t\tfromHex = true;\n\t\t\t\t\t\t\tval.string += str;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tstatus = false;\n\t\t\t\t\t\t\tthrowError( \"fault while parsing number;\", cInt );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if( ( cInt == 101/*'e'*/ ) || ( cInt == 69/*'E'*/ ) ) {\n\t\t\t\t\t\tif( !exponent ) {\n\t\t\t\t\t\t\tval.string += str;\n\t\t\t\t\t\t\texponent = true;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tstatus = false;\n\t\t\t\t\t\t\tthrowError( \"fault while parsing number;\", cInt );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif( cInt == 32/*' '*/ || cInt == 13 || cInt == 10 || cInt == 9\n\t\t\t\t\t\t  || cInt == 0xFEFF || cInt == 44/*','*/ || cInt == 125/*'}'*/ || cInt == 93/*']'*/\n\t\t\t\t\t\t  || cInt == 58/*':'*/ ) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tif( complete_at_end ) {\n\t\t\t\t\t\t\t\tstatus = false;\n\t\t\t\t\t\t\t\tthrowError( \"fault while parsing number;\", cInt );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tn = _n;\n\t                \n\t\t\t\tif( (!complete_at_end) && n == buf.length )\n\t\t\t\t{\n\t\t\t\t\tgatheringNumber = true;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tgatheringNumber = false;\n\t\t\t\t\tval.value_type = VALUE_NUMBER;\n\t\t\t\t\tif( parse_context == CONTEXT_UNKNOWN ) {\n\t\t\t\t\t\tcompleted = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\n\t\t\tif( !status )\n\t\t\t\treturn -1;\n\n\t\t\tif( msg && msg.length ) {\n\t\t\t\tinput = getBuffer();\n\t\t\t\tinput.buf = msg;\n\t\t\t\tinQueue.push( input );\n\t\t\t} else {\n\t\t\t\tif( gatheringNumber ) {\n\t\t\t\t\t//console.log( \"Force completed.\")\n\t\t\t\t\tgatheringNumber = false;\n\t\t\t\t\tval.value_type = VALUE_NUMBER;\n\t\t\t\t\tif( parse_context == CONTEXT_UNKNOWN ) {\n\t\t\t\t\t\tcompleted = true;\n\t\t\t\t\t}\n\t\t\t\t\tretval = 1;  // if returning buffers, then obviously there's more in this one.\n\t\t\t\t}\n\t\t\t}\n\n\t\t\twhile( status && ( input = inQueue.shift() ) ) {\n\t\t\t\tn = input.n;\n\t\t\t\tbuf = input.buf;\n\t\t\t\tif( gatheringString ) {\n\t\t\t\t\tlet string_status = gatherString( gatheringStringFirstChar );\n\t\t\t\t\tif( string_status < 0 )\n\t\t\t\t\t\tstatus = false;\n\t\t\t\t\telse if( string_status > 0 )\n\t\t\t\t\t{\n\t\t\t\t\t\tgatheringString = false;\n\t\t\t\t\t\tif( status ) val.value_type = VALUE_STRING;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif( gatheringNumber ) {\n\t\t\t\t\tcollectNumber();\n\t\t\t\t}\n\n\t\t\t\twhile( !completed && status && ( n < buf.length ) )\n\t\t\t\t{\n\t\t\t\t\tstr = buf.charAt(n);\n\t\t\t\t\tcInt = buf.codePointAt(n++);\n\t\t\t\t\tif( cInt >= 0x10000 ) { str += buf.charAt(n); n++; }\n\t\t\t\t\tpos.col++;\n\t\t\t\t\tif( comment ) {\n\t\t\t\t\t\tif( comment == 1 ) {\n\t\t\t\t\t\t\tif( cInt == 42/*'*'*/ ) { comment = 3; continue; }\n\t\t\t\t\t\t\tif( cInt != 47/*'/'*/ ) {\n\t\t\t\t\t\t\t\tthrowError( \"fault while parsing;\", cInt );\n\t\t\t\t\t\t\t\tstatus = false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse comment = 2;\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif( comment == 2 ) {\n\t\t\t\t\t\t\tif( cInt == 10/*'\\n'*/ ) { comment = 0; continue; }\n\t\t\t\t\t\t\telse continue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif( comment == 3 ){\n\t\t\t\t\t\t\tif( cInt == 42/*'*'*/ ) { comment = 4; continue; }\n\t\t\t\t\t\t\telse continue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif( comment == 4 ) {\n\t\t\t\t\t\t\tif( cInt == 47/*'/'*/ ) { comment = 0; continue; }\n\t\t\t\t\t\t\telse { if( cInt != 42/*'*'*/ ) comment = 3; continue; }\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tswitch( cInt )\n\t\t\t\t\t{\n\t\t\t\t\tcase 47/*'/'*/:\n\t\t\t\t\t\tif( !comment ) comment = 1;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 123/*'{'*/:\n\t\t\t\t\t\tif( word == WORD_POS_FIELD || word == WORD_POS_AFTER_FIELD || ( parse_context == CONTEXT_OBJECT_FIELD && word == WORD_POS_RESET ) ) {\n\t\t\t\t\t\t\tthrowError( \"fault while parsing; getting field name unexpected \", cInt );\n\t\t\t\t\t\t\tstatus = false;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlet old_context = getContext();\n\n\t\t\t\t\t\t\tval.value_type = VALUE_OBJECT;\n\t\t\t\t\t\t\tlet tmpobj = {};\n\t\t\t\t\t\t\tif( parse_context == CONTEXT_UNKNOWN )\n\t\t\t\t\t\t\t\tresult = elements = tmpobj;\n\t\t\t\t\t\t\t//else if( parse_context == CONTEXT_IN_ARRAY )\n\t\t\t\t\t\t\t//\telement_array.push( tmpobj );\n\t\t\t\t\t\t\telse if( parse_context == CONTEXT_OBJECT_FIELD_VALUE )\n\t\t\t\t\t\t\t\telements[val.name] = tmpobj;\n\n\t\t\t\t\t\t\told_context.context = parse_context;\n\t\t\t\t\t\t\told_context.elements = elements;\n\t\t\t\t\t\t\told_context.element_array = element_array;\n\t\t\t\t\t\t\told_context.name = val.name;\n\t\t\t\t\t\t\telements = tmpobj;\n\t\t\t\t\t\t\tcontext_stack.push( old_context );\n\t\t\t\t\t\t\tRESET_VAL();\n\t\t\t\t\t\t\tparse_context = CONTEXT_OBJECT_FIELD;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 91/*'['*/:\n\t\t\t\t\t\tif( parse_context == CONTEXT_OBJECT_FIELD || word == WORD_POS_FIELD || word == WORD_POS_AFTER_FIELD ) {\n\t\t\t\t\t\t\tthrowError( \"Fault while parsing; while getting field name unexpected\", cInt );\n\t\t\t\t\t\t\tstatus = false;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlet old_context = getContext();\n\n\t\t\t\t\t\t\tval.value_type = VALUE_ARRAY;\n\t\t\t\t\t\t\tlet tmparr = [];\n\t\t\t\t\t\t\tif( parse_context == CONTEXT_UNKNOWN )\n\t\t\t\t\t\t\t\tresult = element_array = tmparr;\n\t\t\t\t\t\t\t//else if( parse_context == CONTEXT_IN_ARRAY )\n\t\t\t\t\t\t\t//\telement_array.push( tmparr );\n\t\t\t\t\t\t\telse if( parse_context == CONTEXT_OBJECT_FIELD_VALUE )\n\t\t\t\t\t\t\t\telements[val.name] = tmparr;\n\n\t\t\t\t\t\t\told_context.context = parse_context;\n\t\t\t\t\t\t\told_context.elements = elements;\n\t\t\t\t\t\t\told_context.element_array = element_array;\n\t\t\t\t\t\t\told_context.name = val.name;\n\t\t\t\t\t\t\telement_array = tmparr;\n\t\t\t\t\t\t\tcontext_stack.push( old_context );\n\n\t\t\t\t\t\t\tRESET_VAL();\n\t\t\t\t\t\t\tparse_context = CONTEXT_IN_ARRAY;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 58/*':'*/:\n\t\t\t\t\t\t//if(_DEBUG_PARSING) console.log( \"colon context:\", parse_context );\n\t\t\t\t\t\tif( parse_context == CONTEXT_OBJECT_FIELD )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif( word != WORD_POS_RESET\n\t\t\t\t\t\t\t\t&& word != WORD_POS_FIELD\n\t\t\t\t\t\t\t\t&& word != WORD_POS_AFTER_FIELD ) {\n\t\t\t\t\t\t\t\t// allow starting a new word\n\t\t\t\t\t\t\t\tstatus = FALSE;\n\t\t\t\t\t\t\t\tthorwError( `fault while parsing; unquoted keyword used as object field name (state:${word})`, cInt );\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tword = WORD_POS_RESET;\n\t\t\t\t\t\t\tval.name = val.string;\n\t\t\t\t\t\t\tval.string = '';\n\t\t\t\t\t\t\tparse_context = CONTEXT_OBJECT_FIELD_VALUE;\n\t\t\t\t\t\t\tval.value_type = VALUE_UNSET;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif( parse_context == CONTEXT_IN_ARRAY )\n\t\t\t\t\t\t\t\tthrowError(  \"(in array, got colon out of string):parsing fault;\", cInt );\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\tthrowError( \"(outside any object, got colon out of string):parsing fault;\", cInt );\n\t\t\t\t\t\t\tstatus = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 125/*'}'*/:\n\t\t\t\t\t\t//if(_DEBUG_PARSING) console.log( \"close bracket context:\", word, parse_context );\n\t\t\t\t\t\tif( word == WORD_POS_END ) {\n\t\t\t\t\t\t\t// allow starting a new word\n\t\t\t\t\t\t\tword = WORD_POS_RESET;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// coming back after pushing an array or sub-object will reset the contxt to FIELD, so an end with a field should still push value.\n\t\t\t\t\t\tif( ( parse_context == CONTEXT_OBJECT_FIELD ) ) {\n\t\t\t\t\t\t\tRESET_VAL();\n\t\t\t\t\t\t\tlet old_context = context_stack.pop();\n\t\t\t\t\t\t\tparse_context = old_context.context; // this will restore as IN_ARRAY or OBJECT_FIELD\n\t\t\t\t\t\t\telements = old_context.elements;\n\t\t\t\t\t\t\telement_array = old_context.element_array;\n\t\t\t\t\t\t\tdropContext( old_context );\n\t\t\t\t\t\t\tif( parse_context == CONTEXT_UNKNOWN ) {\n\t\t\t\t\t\t\t\tcompleted = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if( ( parse_context == CONTEXT_OBJECT_FIELD_VALUE ) )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif( val.value_type != VALUE_UNSET ) {\n\t\t\t\t\t\t\t\tobjectPush();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tval.value_type = VALUE_OBJECT;\n\t\t\t\t\t\t\tval.contains = elements;\n\n\t\t\t\t\t\t\t//let old_context = context_stack.pop();\n\t\t\t\t\t\t\tvar old_context = context_stack.pop();\n\t\t\t\t\t\t\tval.name = old_context.name;\n\t\t\t\t\t\t\tparse_context = old_context.context; // this will restore as IN_ARRAY or OBJECT_FIELD\n\t\t\t\t\t\t\telements = old_context.elements;\n\t\t\t\t\t\t\telement_array = old_context.element_array;\n\t\t\t\t\t\t\tdropContext( old_context );\n\t\t\t\t\t\t\tif( parse_context == CONTEXT_UNKNOWN ) {\n\t\t\t\t\t\t\t\tcompleted = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthrowError( \"Fault while parsing; unexpected\", cInt );\n\t\t\t\t\t\t\tstatus = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tnegative = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 93/*']'*/:\n\t\t\t\t\t\tif( word == WORD_POS_END ) word = WORD_POS_RESET;\n\t\t\t\t\t\tif( parse_context == CONTEXT_IN_ARRAY )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif( val.value_type != VALUE_UNSET ) {\n\t\t\t\t\t\t\t\tarrayPush();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t//RESET_VAL();\n\t\t\t\t\t\t\tval.value_type = VALUE_ARRAY;\n\t\t\t\t\t\t\tval.contains = element_array;\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvar old_context = context_stack.pop();\n\t\t\t\t\t\t\t\tval.name = old_context.name;\n\t\t\t\t\t\t\t\tparse_context = old_context.context;\n\t\t\t\t\t\t\t\telements = old_context.elements;\n\t\t\t\t\t\t\t\telement_array = old_context.element_array;\n\t\t\t\t\t\t\t\tdropContext( old_context );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif( parse_context == CONTEXT_UNKNOWN ) {\n\t\t\t\t\t\t\t\tcompleted = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthrowError( `bad context ${parse_context}; fault while parsing`, cInt );// fault\n\t\t\t\t\t\t\tstatus = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tnegative = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 44/*','*/:\n\t\t\t\t\t\tif( word == WORD_POS_END ) word = WORD_POS_RESET;  // allow collect new keyword\n\t\t\t\t\t\tif( parse_context == CONTEXT_IN_ARRAY )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif( val.value_type == VALUE_UNSET )\n\t\t\t\t\t\t\t\tval.value_type = VALUE_EMPTY; // in an array, elements after a comma should init as undefined...\n\n\t\t\t\t\t\t\tif( val.value_type != VALUE_UNSET ) {\n\t\t\t\t\t\t\t\tarrayPush();\n\t\t\t\t\t\t\t\tRESET_VAL();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// undefined allows [,,,] to be 4 values and [1,2,3,] to be 4 values with an undefined at end.\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if( parse_context == CONTEXT_OBJECT_FIELD_VALUE )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tparse_context = CONTEXT_OBJECT_FIELD;\n\t\t\t\t\t\t\tif( val.value_type != VALUE_UNSET ) {\n\t\t\t\t\t\t\t\tobjectPush();\n\t\t\t\t\t\t\t\tRESET_VAL();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstatus = false;\n\t\t\t\t\t\t\tthrowError( \"bad context; excessive commas while parsing;\", cInt );// fault\n\t\t\t\t\t\t}\n\t\t\t\t\t\tnegative = false;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tif( parse_context == CONTEXT_OBJECT_FIELD ) {\n\t\t\t\t\t\t\tswitch( cInt )\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcase 96://'`':\n\t\t\t\t\t\t\tcase 34://'\"':\n\t\t\t\t\t\t\tcase 39://'\\'':\n\t\t\t\t\t\t\t\tif( word == WORD_POS_RESET ) {\n\t\t\t\t\t\t\t\t\tlet string_status = gatherString(cInt );\n\t\t\t\t\t\t\t\t\tif( string_status ) {\n\t\t\t\t\t\t\t\t\t\tval.value_type = VALUE_STRING;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tgatheringStringFirstChar = cInt;\n\t\t\t\t\t\t\t\t\t\tgatheringString = true;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tthrowError( \"fault while parsing; quote not at start of field name\", cInt );\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 10://'\\n':\n\t\t\t\t\t\t\t\tpos.line++;\n\t\t\t\t\t\t\t\tpos.col = 1;\n\t\t\t\t\t\t\t\t// fall through to normal space handling - just updated line/col position\n\t\t\t\t\t\t\tcase 13://'\\r':\n\t\t\t\t\t\t\tcase 32://' ':\n\t\t\t\t\t\t\tcase 9://'\\t':\n\t\t\t\t\t\t\tcase 0xFEFF: // ZWNBS is WS though\n\t\t\t\t\t\t\t\tif( word == WORD_POS_END ) { // allow collect new keyword\n\t\t\t\t\t\t\t\t\tword = WORD_POS_RESET;\n\t\t\t\t\t\t\t\t\tif( parse_context == CONTEXT_UNKNOWN ) {\n\t\t\t\t\t\t\t\t\t\tcompleted = true;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif( word == WORD_POS_RESET || word == WORD_POS_AFTER_FIELD )  // ignore leading and trailing whitepsace\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\telse if( word == WORD_POS_FIELD ) {\n\t\t\t\t\t\t\t\t\tword = WORD_POS_AFTER_FIELD;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\t\tstatus = false;\n\t\t\t\t\t\t\t\t\tthrowError( \"fault while parsing; whitepsace unexpected\", cInt );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// skip whitespace\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tif( word == WORD_POS_AFTER_FIELD ) {\n\t\t\t\t\t\t\t\t\tstatus = false;\n\t\t\t\t\t\t\t\t\tthrowError( \"fault while parsing; character unexpected\", cInt );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif( word == WORD_POS_RESET ) word = WORD_POS_FIELD;\n\t\t\t\t\t\t\t\tval.string += str;\n\t\t\t\t\t\t\t\tbreak; // default\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse switch( cInt )\n\t\t\t\t\t\t{\n\t\t\t\t\t\tcase 96://'`':\n\t\t\t\t\t\tcase 34://'\"':\n\t\t\t\t\t\tcase 39://'\\'':\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlet string_status = gatherString( cInt );\n\t\t\t\t\t\t\tif( string_status ) {\n\t\t\t\t\t\t\t\tval.value_type = VALUE_STRING;\n\t\t\t\t\t\t\t\tword = WORD_POS_END;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tgatheringStringFirstChar = cInt;\n\t\t\t\t\t\t\t\tgatheringString = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcase 10://'\\n':\n\t\t\t\t\t\t\tpos.line++;\n\t\t\t\t\t\t\tpos.col = 1;\n\t\t\t\t\t\tcase 32://' ':\n\t\t\t\t\t\tcase 9://'\\t':\n\t\t\t\t\t\tcase 13://'\\r':\n\t\t\t\t\t\tcase 0xFEFF://'\\uFEFF':\n\t\t\t\t\t\t\tif( word == WORD_POS_END ) {\n\t\t\t\t\t\t\t\tword = WORD_POS_RESET;\n\t\t\t\t\t\t\t\tif( parse_context == CONTEXT_UNKNOWN ) {\n\t\t\t\t\t\t\t\t\tcompleted = true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif( word == WORD_POS_RESET )\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\telse if( word == WORD_POS_FIELD ) {\n\t\t\t\t\t\t\t\tword = WORD_POS_AFTER_FIELD;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\tstatus = false;\n\t\t\t\t\t\t\t\tthrowError( \"fault parsing whitespace\", cInt );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t//----------------------------------------------------------\n\t\t\t\t\t//  catch characters for true/false/null/undefined which are values outside of quotes\n\t\t\t\t\t\tcase 116://'t':\n\t\t\t\t\t\t\tif( word == WORD_POS_RESET ) word = WORD_POS_TRUE_1;\n\t\t\t\t\t\t\telse if( word == WORD_POS_INFINITY_6 ) word = WORD_POS_INFINITY_7;\n\t\t\t\t\t\t\telse { status = false; throwError( \"fault parsing\", cInt ); }// fault\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 114://'r':\n\t\t\t\t\t\t\tif( word == WORD_POS_TRUE_1 ) word = WORD_POS_TRUE_2;\n\t\t\t\t\t\t\telse { status = false; throwError( \"fault parsing\", cInt ); }// fault\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 117://'u':\n\t\t\t\t\t\t\tif( word == WORD_POS_TRUE_2 ) word = WORD_POS_TRUE_3;\n\t\t\t\t\t\t\telse if( word == WORD_POS_NULL_1 ) word = WORD_POS_NULL_2;\n\t\t\t\t\t\t\telse if( word == WORD_POS_RESET ) word = WORD_POS_UNDEFINED_1;\n\t\t\t\t\t\t\telse { status = false; throwError( \"fault parsing\", cInt ); }// fault\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 101://'e':\n\t\t\t\t\t\t\tif( word == WORD_POS_TRUE_3 ) {\n\t\t\t\t\t\t\t\tval.value_type = VALUE_TRUE;\n\t\t\t\t\t\t\t\tword = WORD_POS_END;\n\t\t\t\t\t\t\t} else if( word == WORD_POS_FALSE_4 ) {\n\t\t\t\t\t\t\t\tval.value_type = VALUE_FALSE;\n\t\t\t\t\t\t\t\tword = WORD_POS_END;\n\t\t\t\t\t\t\t} else if( word == WORD_POS_UNDEFINED_3 ) word = WORD_POS_UNDEFINED_4;\n\t\t\t\t\t\t\telse if( word == WORD_POS_UNDEFINED_7 ) word = WORD_POS_UNDEFINED_8;\n\t\t\t\t\t\t\telse { status = false; throwError( \"fault parsing\", cInt ); }// fault\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 110://'n':\n\t\t\t\t\t\t\tif( word == WORD_POS_RESET ) word = WORD_POS_NULL_1;\n\t\t\t\t\t\t\telse if( word == WORD_POS_UNDEFINED_1 ) word = WORD_POS_UNDEFINED_2;\n\t\t\t\t\t\t\telse if( word == WORD_POS_UNDEFINED_6 ) word = WORD_POS_UNDEFINED_7;\n\t\t\t\t\t\t\telse if( word == WORD_POS_INFINITY_1 ) word = WORD_POS_INFINITY_2;\n\t\t\t\t\t\t\telse if( word == WORD_POS_INFINITY_4 ) word = WORD_POS_INFINITY_5;\n\t\t\t\t\t\t\telse { status = false; throwError( \"fault parsing\", cInt ); }// fault\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 100://'d':\n\t\t\t\t\t\t\tif( word == WORD_POS_UNDEFINED_2 ) word = WORD_POS_UNDEFINED_3;\n\t\t\t\t\t\t\telse if( word == WORD_POS_UNDEFINED_8 ) { val.value_type=VALUE_UNDEFINED; word = WORD_POS_END; }\n\t\t\t\t\t\t\telse { status = false; throwError( \"fault parsing\", cInt ); }// fault\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 105://'i':\n\t\t\t\t\t\t\tif( word == WORD_POS_UNDEFINED_5 ) word = WORD_POS_UNDEFINED_6;\n\t\t\t\t\t\t\telse if( word == WORD_POS_INFINITY_3 ) word = WORD_POS_INFINITY_4;\n\t\t\t\t\t\t\telse if( word == WORD_POS_INFINITY_5 ) word = WORD_POS_INFINITY_6;\n\t\t\t\t\t\t\telse { status = false; throwError( \"fault parsing\", cInt ); }// fault\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 108://'l':\n\t\t\t\t\t\t\tif( word == WORD_POS_NULL_2 ) word = WORD_POS_NULL_3;\n\t\t\t\t\t\t\telse if( word == WORD_POS_NULL_3 ) {\n\t\t\t\t\t\t\t\tval.value_type = VALUE_NULL;\n\t\t\t\t\t\t\t\tword = WORD_POS_END;\n\t\t\t\t\t\t\t} else if( word == WORD_POS_FALSE_2 ) word = WORD_POS_FALSE_3;\n\t\t\t\t\t\t\telse { status = false; throwError( \"fault parsing\", cInt ); }// fault\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 102://'f':\n\t\t\t\t\t\t\tif( word == WORD_POS_RESET ) word = WORD_POS_FALSE_1;\n\t\t\t\t\t\t\telse if( word == WORD_POS_UNDEFINED_4 ) word = WORD_POS_UNDEFINED_5;\n\t\t\t\t\t\t\telse if( word == WORD_POS_INFINITY_2 ) word = WORD_POS_INFINITY_3;\n\t\t\t\t\t\t\telse { status = false; throwError( \"fault parsing\", cInt ); }// fault\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 97://'a':\n\t\t\t\t\t\t\tif( word == WORD_POS_FALSE_1 ) word = WORD_POS_FALSE_2;\n\t\t\t\t\t\t\telse if( word == WORD_POS_NAN_1 ) word = WORD_POS_NAN_2;\n\t\t\t\t\t\t\telse { status = false; throwError( \"fault parsing\", cInt ); }// fault\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 115://'s':\n\t\t\t\t\t\t\tif( word == WORD_POS_FALSE_3 ) word = WORD_POS_FALSE_4;\n\t\t\t\t\t\t\telse { status = false; throwError( \"fault parsing\", cInt ); }// fault\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 73://'I':\n\t\t\t\t\t\t\tif( word == WORD_POS_RESET ) word = WORD_POS_INFINITY_1;\n\t\t\t\t\t\t\telse { status = false; throwError( \"fault parsing\", cInt ); }// fault\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 78://'N':\n\t\t\t\t\t\t\tif( word == WORD_POS_RESET ) word = WORD_POS_NAN_1;\n\t\t\t\t\t\t\telse if( word == WORD_POS_NAN_2 ) { val.value_type = negative ? VALUE_NEG_NAN : VALUE_NAN; negative = false; word = WORD_POS_END; }\n\t\t\t\t\t\t\telse { status = false; throwError( \"fault parsing\", cInt ); }// fault\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 121://'y':\n\t\t\t\t\t\t\tif( word == WORD_POS_INFINITY_7 ) { val.value_type = negative ? VALUE_NEG_INFINITY : VALUE_INFINITY; negative = false; word = WORD_POS_END; }\n\t\t\t\t\t\t\telse { status = false; throwError( \"fault parsing\", cInt ); }// fault\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 45://'-':\n\t\t\t\t\t\t\tif( word == WORD_POS_RESET ) negative = !negative;\n\t\t\t\t\t\t\telse { status = false; throwError( \"fault parsing\", cInt ); }// fault\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t//\n \t \t \t \t \t//----------------------------------------------------------\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tif( ( cInt >= 48/*'0'*/ && cInt <= 57/*'9'*/ ) || ( cInt == 43/*'+'*/ ) || ( cInt == 46/*'.'*/ ) || ( cInt == 45/*'-'*/ ) )\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tfromHex = false;\n\t\t\t\t\t\t\t\texponent = false;\n\t\t\t\t\t\t\t\texponent_sign = false;\n\t\t\t\t\t\t\t\texponent_digit = false;\n\t\t\t\t\t\t\t\tdecimal = false;\n\t\t\t\t\t\t\t\tval.string = str;\n\t\t\t\t\t\t\t\tinput.n = n;\n\t\t\t\t\t\t\t\tcollectNumber();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstatus = false;\n\t\t\t\t\t\t\t\tthrowError( \"fault parsing\", cInt );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak; // default\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak; // default of high level switch\n\t\t\t\t\t}\n\t\t\t\t\tif( completed ) {\n\t\t\t\t\t\tif( word == WORD_POS_END ) {\n\t\t\t\t\t\t\tword = WORD_POS_RESET;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif( n == buf.length ) {\n\t\t\t\t\tdropBuffer( input );\n\t\t\t\t\tif( gatheringString || gatheringNumber || parse_context == CONTEXT_OBJECT_FIELD ) {\n\t\t\t\t\t\tretval = 0;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tif( parse_context == CONTEXT_UNKNOWN && ( val.value_type != VALUE_UNSET || result ) ) {\n\t\t\t\t\t\t\tcompleted = true;\n\t\t\t\t\t\t\tretval = 1;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t// put these back into the stack.\n\t\t\t\t\tinput.n = n;\n\t\t\t\t\tinQueue.unshift( input );\n\t\t\t\t\tretval = 2;  // if returning buffers, then obviously there's more in this one.\n\t\t\t\t}\n\t\t\t\tif( completed )\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif( !status ) return -1;\n\t\t\tif( completed && val.value_type != VALUE_UNSET ) {\n\t\t\t\tswitch( val.value_type ) {\n\t\t\t\tcase VALUE_NUMBER:\n\t\t\t\t\tresult = numberConvert(val.string);\n\t\t\t\t\tbreak;\n\t\t\t\tcase VALUE_STRING:\n\t\t\t\t\tresult = val.string;\n\t\t\t\t\tbreak;\n\t\t\t\tcase VALUE_TRUE:\n\t\t\t\t\tresult = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase VALUE_FALSE:\n\t\t\t\t\tresult = false;\n\t\t\t\t\tbreak;\n\t\t\t\tcase VALUE_NULL:\n\t\t\t\t\tresult = null;\n\t\t\t\t\tbreak;\n\t\t\t\tcase VALUE_UNDEFINED:\n\t\t\t\t\tresult = undefined;\n\t\t\t\t\tbreak;\n\t\t\t\tcase VALUE_NAN:\n\t\t\t\t\tresult = NaN;\n\t\t\t\t\tbreak;\n\t\t\t\tcase VALUE_NEG_NAN:\n\t\t\t\t\tresult = -NaN;\n\t\t\t\t\tbreak;\n\t\t\t\tcase VALUE_INFINITY:\n\t\t\t\t\tresult = Infinity;\n\t\t\t\t\tbreak;\n\t\t\t\tcase VALUE_NEG_INFINITY:\n\t\t\t\t\tresult = -Infinity;\n\t\t\t\t\tbreak;\n\t\t\t\tcase VALUE_OBJECT: // never happens\n\t\t\t\t\tresult = val.contains;\n\t\t\t\t\tbreak;\n\t\t\t\tcase VALUE_ARRAY: // never happens\n\t\t\t\t\tresult = val.contains;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tnegative = false;\n\t\t\t\tval.string = '';\n\t\t\t\tval.value_type = VALUE_UNSET;\n\t\t\t}\n\t\t\tcompleted = false;\n\t\t\treturn retval;\n\t\t}\n\t}\n};\n\n\n\nconst _parser = [Object.freeze( JSON6.begin() )];\nvar _parse_level = 0;\nJSON6.parse = function( msg, reviver ) {\n\t//var parser = JSON6.begin();\n\tvar parse_level = _parse_level++;\n\tvar parser;\n\tif( _parser.length <= parse_level )\n\t\t_parser.push( Object.freeze( JSON6.begin() ) );\n\tparser = _parser[parse_level];\n\tif (typeof msg !== \"string\") msg = String(msg);\n\tparser.reset();\n\tif( parser._write( msg, true ) > 0 )\n\t{\n\t\tvar result = parser.value();\n\t\tvar reuslt = typeof reviver === 'function' ? (function walk(holder, key) {\n\t\t\tvar k, v, value = holder[key];\n\t\t\tif (value && typeof value === 'object') {\n\t\t\t\tfor (k in value) {\n\t\t\t\t\tif (Object.prototype.hasOwnProperty.call(value, k)) {\n\t\t\t\t\t\tv = walk(value, k);\n\t\t\t\t\t\tif (v !== undefined) {\n\t\t\t\t\t\t\tvalue[k] = v;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tdelete value[k];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn reviver.call(holder, key, value);\n\t\t}({'': result}, '')) : result;\n\t\t_parse_level--;\n\t\treturn result;\n\t}\n\treturn undefined;\n};\nJSON6.stringify = JSON.stringify;\n});\n\nvar lib = json6;\n\nexport default lib;\n","// We want it to work in the browser, so commenting out\n// import jsonExtra from 'json5';\n// import jsonExtra from 'json-6';\nimport jsonExtra from '../node_modules/json-6/dist/index.mjs';\n\nexport const unescapeBackslashes = (str) => {\n  return str.replace(/\\\\+/gu, (esc) => {\n    return esc.slice(0, esc.length / 2);\n  });\n};\n\nexport const parseJSONExtra = (args) => {\n  return jsonExtra.parse(\n    // Doesn't actually currently allow explicit brackets,\n    //  but in case we change our regex to allow inner brackets\n    '{' + (args || '').replace(/^\\{/u, '').replace(/\\}$/u, '') + '}'\n  );\n};\n\nexport const processRegex = (regex, str, {\n  onMatch,\n  extra,\n  betweenMatches,\n  afterMatch,\n  escapeAtOne\n}) => {\n  let match;\n  let previousIndex = 0;\n  if (extra) {\n    betweenMatches = extra;\n    afterMatch = extra;\n    escapeAtOne = extra;\n  }\n  while ((match = regex.exec(str)) !== null) {\n    const [_, esc] = match;\n    const {lastIndex} = regex;\n\n    const startMatchPos = lastIndex - _.length;\n    if (startMatchPos > previousIndex) {\n      betweenMatches(str.slice(previousIndex, startMatchPos));\n    }\n\n    if (escapeAtOne && esc.length % 2) {\n      previousIndex = lastIndex;\n      escapeAtOne(_);\n      continue;\n    }\n    onMatch(...match);\n    previousIndex = lastIndex;\n  }\n  if (previousIndex !== str.length) { // Get text at end\n    afterMatch(str.slice(previousIndex));\n  }\n};\n","export const sort = (locale, arrayOfItems, options) => {\n  return arrayOfItems.sort(new Intl.Collator(\n    locale,\n    options\n  ).compare);\n};\n\nexport const list = (locale, arrayOfItems, options) => {\n  return new Intl.ListFormat(\n    locale, options\n  ).format(arrayOfItems);\n};\n\nexport const sortedList = (\n  locale, arrayOfItems, listOptions, collationOptions\n) => {\n  sort(locale, arrayOfItems, collationOptions);\n  return list(locale, arrayOfItems, listOptions);\n};\n\nexport const sortedMap = (\n  locale, arrayOfItems, listOptions, collationOptions\n) => {\n  sort(locale, arrayOfItems, collationOptions);\n\n  const placeholderArray = [...arrayOfItems].map((_, i) => `<<S=M${i}S=M>>`);\n  // eslint-disable-next-line prefer-named-capture-group\n  return list(locale, placeholderArray, listOptions).replace(/<<S=M(\\d)S=M>>/gu);\n};\n","import {parseJSONExtra} from './utils.js';\nimport {sortedList} from './collation.js';\n\nexport const getFormatterInfo = ({object}) => {\n  if (Array.isArray(object)) {\n    const [value, options, extraOpts] = object;\n    return {value, options, extraOpts};\n  }\n  return {value: object};\n};\n\n/* eslint-disable max-len */\n/**\n* @callback AllSubstitutionCallback\n* @param {PlainObject} cfg\n* @param {string|Node|number|Date|RelativeTimeInfo|ListInfo|NumberInfo|DateInfo} cfg.value Contains\n*   the value returned by the individual substitution\n* @param {string} cfg.arg See `cfg.arg` of {@link SubstitutionCallback}.\n* @param {string} cfg.key The substitution key\n* @returns {string|Element} The replacement text or element\n*/\n/* eslint-enable max-len */\n\n/**\n * @type {AllSubstitutionCallback}\n */\nexport const defaultAllSubstitutions = ({value, arg, key, locale}) => {\n  // Strings or DOM Nodes\n  if (\n    typeof value === 'string' || (value && typeof value === 'object' &&\n    'nodeType' in value)\n  ) {\n    return value;\n  }\n\n  let opts, extraOpts;\n\n  const applyArgs = ({type, options = opts, checkArgOptions = false}) => {\n    if (typeof arg === 'string') {\n      let [userType, extraArgs, argOptions] = arg.split('|');\n      // Alias\n      if (userType === 'DATE') {\n        userType = 'DATETIME';\n      }\n      if (userType === type) {\n        if (!extraArgs) {\n          options = {};\n        } else if (!checkArgOptions || argOptions) {\n          // Todo: Allow escaping and restoring of pipe symbol\n          options = {\n            ...options,\n            ...parseJSONExtra(\n              checkArgOptions && argOptions ? argOptions : extraArgs\n            )\n          };\n        }\n      }\n    }\n    return options;\n  };\n\n  if (value && typeof value === 'object') {\n    const singleKey = Object.keys(value)[0];\n    if ([\n      'number', 'date', 'datetime', 'relative', 'list', 'plural'\n    ].includes(singleKey)) {\n      ({\n        value, options: opts, extraOpts\n      } = getFormatterInfo({object: value[singleKey]}));\n\n      switch (singleKey) {\n      case 'relative':\n        // The second argument actually contains the primary options, so swap\n        [extraOpts, opts] = [opts, extraOpts];\n        return new Intl.RelativeTimeFormat(\n          locale, applyArgs({type: 'RELATIVE'})\n        ).format(value, extraOpts);\n\n      // ListFormat (with Collator)\n      case 'list':\n        return sortedList(locale, value, applyArgs({type: 'LIST'}), applyArgs({\n          type: 'LIST', options: extraOpts, checkArgOptions: true\n        }));\n      default:\n        // Let `number` and `date` types drop through so their options\n        //  can be applied\n        // Let `plural` be treated as number (since value should be a number)\n        break;\n      }\n    }\n  }\n\n  // Numbers\n  if (typeof value === 'number') {\n    return new Intl.NumberFormat(\n      locale,\n      applyArgs({type: 'NUMBER'})\n    ).format(value);\n  }\n\n  // Dates\n  if (\n    value && typeof value === 'object' &&\n    typeof value.getTime === 'function'\n  ) {\n    return new Intl.DateTimeFormat(\n      locale,\n      applyArgs({type: 'DATETIME'})\n    ).format(value);\n  }\n\n  // console.log('value', value);\n  throw new TypeError('Unknown formatter');\n};\n","import {getMessageForKeyByStyle} from './index.js';\nimport {parseJSONExtra} from './utils.js';\nimport {getFormatterInfo} from './defaultAllSubstitutions.js';\n\nexport class Formatter {\n}\n\nconst getSubstitution = ({key, body, type, messageStyle = 'richNested'}) => {\n  const messageForKey = getMessageForKeyByStyle({messageStyle});\n  const substitution = messageForKey({body}, key);\n  if (!substitution) {\n    throw new Error(`Key value not found for ${type} key: (${key})`);\n  }\n  // We don't allow a substitution function here or below as comes\n  //  from locale and locale content should not pose security concerns\n  return substitution.value;\n};\n\nexport class LocalFormatter extends Formatter {\n  constructor (locals) {\n    super();\n    this.locals = locals;\n  }\n  getSubstitution (key) {\n    return getSubstitution({\n      key: key.slice(1), body: this.locals, type: 'local'\n    });\n  }\n  isMatch (key) {\n    const components = key.slice(1).split('.');\n    let parent = this.locals;\n    return this.constructor.isMatchingKey(key) && components.every((cmpt) => {\n      const result = cmpt in parent;\n      parent = parent[cmpt];\n      return result;\n    });\n  }\n  static isMatchingKey (key) {\n    return key.startsWith('-');\n  }\n}\n\nexport class RegularFormatter extends Formatter {\n  constructor (substitutions) {\n    super();\n    this.substitutions = substitutions;\n  }\n  isMatch (key) {\n    return this.constructor.isMatchingKey(key) && key in this.substitutions;\n  }\n  static isMatchingKey (key) {\n    return (/^\\w/u).test(key);\n  }\n}\n\nexport class SwitchFormatter extends Formatter {\n  constructor (switches, {substitutions}) {\n    super();\n    this.switches = switches;\n    this.substitutions = substitutions;\n  }\n  getSubstitution (key, {locale, usedKeys, arg, missingSuppliedFormatters}) {\n    const ky = this.constructor.getKey(key).slice(1);\n    // Expression might not actually use formatter, e.g., for singular,\n    //  the conditional might just write out \"one\"\n\n    const [objKey, body, keySegment] = this.getMatch(ky);\n    usedKeys.push(keySegment);\n\n    let type, opts;\n    if (objKey && objKey.includes('|')) {\n      [, type, opts] = objKey.split('|');\n    }\n    if (!body) {\n      missingSuppliedFormatters({\n        key,\n        formatter: this\n      });\n      return '\\\\{' + key + '}';\n    }\n\n    /*\n    if (!(ky in this.substitutions)) {\n      throw new Error(`Switch expecting formatter: ${ky}`);\n    }\n    */\n\n    const getNumberFormat = (value, defaultOptions) => {\n      const numberOpts = parseJSONExtra(opts);\n      return new Intl.NumberFormat(locale, {\n        ...defaultOptions, ...numberOpts\n      }).format(value);\n    };\n\n    const getPluralFormat = (value, defaultOptions) => {\n      const pluralOpts = parseJSONExtra(opts);\n      return new Intl.PluralRules(locale, {\n        ...defaultOptions, ...pluralOpts\n      }).select(value);\n    };\n\n    const formatterValue = this.substitutions[keySegment];\n\n    let match = formatterValue;\n    if (typeof formatterValue === 'number') {\n      switch (type) {\n      case 'NUMBER':\n        match = getNumberFormat(formatterValue);\n        break;\n      case 'PLURAL':\n        match = getPluralFormat(formatterValue);\n        break;\n      default:\n        match = new Intl.PluralRules(locale).select(formatterValue);\n        break;\n      }\n    } else if (formatterValue && typeof formatterValue === 'object') {\n      const singleKey = Object.keys(formatterValue)[0];\n      if (['number', 'plural'].includes(singleKey)) {\n        const {value, options} = getFormatterInfo({\n          object: formatterValue[singleKey]\n        });\n        if (!type) {\n          type = singleKey.toUpperCase();\n        }\n        const typeMatches = singleKey.toUpperCase() === type;\n        if (!typeMatches) {\n          throw new TypeError(\n            `Expecting type \"${\n              type.toLowerCase()\n            }\"; instead found \"${singleKey}\".`\n          );\n        }\n        // eslint-disable-next-line default-case\n        switch (type) {\n        case 'NUMBER':\n          match = getNumberFormat(value, options);\n          break;\n        case 'PLURAL':\n          match = getPluralFormat(value, options);\n          break;\n        }\n      }\n    }\n\n    // We do not want the default `richNested` here as that will split\n    //  up the likes of `0.0`\n    const messageStyle = 'richNested';\n\n    const preventNesting = (s) => {\n      return s.replace(/\\\\/gu, '\\\\\\\\').replace(/\\./gu, '\\\\.');\n    };\n\n    try {\n      return getSubstitution({\n        messageStyle,\n        key: match ? preventNesting(match) : arg,\n        body,\n        type: 'switch'\n      });\n    } catch (err) {\n      try {\n        return getSubstitution({\n          messageStyle, key: '*' + preventNesting(match), body, type: 'switch'\n        });\n      } catch (error) {\n        const k = Object.keys(body).find(\n          (switchKey) => switchKey.startsWith('*')\n        );\n        if (!k) {\n          throw new Error(`No defaults found for switch ${ky}`);\n        }\n        return getSubstitution({\n          messageStyle, key: preventNesting(k), body, type: 'switch'\n        });\n      }\n    }\n  }\n  isMatch (key) {\n    return key && this.constructor.isMatchingKey(key) &&\n      this.getMatch(key.slice(1)).length;\n  }\n\n  getMatch (ky) {\n    const ks = ky.split('.');\n    return ks.reduce((obj, k, i) => {\n      if (i < ks.length - 1) {\n        if (!(k in obj)) {\n          throw new Error(`Switch key \"${k}\" not found (from ${ky})`);\n        }\n        return obj[k];\n      }\n      // Todo: Should throw on encountering duplicate fundamental keys (even\n      //  if there are different arguments, that should not be allowed)\n      const ret = Object.entries(obj).find(([switchKey]) => {\n        return k === this.constructor.getKey(switchKey);\n      });\n\n      return ret ? ret.concat(k) : [];\n    }, this.switches);\n  }\n\n  static isMatchingKey (key) {\n    return key.startsWith('~');\n  }\n  static getKey (key) {\n    const match = key.match(/^[^|]*/u);\n    return match && match[0];\n  }\n}\n","/**\n* @callback PromiseChainErrback\n* @param {any} errBack\n* @returns {Promise<any>|any}\n*/\n\n/**\n * The given array will have its items processed in series; if the supplied\n *  `errBack` (which is guaranteed to run at least once), when passed the\n *  current item, returns a `Promise` or value that resolves, that value will\n *  be used for the return result of this function and no other items in\n *  the array will continue to be processed; if it rejects, however, the\n *  next item will be processed with `errBack`.\n * Accept an array of values to pass to an errback which should return\n *  a promise (or final result value) which resolves to a result or which\n *  rejects so that the next item in the array can be checked in series.\n * @param {Array<any>} values Array of values\n * @param {PromiseChainErrback} errBack Accepts an item of the array as its\n *   single argument\n * @param {string} [errorMessage=\"Reached end of values array.\"]\n * @returns {Promise<any>} Either resolves to a value derived from an item in\n *  the array or rejects if all items reject\n * @example\n promiseChainForValues(['a', 'b', 'c'], (val) => {\n   return new Promise(function (resolve, reject) {\n     if (val === 'a') {\n       reject(new Error('missing'));\n     }\n     setTimeout(() => {\n       resolve(val);\n     }, 100);\n   });\n });\n */\nexport const promiseChainForValues = (\n  values, errBack, errorMessage = 'Reached end of values array.'\n) => {\n  if (!Array.isArray(values)) {\n    throw new TypeError(\n      'The `values` argument to `promiseChainForValues` must be an array.'\n    );\n  }\n  if (typeof errBack !== 'function') {\n    throw new TypeError(\n      'The `errBack` argument to `promiseChainForValues` must be a function.'\n    );\n  }\n  return (async () => {\n    let ret;\n    let p = Promise.reject(\n      new Error('Intentionally reject so as to begin checking chain')\n    );\n    let breaking;\n    while (true) {\n      const value = values.shift();\n      try {\n        // eslint-disable-next-line no-await-in-loop\n        ret = await p;\n        break;\n      } catch (err) {\n        if (breaking) {\n          throw new Error(errorMessage);\n        }\n        // We allow one more try\n        if (!values.length) {\n          breaking = true;\n        }\n        // // eslint-disable-next-line no-await-in-loop\n        p = errBack(value);\n      }\n    }\n    return ret;\n  })();\n};\n","/**\n* @callback SubstitutionCallback\n* @param {PlainObject} cfg\n* @param {string} cfg.arg By default, accepts the third portion of the\n*   `formattingRegex` within `insertNodes`, i.e., to allow the locale to\n*   supply arguments back to the calling script.\n* @param {string} cfg.key The substitution key\n* @returns {string|Element} The replacement text or element\n*/\n\n/**\n * May have additional properties if supplying options to an underlying\n * formatter.\n * @typedef {GenericArray} ValueArray\n * @property {string|Node|number|Date} 0 The main value\n * @property {PlainObject} [1] The options related to the main value\n * @property {PlainObject} [2] Any additional options\n*/\n\n/**\n* @typedef {PlainObject} RelativeTimeInfo\n* @param {ValueArray} relative\n*/\n\n/**\n* @typedef {PlainObject} ListInfo\n* @param {ValueArray} list\n*/\n\n/**\n* @typedef {PlainObject} NumberInfo\n* @param {ValueArray} number\n*/\n\n/**\n* @typedef {PlainObject} DateInfo\n* @param {ValueArray} date\n*/\n\n/**\n* @typedef {Object<string, string>} PlainLocaleStringBodyObject\n*/\n\n/**\n* @typedef {PlainObject} SwitchCaseInfo\n* @property {boolean} [default=false] Whether this conditional is the default\n*/\n\n/**\n* @typedef {GenericArray} SwitchCase\n* @property {string} 0 The type\n* @property {string} 1 The message\n* @property {SwitchCaseInfo} [2] Info about the switch case\n*/\n\n/**\n* @typedef {PlainObject<string, SwitchCase>} Switch\n*/\n\n/**\n* @typedef {PlainObject<{string, Switch}>} Switches\n*/\n\n/**\n* @typedef {PlainObject} LocaleStringSubObject\n* @property {string} [message] The locale message with any formatting\n*   place-holders; defaults to use of any single conditional\n* @property {string} [description] A description to add translators\n* @property {Switches} [switches] Conditionals\n*/\n\n/**\n* @typedef {PlainObject<string, LocaleStringSubObject>} LocaleStringBodyObject\n*/\n\n/**\n * @callback LocaleResolver\n * @param {string} localesBasePath (Trailing slash optional)\n * @param {string} locale BCP-47 language string\n * @returns {string} URL of the locale file to be fetched\n*/\n\n/**\n* @typedef {PlainObject<string, string|Element|SubstitutionCallback>}\n*   SubstitutionObject\n*/\n\n/**\n * @type {LocaleResolver}\n */\nexport const defaultLocaleResolver = (localesBasePath, locale) => {\n  if (typeof localesBasePath !== 'string') {\n    throw new TypeError(\n      '`defaultLocaleResolver` expects a string `localesBasePath`.'\n    );\n  }\n  if (typeof locale !== 'string') {\n    throw new TypeError(\n      '`defaultLocaleResolver` expects a string `locale`.'\n    );\n  }\n  return `${localesBasePath.replace(/\\/$/u, '')}/_locales/${locale}/messages.json`;\n};\n","import {\n  LocalFormatter, RegularFormatter, SwitchFormatter\n} from './Formatter.js';\nimport {defaultAllSubstitutions} from './defaultAllSubstitutions.js';\nimport {unescapeBackslashes, parseJSONExtra, processRegex} from './utils.js';\n\n/* eslint-disable max-len */\n/**\n * @callback InsertNodesCallback\n * @param {PlainObject} cfg\n * @param {string} cfg.string The localized string\n * @param {boolean} [cfg.dom] If substitutions known to contain DOM, can be set\n *   to `true` to optimize\n * @param {string[]} [cfg.usedKeys=[]] Array for tracking which keys have been used\n * @param {SubstitutionObject} cfg.substitutions The formatting substitutions object\n * @param {?(AllSubstitutionCallback|AllSubstitutionCallback[])} [cfg.allSubstitutions] The\n *   callback or array composed thereof for applying to each substitution.\n * @param {string} locale The successfully resolved locale\n * @param {Integer} [maximumLocalNestingDepth=3] Depth of local variable resolution to\n *   check before reporting a recursion error\n * @param {MissingSuppliedFormattersCallback} [cfg.missingSuppliedFormatters] Callback\n *   supplied key to throw if the supplied key is present (if\n *   `throwOnMissingSuppliedFormatters` is enabled). Defaults to no-op.\n * @param {CheckExtraSuppliedFormattersCallback} [cfg.checkExtraSuppliedFormatters] No\n *   argument callback to check if any formatters are not present in `string`\n *   (if `throwOnExtraSuppliedFormatters` is enabled). Defaults to no-op.\n * @returns {string|Array<Node|string>}\n */\n\n/**\n * @type {InsertNodesCallback}\n */\nexport const defaultInsertNodes = ({\n  /* eslint-enable max-len */\n  string, dom, usedKeys, substitutions, allSubstitutions, locale,\n  locals, switches,\n  maximumLocalNestingDepth = 3,\n  missingSuppliedFormatters,\n  checkExtraSuppliedFormatters\n}) => {\n  if (typeof maximumLocalNestingDepth !== 'number') {\n    throw new TypeError('`maximumLocalNestingDepth` must be a number.');\n  }\n  const localFormatter = new LocalFormatter(locals);\n  const regularFormatter = new RegularFormatter(substitutions);\n  const switchFormatter = new SwitchFormatter(switches, {substitutions});\n\n  // eslint-disable-next-line max-len\n  // eslint-disable-next-line prefer-named-capture-group, unicorn/no-unsafe-regex\n  const formattingRegex = /(\\\\*)\\{((?:[^}]|\\\\\\})*?)(?:(\\|)([^}]*))?\\}/gu;\n  if (allSubstitutions) {\n    allSubstitutions = Array.isArray(allSubstitutions)\n      ? allSubstitutions\n      : [allSubstitutions];\n  }\n\n  const getSubstitution = ({key, arg, substs}) => {\n    let substitution;\n    const isLocalKey = localFormatter.constructor.isMatchingKey(key);\n    if (isLocalKey) {\n      substitution = localFormatter.getSubstitution(key);\n    } else if (switchFormatter.constructor.isMatchingKey(key)) {\n      substitution = switchFormatter.getSubstitution(key, {\n        locale, usedKeys, arg,\n        missingSuppliedFormatters\n      });\n    } else {\n      substitution = substs[key];\n      if (typeof substitution === 'function') {\n        substitution = substitution({arg, key});\n      }\n    }\n    // Todo: Could support resolving locals within arguments\n    // Todo: Even for `null` `allSubstitutions`, we could have\n    //  a mode to throw for non-string/non-DOM (non-numbers?),\n    //  or whatever is not likely intended as a target for `toString()`.\n    if (allSubstitutions) {\n      substitution = allSubstitutions.reduce((subst, allSubst) => {\n        return allSubst({\n          value: subst, arg, key, locale\n        });\n      }, substitution);\n    } else if (arg && arg.match(/^(?:NUMBER|DATE(?:TIME)?|RELATIVE|LIST)(?:\\||$)/u)) {\n      substitution = defaultAllSubstitutions({\n        value: substitution, arg, key, locale\n      });\n    }\n    return substitution;\n  };\n\n  let recursiveLocalCount = 1;\n  const checkLocalVars = ({substitution, ky, arg, processSubsts}) => {\n    if (\n      typeof substitution === 'string' &&\n      substitution.includes('{')\n    ) {\n      if (recursiveLocalCount++ > maximumLocalNestingDepth) {\n        throw new TypeError('Too much recursion in local variables.');\n      }\n\n      if (localFormatter.constructor.isMatchingKey(ky)) {\n        let extraSubsts = substitutions;\n        let localFormatters;\n        if (arg) {\n          localFormatters = parseJSONExtra(arg);\n          extraSubsts = {\n            ...substitutions,\n            ...localFormatters\n          };\n        }\n        substitution = processSubsts({\n          str: substitution, substs: extraSubsts,\n          formatter: localFormatter\n        });\n        if (localFormatters) {\n          checkExtraSuppliedFormatters({substitutions: localFormatters});\n        }\n      } else if (switchFormatter.constructor.isMatchingKey(ky)) {\n        substitution = processSubsts({\n          str: substitution\n        });\n      }\n    }\n    return substitution;\n  };\n\n  // Give chance to avoid this block when known to contain DOM\n  if (!dom) {\n    // Run this block to optimize non-DOM substitutions\n    let returnsDOM = false;\n    const replace = ({\n      str, substs = substitutions,\n      formatter = regularFormatter\n    }) => {\n      return str.replace(formattingRegex, (_, esc, ky, pipe, arg) => {\n        if (esc.length % 2) {\n          return _;\n        }\n        if (missingSuppliedFormatters({\n          key: ky,\n          formatter\n        })) {\n          return _;\n        }\n        let substitution = getSubstitution({key: ky, arg, substs});\n\n        substitution = checkLocalVars({\n          substitution, ky, arg, processSubsts: replace\n        });\n\n        returnsDOM = returnsDOM ||\n          (substitution && typeof substitution === 'object' &&\n          'nodeType' in substitution);\n        usedKeys.push(ky);\n        return esc + substitution;\n      });\n    };\n    const ret = replace({str: string});\n    if (!returnsDOM) {\n      checkExtraSuppliedFormatters({substitutions});\n      usedKeys.length = 0;\n      return unescapeBackslashes(ret);\n    }\n    usedKeys.length = 0;\n  }\n\n  recursiveLocalCount = 1;\n  const processSubstitutions = ({\n    str, substs = substitutions, formatter = regularFormatter\n  }) => {\n    const nodes = [];\n\n    // Copy to ensure we are resetting index on each instance (manually\n    // resetting on `formattingRegex` is problematic with recursion that\n    // uses the same regex copy)\n    const regex = new RegExp(formattingRegex, 'gu');\n\n    const push = (...args) => {\n      nodes.push(...args);\n    };\n\n    processRegex(regex, str, {\n      extra: push,\n      onMatch (_, esc, ky, pipe, arg) {\n        if (missingSuppliedFormatters({\n          key: ky, formatter\n        })) {\n          push(_);\n        } else {\n          if (esc.length) {\n            push(esc);\n          }\n\n          let substitution = getSubstitution({key: ky, arg, substs});\n          substitution = checkLocalVars({\n            substitution, ky, arg, processSubsts: processSubstitutions\n          });\n          if (Array.isArray(substitution)) {\n            push(...substitution);\n          } else if (\n            // Clone so that multiple instances may be added (and no\n            // side effects to user code)\n            substitution && typeof substitution === 'object' &&\n            'nodeType' in substitution\n          ) {\n            push(substitution.cloneNode(true));\n          } else {\n            push(substitution);\n          }\n        }\n        usedKeys.push(ky);\n      }\n    });\n    return nodes;\n  };\n  const nodes = processSubstitutions({str: string});\n\n  checkExtraSuppliedFormatters({substitutions});\n  usedKeys.length = 0;\n  return nodes.map((node) => {\n    if (typeof node === 'string') {\n      return unescapeBackslashes(node);\n    }\n    return node;\n  });\n};\n","import {unescapeBackslashes, processRegex} from './utils.js';\n\n/**\n* @typedef {LocaleBody} LocalObject\n*/\n\n/**\n * May also contain language code and direction, translator name and\n * contact, etc., but no defaults currently apply besides reserving `locals`\n * @typedef {PlainObject} LocaleHead\n * @property {LocalObject} locals\n*/\n\n/**\n* @typedef {LocaleStringBodyObject|PlainLocaleStringBodyObject|PlainObject}\n* LocaleBody\n*/\n\n/**\n* @typedef {PlainObject} LocaleObject\n* @property {LocaleHead} [head]\n* @property {LocaleBody} body\n*/\n\n/**\n* @typedef {PlainObject} MessageStyleCallbackResult\n* @property {string} value Regardless of message style, will contain the\n*   string result\n* @property {LocaleStringSubObject} [info] Full info on the localized item\n*   (for rich message styles only)\n*/\n\n/**\n* @callback MessageStyleCallback\n* @param {LocaleObject} obj The exact\n*   format depends on the `cfg.defaults` of `i18n`\n* @param {string} key\n* @returns {false|MessageStyleCallbackResult} If `false`, will resort to default\n*/\n\n/* eslint-disable max-len */\n/**\n * @param {PlainObject} [cfg]\n * @param {\"richNested\"|\"rich\"|\"plain\"|MessageStyleCallback} [cfg.messageStyle='richNested']\n * @returns {MessageStyleCallback}\n */\nexport const getMessageForKeyByStyle = ({\n  /* eslint-enable max-len */\n  messageStyle = 'richNested'\n} = {}) => {\n  // Todo: Support `plainNested` style\n  return typeof messageStyle === 'function'\n    ? messageStyle\n    : (messageStyle === 'richNested'\n      ? (mainObj, key) => {\n        const obj = mainObj && typeof mainObj === 'object' && mainObj.body;\n        const keys = [];\n        // eslint-disable-next-line prefer-named-capture-group\n        const possiblyEscapedCharPattern = /(\\\\*)\\./gu;\n        const mergeWithPreviousOrStart = (val) => {\n          if (!keys.length) {\n            keys[0] = '';\n          }\n          keys[keys.length - 1] += val;\n        };\n        processRegex(possiblyEscapedCharPattern, key, {\n          // If odd, this is just an escaped dot, so merge content with\n          //   any previous\n          extra: mergeWithPreviousOrStart,\n          onMatch (_, esc) {\n            // If even, there are no backslashes, or they are just escaped\n            //  backslashes and not an escaped dot, so start anew, though\n            //  first merge any backslashes\n            mergeWithPreviousOrStart(esc);\n            keys.push('');\n          }\n        });\n        const keysUnescaped = keys.map((ky) => {\n          return unescapeBackslashes(ky);\n        });\n\n        let ret = false;\n        let currObj = obj;\n        keysUnescaped.some((ky, i, kys) => {\n          if (!currObj || typeof currObj !== 'object') {\n            return true;\n          }\n          if (\n            // If specified key is too deep, we should fail\n            i === kys.length - 1 &&\n            ky in currObj && currObj[ky] && typeof currObj[ky] === 'object' &&\n            'message' in currObj[ky] &&\n            // NECESSARY FOR SECURITY ON UNTRUSTED LOCALES\n            typeof currObj[ky].message === 'string'\n          ) {\n            ret = {\n              value: currObj[ky].message,\n              info: currObj[ky]\n            };\n          }\n          currObj = currObj[ky];\n\n          return false;\n        });\n        return ret;\n      }\n      : (messageStyle === 'rich'\n        ? (mainObj, key) => {\n          const obj = mainObj && typeof mainObj === 'object' && mainObj.body;\n          if (\n            obj && typeof obj === 'object' &&\n            key in obj && obj[key] && typeof obj[key] === 'object' &&\n            'message' in obj[key] &&\n            // NECESSARY FOR SECURITY ON UNTRUSTED LOCALES\n            typeof obj[key].message === 'string'\n          ) {\n            return {\n              value: obj[key].message,\n              info: obj[key]\n            };\n          }\n          return false;\n        }\n        : (messageStyle === 'plain'\n          ? (mainObj, key) => {\n            const obj = mainObj && typeof mainObj === 'object' && mainObj.body;\n            if (\n              obj && typeof obj === 'object' &&\n              key in obj && obj[key] && typeof obj[key] === 'string'\n            ) {\n              return {\n                value: obj[key]\n              };\n            }\n            return false;\n          }\n          : (() => {\n            throw new TypeError(`Unknown \\`messageStyle\\` ${messageStyle}`);\n          })())\n      )\n    );\n};\n","import {getMessageForKeyByStyle} from './getMessageForKeyByStyle.js';\n\n/* eslint-disable max-len */\n/**\n * @param {PlainObject} cfg\n * @param {string} [cfg.message] If present, this string will be the return value.\n * @param {false|null|undefined|LocaleObject} [cfg.defaults]\n * @param {\"richNested\"|\"rich\"|\"plain\"|MessageStyleCallback} [cfg.messageStyle='richNested']\n * @param {MessageStyleCallback} [cfg.messageForKey] Defaults to getting `MessageStyleCallback` based on `messageStyle`\n * @param {string} cfg.key Key to check against object of strings; used to find a default if no string `message` is provided.\n * @returns {string}\n */\nexport const getStringFromMessageAndDefaults = ({\n  /* eslint-enable max-len */\n  message,\n  defaults,\n  messageStyle,\n  messageForKey = getMessageForKeyByStyle({messageStyle}),\n  key\n} = {}) => {\n  if (typeof key !== 'string') {\n    throw new TypeError(\n      'An options object with a `key` string is expected on ' +\n      '`getStringFromMessageAndDefaults`'\n    );\n  }\n  // NECESSARY CHECK FOR SECURITY ON UNTRUSTED LOCALES\n  let str;\n  if (typeof message === 'string') {\n    str = message;\n  } else if (\n    defaults === false || defaults === undefined || defaults === null\n  ) {\n    str = false;\n  } else if (defaults && typeof defaults === 'object') {\n    str = messageForKey({body: defaults}, key);\n    if (str) {\n      str = str.value;\n    }\n  } else {\n    throw new TypeError(\n      `Default locale strings must resolve to \\`false\\`, ` +\n      `nullish, or an object!`\n    );\n  }\n  if (str === false) {\n    throw new Error(`Key value not found for key: (${key})`);\n  }\n  return str;\n};\n","import {defaultAllSubstitutions} from './defaultAllSubstitutions.js';\nimport {defaultInsertNodes} from './defaultInsertNodes.js';\n\n/* eslint-disable max-len */\n/**\n *\n * @param {PlainObject} cfg\n * @param {string} cfg.string\n * @param {string} cfg.locale The (possibly already resolved) locale for use by\n *   configuring formatters\n * @param {LocalObject} [cfg.locals]\n * @param {LocalObject} [cfg.switches]\n * @param {Integer} [cfg.maximumLocalNestingDepth=3]\n * @param {?(AllSubstitutionCallback|AllSubstitutionCallback[])} [cfg.allSubstitutions=[defaultAllSubstitutions]]\n * @param {InsertNodesCallback} [cfg.insertNodes=defaultInsertNodes]\n * @param {false|SubstitutionObject} [cfg.substitutions=false]\n * @param {boolean} [cfg.dom=false]\n * @param {boolean} [cfg.forceNodeReturn=false]\n * @param {boolean} [cfg.throwOnMissingSuppliedFormatters=true]\n * @param {boolean} [cfg.throwOnExtraSuppliedFormatters=true]\n * @returns {string|DocumentFragment}\n */\nexport const getDOMForLocaleString = ({\n  /* eslint-enable max-len */\n  string,\n  locale,\n  locals,\n  switches,\n  maximumLocalNestingDepth,\n  allSubstitutions = [\n    defaultAllSubstitutions\n  ],\n  insertNodes = defaultInsertNodes,\n  substitutions = false,\n  dom = false,\n  forceNodeReturn = false,\n  throwOnMissingSuppliedFormatters = true,\n  throwOnExtraSuppliedFormatters = true\n} = {}) => {\n  if (typeof string !== 'string') {\n    throw new TypeError(\n      'An options object with a `string` property set to a string must ' +\n      'be provided for `getDOMForLocaleString`.'\n    );\n  }\n  const stringOrTextNode = (str) => {\n    return forceNodeReturn ? document.createTextNode(str) : str;\n  };\n\n  const usedKeys = [];\n\n  /**\n  * @callback CheckExtraSuppliedFormattersCallback\n  * @param {SubstitutionObject} substs\n  * @throws {Error} Upon an extra formatting key being found\n  * @returns {void}\n  */\n\n  /**\n   * @type {CheckExtraSuppliedFormattersCallback}\n   */\n  const checkExtraSuppliedFormatters = ({\n    substitutions: substs\n  }) => {\n    if (throwOnExtraSuppliedFormatters) {\n      Object.keys(substs).forEach((key) => {\n        if (!usedKeys.includes(key)) {\n          throw new Error(`Extra formatting key: ${key}`);\n        }\n      });\n    }\n  };\n\n  /**\n  * @callback MissingSuppliedFormattersCallback\n  * @param {string} key\n  * @param {SubstitutionObject} substs\n  * @throws {Error} If missing formatting key\n  * @returns {boolean}\n  */\n  /**\n   * @type {MissingSuppliedFormattersCallback}\n   */\n  const missingSuppliedFormatters = ({\n    key, formatter\n  }) => {\n    const matching = formatter.isMatch(key);\n    if (formatter.constructor.isMatchingKey(key) && !matching) {\n      if (throwOnMissingSuppliedFormatters) {\n        throw new Error(`Missing formatting key: ${key}`);\n      }\n      return true;\n    }\n    return false;\n  };\n\n  if (\n    !substitutions && !allSubstitutions &&\n    !throwOnMissingSuppliedFormatters\n  ) {\n    return stringOrTextNode(string);\n  }\n  if (!substitutions) {\n    substitutions = {};\n  }\n\n  const nodes = insertNodes({\n    string, dom, usedKeys, substitutions, allSubstitutions, locale,\n    locals, switches,\n    missingSuppliedFormatters,\n    checkExtraSuppliedFormatters\n  });\n  if (typeof nodes === 'string') {\n    return stringOrTextNode(nodes);\n  }\n\n  const container = document.createDocumentFragment();\n  container.append(...nodes);\n\n  return container;\n};\n","import {defaultLocaleResolver} from './defaultLocaleResolver.js';\nimport {promiseChainForValues} from './promiseChainForValues.js';\n\n/**\n* @callback LocaleMatcher\n* @param {string} locale The failed locale\n* @returns {string|Promise<string>} The new locale to check\n*/\n\n/**\n* @typedef {PlainObject} LocaleObjectInfo\n* @property {LocaleObject} strings The successfully retrieved locale strings\n* @property {string} locale The successfully resolved locale\n*/\n\n/**\n * @param {PlainObject} [cfg={}]\n * @param {string[]} [cfg.locales=navigator.languages] BCP-47 language strings\n * @param {string[]} [cfg.defaultLocales=['en-US']]\n * @param {string} [cfg.localesBasePath='.']\n * @param {LocaleResolver} [cfg.localeResolver=defaultLocaleResolver]\n * @param {\"lookup\"|LocaleMatcher} [cfg.localeMatcher]\n * @returns {Promise<LocaleObjectInfo>}\n */\nexport const findLocaleStrings = async ({\n  locales = navigator.languages,\n  defaultLocales = ['en-US'],\n  localeResolver = defaultLocaleResolver,\n  localesBasePath = '.',\n  localeMatcher = 'lookup'\n} = {}) => {\n  /**\n   * @callback getLocale\n   * @throws {SyntaxError|TypeError|Error}\n   * @param {string} locale\n   * @returns {Promise<LocaleObjectInfo>}\n   */\n  async function getLocale (locale) {\n    if (typeof locale !== 'string') {\n      throw new TypeError('Non-string locale type');\n    }\n    const url = localeResolver(localesBasePath, locale);\n    if (typeof url !== 'string') {\n      throw new TypeError(\n        '`localeResolver` expected to resolve to (URL) string.'\n      );\n    }\n    try {\n      const resp = await fetch(url);\n      if (resp.status === 404) {\n        // Don't allow browser (tested in Firefox) to continue\n        //  and give `SyntaxError` with missing file or we won't be\n        //  able to try without the hyphen\n        throw new Error('Trying again');\n      }\n      const strings = await (resp.json());\n      return {\n        locale,\n        strings\n      };\n    } catch (err) {\n      if (err.name === 'SyntaxError') {\n        throw err;\n      }\n      const newLocale = await localeMatcher(locale);\n      return getLocale(newLocale);\n    }\n  }\n  if (localeMatcher === 'lookup') {\n    localeMatcher = function (locale) {\n      if (!locale.includes('-')) {\n        throw new Error('Locale not available');\n      }\n      // Try without hyphen (\"lookup\" algorithm: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl )\n      return locale.replace(/-.*$/u, '');\n    };\n  } else if (typeof localeMatcher !== 'function') {\n    throw new TypeError('`localeMatcher` must be \"lookup\" or a function!');\n  }\n  // eslint-disable-next-line no-return-await\n  return await promiseChainForValues(\n    [...locales, ...defaultLocales],\n    getLocale,\n    'No matching locale found!'\n  );\n};\n","import {getMessageForKeyByStyle} from './getMessageForKeyByStyle.js';\nimport {findLocaleStrings} from './findLocaleStrings.js';\nimport {getDOMForLocaleString} from './getDOMForLocaleString.js';\nimport {\n  getStringFromMessageAndDefaults\n} from './getStringFromMessageAndDefaults.js';\nimport {sort} from './collation.js';\n\n/**\n * Checks a key (against an object of strings). Optionally\n *  accepts an object of substitutions which are used when finding text\n *  within curly brackets (pipe symbol not allowed in its keys); the\n *  substitutions may be DOM elements as well as strings and may be\n *  functions which return the same (being provided the text after the\n *  pipe within brackets as the single argument).) Optionally accepts a\n *  config object, with the optional key \"dom\" which if set to `true`\n *  optimizes when DOM elements are (known to be) present\n * @callback I18NCallback\n * @param {string} key Key to check against object of strings\n * @param {false|SubstitutionObject} [substitutions=false]\n * @param {PlainObject} [cfg={}]\n * @param {boolean} [cfg.dom=false]\n * @returns {string|DocumentFragment}\n*/\n\n/* eslint-disable max-len */\n/**\n * @param {PlainObject} [cfg={}]\n * @param {string[]} [cfg.locales=navigator.languages] BCP-47 language strings\n * @param {string[]} [cfg.defaultLocales=['en-US']]\n * @param {string} [cfg.localesBasePath='.']\n * @param {LocaleResolver} [cfg.localeResolver=defaultLocaleResolver]\n * @param {\"lookup\"|LocaleMatcher} [cfg.localeMatcher='lookup']\n * @param {\"richNested\"|\"rich\"|\"plain\"|MessageStyleCallback} [cfg.messageStyle='richNested']\n * @param {?AllSubstitutionCallback|AllSubstitutionCallback[]} [cfg.allSubstitutions]\n * @param {InsertNodesCallback} [cfg.insertNodes=defaultInsertNodes]\n * @param {false|null|undefined|LocaleObject} [cfg.defaults]\n * @param {false|SubstitutionObject} [cfg.substitutions={}]\n * @param {boolean} [cfg.dom=false]\n * @param {boolean} [cfg.forceNodeReturn=false]\n * @param {Integer} [cfg.maximumLocalNestingDepth=3]\n * @param {boolean} [cfg.throwOnMissingSuppliedFormatters=true]\n * @param {boolean} [cfg.throwOnExtraSuppliedFormatters=true]\n * @returns {Promise<I18NCallback>} Rejects if no suitable locale is found.\n */\nexport const i18n = async function i18n ({\n  /* eslint-enable max-len */\n  locales,\n  defaultLocales,\n  localesBasePath,\n  localeResolver,\n  localeMatcher,\n  messageStyle,\n  allSubstitutions: defaultAllSubstitutionsValue,\n  insertNodes,\n  defaults: defaultDefaults,\n  substitutions: defaultSubstitutions,\n  dom: domDefaults = false,\n  forceNodeReturn: forceNodeReturnDefault = false,\n  maximumLocalNestingDepth,\n  throwOnMissingSuppliedFormatters:\n    throwOnMissingSuppliedFormattersDefault = true,\n  throwOnExtraSuppliedFormatters:\n    throwOnExtraSuppliedFormattersDefault = true\n} = {}) {\n  const {strings, locale: resolvedLocale} = await findLocaleStrings({\n    locales, defaultLocales, localeResolver, localesBasePath, localeMatcher\n  });\n\n  if (!strings || typeof strings !== 'object') {\n    throw new TypeError(`Locale strings must be an object!`);\n  }\n  const messageForKey = getMessageForKeyByStyle({messageStyle});\n  const formatter = (key, substitutions, {\n    allSubstitutions = defaultAllSubstitutionsValue,\n    defaults = defaultDefaults,\n    dom = domDefaults,\n    forceNodeReturn = forceNodeReturnDefault,\n    throwOnMissingSuppliedFormatters = throwOnMissingSuppliedFormattersDefault,\n    throwOnExtraSuppliedFormatters = throwOnExtraSuppliedFormattersDefault\n  } = {}) => {\n    const message = messageForKey(strings, key);\n    const string = getStringFromMessageAndDefaults({\n      message: (message && message.value) || false,\n      defaults,\n      messageForKey,\n      key\n    });\n\n    return getDOMForLocaleString({\n      string,\n      locals: strings.head && strings.head.locals,\n      switches: strings.head && strings.head.switches,\n      locale: resolvedLocale,\n      maximumLocalNestingDepth,\n      allSubstitutions,\n      insertNodes,\n      substitutions: {...defaultSubstitutions, ...substitutions},\n      dom,\n      forceNodeReturn,\n      throwOnMissingSuppliedFormatters,\n      throwOnExtraSuppliedFormatters\n    });\n  };\n\n  formatter.resolvedLocale = resolvedLocale;\n  formatter.strings = strings;\n\n  formatter.sort = (...args) => {\n    return sort(resolvedLocale, ...args);\n  };\n\n  return formatter;\n};\n"],"names":["module","lib","exports","VALUE_UNDEFINED","VALUE_UNSET","VALUE_NULL","VALUE_TRUE","VALUE_FALSE","VALUE_STRING","VALUE_NUMBER","VALUE_OBJECT","VALUE_ARRAY","VALUE_NEG_NAN","VALUE_NAN","VALUE_NEG_INFINITY","VALUE_INFINITY","VALUE_EMPTY","CONTEXT_UNKNOWN","contexts","getContext","ctx","pop","context","elements","element_array","dropContext","push","buffers","dropBuffer","buf","JSON6","escape","string","n","output","length","begin","cb","reviver","val","name","value_type","contains","pos","line","col","str","word","status","negative","result","undefined","context_stack","first","last","saved","node","recover","this","next","prior","parse_context","comment","fromHex","decimal","exponent","exponent_sign","exponent_digit","inQueue","shift","unshift","gatheringStringFirstChar","gatheringString","gatheringNumber","stringEscape","cr_escaped","unicodeWide","stringUnicode","stringHex","hex_char","hex_char_len","stringOct","completed","value","r","reset","save","write","msg","retcode","String","_write","walk","holder","key","k","v","Object","prototype","hasOwnProperty","call","complete_at_end","cInt","input","retval","throwError","leader","c","Error","fromCodePoint","substr","RESET_VAL","numberConvert","charCodeAt","Number","arrayPush","NaN","Infinity","console","log","objectPush","gatherString","start_c","charAt","codePointAt","collectNumber","_n","getBuffer","string_status","old_context","tmpobj","tmparr","FALSE","thorwError","_parser","freeze","_parse_level","parse","parser","parse_level","stringify","JSON","fn","unescapeBackslashes","replace","esc","slice","parseJSONExtra","args","jsonExtra","processRegex","regex","match","onMatch","extra","betweenMatches","afterMatch","escapeAtOne","previousIndex","exec","_","lastIndex","startMatchPos","sort","locale","arrayOfItems","options","Intl","Collator","compare","sortedList","listOptions","collationOptions","ListFormat","format","list","getFormatterInfo","object","Array","isArray","extraOpts","defaultAllSubstitutions","opts","arg","_typeof","applyArgs","type","checkArgOptions","split","userType","extraArgs","argOptions","singleKey","keys","includes","RelativeTimeFormat","NumberFormat","getTime","DateTimeFormat","TypeError","Formatter","getSubstitution","body","messageStyle","substitution","getMessageForKeyByStyle","messageForKey","LocalFormatter","locals","components","parent","constructor","isMatchingKey","every","cmpt","startsWith","RegularFormatter","substitutions","test","SwitchFormatter","switches","usedKeys","missingSuppliedFormatters","ky","getKey","getMatch","objKey","keySegment","formatter","getNumberFormat","defaultOptions","numberOpts","getPluralFormat","pluralOpts","PluralRules","select","formatterValue","toUpperCase","toLowerCase","preventNesting","s","err","error","find","switchKey","ks","reduce","obj","i","ret","entries","_this4","concat","then","direct","Promise","resolve","e","pact","state","o","_settle","bind","observer","_Pact","onFulfilled","onRejected","callback","_this","thenable","update","stage","shouldContinue","_isSettledPact","updateValue","reject","_resumeAfterTest","_resumeAfterBody","_resumeAfterUpdate","f","arguments","apply","promiseChainForValues","values","errBack","errorMessage","_async","breaking","p","defaultLocaleResolver","localesBasePath","defaultInsertNodes","dom","allSubstitutions","maximumLocalNestingDepth","checkExtraSuppliedFormatters","localFormatter","regularFormatter","switchFormatter","formattingRegex","substs","subst","allSubst","recursiveLocalCount","checkLocalVars","processSubsts","localFormatters","extraSubsts","returnsDOM","pipe","nodes","processSubstitutions","RegExp","cloneNode","map","mainObj","mergeWithPreviousOrStart","keysUnescaped","currObj","some","kys","message","info","getStringFromMessageAndDefaults","defaults","getDOMForLocaleString","insertNodes","forceNodeReturn","throwOnMissingSuppliedFormatters","throwOnExtraSuppliedFormatters","stringOrTextNode","document","createTextNode","forEach","matching","isMatch","container","createDocumentFragment","append","findLocaleStrings","getLocale","url","localeResolver","fetch","resp","json","strings","localeMatcher","locales","navigator","languages","defaultLocales","i18n","defaultAllSubstitutionsValue","defaultDefaults","defaultSubstitutions","domDefaults","forceNodeReturnDefault","throwOnMissingSuppliedFormattersDefault","throwOnExtraSuppliedFormattersDefault","resolvedLocale","head"],"mappings":"uqFAIA,IAJkCA,EAorC9BC,GAhrC6B,SAAUD,EAAQE,SAE7CC,GAAmB,EACnBC,EAAc,EACdC,EAAa,EACbC,EAAa,EACbC,EAAc,EACdC,EAAe,EACfC,EAAe,EACfC,EAAe,EACfC,EAAc,EACdC,EAAgB,EAChBC,EAAY,EACZC,EAAqB,GACrBC,EAAiB,GACjBC,EAAc,GAmCdC,EAAkB,EAKlBC,EAAW,YACRC,QAAmBC,EAAMF,EAASG,aAAYD,IAAMA,EAAM,CAAEE,QAAUL,EAAiBM,SAAW,KAAMC,cAAgB,OAAeJ,WACvIK,EAAYL,GAAOF,EAASQ,KAAMN,SAErCO,EAAU,YAEPC,EAAWC,GAAOF,EAAQD,KAAMG,OAErCC,EAAS5B,EAEb4B,EAAMC,OAAS,SAASC,OACnBC,EACAC,EAAS,OACRF,EAAS,OAAOA,MAChBC,EAAI,EAAGA,EAAID,EAAOG,OAAQF,IACX,KAAbD,EAAOC,IAA8B,MAAbD,EAAOC,IAA+B,KAAbD,EAAOC,IAA6B,KAAbD,EAAOC,KACpFC,GAAU,MAEXA,GAAUF,EAAOC,UAEXC,GAIRJ,EAAMM,MAAQ,SAAUC,EAAIC,SAErBC,EAAM,CAAEC,KAAO,KAClBC,WAAYrC,EACZ4B,OAAS,GACVU,SAAW,MAGPC,EAAM,CAAEC,KAAK,EAAGC,IAAI,OAElBC,EADJb,EAAI,MAEJc,EAzEkB,EA0ErBC,GAAS,EACTC,GAAW,EACXC,EAAS,KACT3B,OAAW4B,EACX3B,EAAgB,GAChB4B,EAAgB,CACfC,MAAQ,KACRC,KAAO,KACPC,MAAQ,KACR7B,KAAK8B,OACAC,EAAUC,KAAKH,MACfE,QAAiBF,MAAQE,EAAQE,KAAMF,EAAQD,KAAOA,EAAMC,EAAQE,KAAO,KAAMF,EAAQG,MAAQF,KAAKJ,MACnGG,EAAU,CAAED,KAAOA,EAAMG,KAAO,KAAMC,MAAQF,KAAKJ,MACrDI,KAAKJ,OAAOI,KAAKL,MAAQI,QACzBH,KAAOG,GAEbpC,UACK6B,EAASQ,KAAKJ,YACbJ,IACCQ,KAAKJ,KAAOJ,EAAOU,SAAUF,KAAKL,MAAQ,MAChDH,EAAOS,KAAOD,KAAKH,WAAYA,MAAQL,EAChCA,EAAOM,MAHO,OAOvBK,EAAgB5C,EAChB6C,EAAU,EACVC,GAAU,EACVC,GAAU,EACVC,GAAW,EACXC,GAAgB,EAChBC,GAAiB,EACjBC,EAAU,CACTf,MAAQ,KACRC,KAAO,KACPC,MAAQ,KACR7B,KAAK8B,OACAC,EAAUC,KAAKH,MACfE,QAAiBF,MAAQE,EAAQE,KAAMF,EAAQD,KAAOA,EAAMC,EAAQE,KAAO,KAAMF,EAAQG,MAAQF,KAAKJ,MACnGG,EAAU,CAAED,KAAOA,EAAMG,KAAO,KAAMC,MAAQF,KAAKJ,MACrDI,KAAKJ,OAAOI,KAAKL,MAAQI,QACzBH,KAAOG,GAEbY,YACKnB,EAASQ,KAAKL,aACbH,IACCQ,KAAKL,MAAQH,EAAOS,QAASD,KAAKJ,KAAO,MAC/CJ,EAAOS,KAAOD,KAAKH,WAAYA,MAAQL,EAChCA,EAAOM,MAHO,MAKtBc,QAAQd,OACHC,EAAUC,KAAKH,MACfE,QAAiBF,MAAQE,EAAQE,KAAMF,EAAQD,KAAOA,EAAMC,EAAQE,KAAOD,KAAKL,MAAOI,EAAQG,MAAQ,MACpGH,EAAU,CAAED,KAAOA,EAAMG,KAAOD,KAAKL,MAAOO,MAAQ,MACtDF,KAAKL,QAAQK,KAAKJ,KAAOG,QACzBJ,MAAQI,IAGfc,EAA2B,KAC3BC,GAAkB,EAClBC,GAAkB,EAClBC,GAAe,EACfC,GAAa,EACbC,GAAc,EACdC,GAAgB,EAChBC,GAAY,EACZC,EAAW,EACXC,EAAe,EACfC,GAAY,EACZC,GAAY,QAGN,CACNC,YACKC,EAAIlC,SACRA,OAASC,EACFiC,GAERC,QACCtC,EAzJoB,EA0JpBC,GAAS,EACLoB,EAAQd,OAAOc,EAAQd,KAAKK,KAAOS,EAAQkB,MAC/ClB,EAAQkB,KAAOlB,EAAQf,MACvBe,EAAQf,MAAQe,EAAQd,KAAO,KAC3BF,EAAcE,OAAOF,EAAcE,KAAKK,KAAOP,EAAckC,MACjElC,EAAckC,KAAOlB,EAAQf,MAC7BD,EAAcC,MAAQD,EAAcE,KAAO,KAC3C9B,EAAgB,KAChBD,OAAW4B,EACXU,EAAgB5C,EAChBsB,EAAIE,WAAarC,EACjBmC,EAAIC,KAAO,KACXD,EAAIP,OAAS,GACbW,EAAIC,KAAO,EACXD,EAAIE,IAAM,EACVI,GAAW,EACXa,EAAU,EACVoB,GAAY,EACZV,GAAkB,EAClBE,GAAe,EACfC,GAAa,GAMdY,MAAMC,OACDC,MACe,iBAARD,IAAkBA,EAAME,OAAOF,IACrCC,EAAU/B,KAAKiC,OAAOH,GAAI,GAAQC,EAAU,IAC5CvC,IACoB,mBAAZZ,GAA0B,SAASsD,EAAKC,EAAQC,OACtDC,EAAGC,EAAGb,EAAQU,EAAOC,MACrBX,GAA0B,iBAAVA,MACdY,KAAKZ,EACLc,OAAOC,UAAUC,eAAeC,KAAKjB,EAAOY,UAErC5C,KADV6C,EAAIJ,EAAKT,EAAOY,IAEfZ,EAAMY,GAAKC,SAEJb,EAAMY,WAKVzD,EAAQ8D,KAAKP,EAAQC,EAAKX,GAdG,CAenC,IAAKjC,GAAS,IAChBb,EAAIa,GACJA,OAASC,KAENsC,EAAU,IArBqCA,EAAU/B,KAAKiC,YAyBpEA,OAAOH,EAAIa,OACNC,EACAC,EACA1E,GACA2E,GAAS,WAEJC,GAAYC,EAAQC,SACtB,IAAIC,MAAQ,GAAEF,MAAWhB,OAAOmB,cAAeF,qBAAsB1E,YAAYJ,GAAIiF,OAAO7E,EAAE,EAAGA,EAAE,EAAG,EAAEA,EAAE,EAAE,EAAGA,EAAE,MAAOyD,OAAOmB,cAAeF,MAAO9E,GAAIiF,OAAO7E,EAAG,UAAUU,EAAIC,QAAQD,EAAIE,iBAG3LkE,KACRxE,EAAIE,WAAarC,EACjBmC,EAAIP,OAAS,YAGLgF,GAAehF,UACnBA,EAAOG,OAAS,IACd4B,IAAYC,IAAYC,GACC,KAAzBjC,EAAOiF,WAAW,IACbhE,GAAU,EAAE,GAAKiE,OAAQ,KAAOlF,IAGnCiB,GAAU,EAAE,GAAKiE,OAAQlF,YAGzBmF,YACA5E,EAAIE,iBACPhC,EACJe,EAAcE,KAAMsF,GAAczE,EAAIP,oBAElCxB,EACJgB,EAAcE,KAAMa,EAAIP,mBAEpB1B,EACJkB,EAAcE,MAAM,cAEhBnB,EACJiB,EAAcE,MAAM,cAEhBd,OAGAC,EACJW,EAAcE,KAAM0F,gBAEhBtG,EACJU,EAAcE,MAAM,EAAA,cAEhBX,EACJS,EAAcE,KAAM2F,EAAAA,cAEhBhH,EACJmB,EAAcE,KAAM,iBAEhBvB,EACJqB,EAAcE,UAAMyB,cAEhBnC,EACJQ,EAAcE,UAAMyB,UACb3B,EAAcA,EAAcW,OAAO,cAEtCzB,OAGAC,EACJa,EAAcE,KAAMa,EAAIG,wBAGxB4E,QAAQC,IAAK,mCAINC,YACAjF,EAAIE,iBACPhC,EACJc,EAASgB,EAAIC,MAAQwE,GAAczE,EAAIP,mBAEnCxB,EACJe,EAASgB,EAAIC,MAAUD,EAAIP,kBAEvB1B,EACJiB,EAASgB,EAAIC,OAAU,aAEnBjC,EACJgB,EAASgB,EAAIC,OAAU,aAEnB5B,OAGAC,EACJU,EAASgB,EAAIC,MAAU4E,eAEnBtG,EACJS,EAASgB,EAAIC,OAAU,EAAA,aAEnBzB,EACJQ,EAASgB,EAAIC,MAAU6E,EAAAA,aAEnBhH,EACJkB,EAASgB,EAAIC,MAAU,gBAEnBrC,EACJoB,EAASgB,EAAIC,WAAUW,aAEnBzC,OAGAC,EACJY,EAASgB,EAAIC,MAAQD,EAAIG,mBAKlB+E,GAAcC,OAClBlB,EAAS,OACI,GAAVA,GAAiBvE,EAAIJ,GAAIM,QAChC,CACCW,EAAMjB,GAAI8F,OAAO1F,OACbqE,EAAOzE,GAAI+F,YAAY3F,QACvBqE,GAAQ,QAAYxD,GAAOjB,GAAI8F,OAAO1F,GAAIA,KAE9CU,EAAIE,MACAyD,GAAQoB,EAEPhD,GAAiBnC,EAAIP,QAAUc,EAAK4B,GAAe,IAEtD8B,GAAU,EACNvB,EACHwB,GAAY,4BAA6BH,GACjCxB,EACR2B,GAAY,kCAAmCH,GACvCzB,EACR4B,GAAY,8BAA+BH,GACnC1B,GACR6B,GAAY,mCAAoCH,GACjDE,EAAS,QAIN,GAAI9B,EAAe,IACnBO,EAAY,IACXD,EAAe,GAAKsB,GAAQ,IAAaA,GAAQ,GAAY,IAChEvB,GAAY,EACZA,GAAYuB,EAAO,GAEE,KADrBtB,EACyB,CACxBzC,EAAIP,QAAU0D,OAAOmB,cAAe9B,GACpCE,GAAY,EACZP,GAAe,uBAKZK,EAAW,IAAM,CACpB0B,GAAY,uEAAwEH,GACpFE,GAAU,QAGXjE,EAAIP,QAAU0D,OAAOmB,cAAe9B,GACpCE,GAAY,EACZP,GAAe,WAIZ,GAAIE,EAAc,IACV,KAAR0B,EAAqB,CACxB/D,EAAIP,QAAU0D,OAAOmB,cAAe9B,GACpCH,GAAc,EACdC,GAAgB,EAChBH,GAAe,cAGhBK,GAAY,GACRuB,GAAQ,IAAaA,GAAQ,GAAiBvB,GAAYuB,EAAO,QAChE,GAAIA,GAAQ,IAAaA,GAAQ,GAAYvB,GAAcuB,EAAO,GAAO,OACzE,CAAA,KAAIA,GAAQ,IAAaA,GAAQ,KACjC,CACJG,GAAY,0CAA2CH,GACvDE,GAAU,EACV5B,GAAc,EACdF,GAAe,WALmCK,GAAcuB,EAAO,GAAO,YAU3E,GAAIxB,GAAaD,EAAgB,IAChB,IAAjBG,GAA+B,MAATsB,EAAsB,CAC/C1B,GAAc,cAGXI,EAAe,GAAOH,GAAiBG,EAAe,EAAM,IAC/DD,GAAY,GACRuB,GAAQ,IAAaA,GAAQ,GAAiBvB,GAAYuB,EAAO,QAChE,GAAIA,GAAQ,IAAaA,GAAQ,GAAYvB,GAAcuB,EAAO,GAAO,OACzE,CAAA,KAAIA,GAAQ,IAAaA,GAAQ,KACjC,CACJG,GAAY5B,EAAc,0CAA0C,0CAA2CyB,GAC/GE,GAAU,EACV1B,GAAY,EACZJ,GAAe,WALmCK,GAAcuB,EAAO,GAAO,GAQ/EtB,IACIH,EACiB,GAAhBG,IACHzC,EAAIP,QAAU0D,OAAOmB,cAAe9B,GACpCF,GAAgB,EAChBH,GAAe,GAGQ,GAAhBM,IACRzC,EAAIP,QAAU0D,OAAOmB,cAAe9B,GACpCD,GAAY,EACZJ,GAAe,oBAKV4B,QAEH,GACJ3B,GAAa,EACbhC,EAAIE,IAAM,gBAEN,QACA,UACA,KACJF,EAAIC,kBAEA,IACJL,EAAIP,QAAU,gBAEV,GACJO,EAAIP,QAAU,gBAEV,IACJO,EAAIP,QAAU,gBAEV,IACJO,EAAIP,QAAU,gBAEV,IACJO,EAAIP,QAAU,gBAEV,QAAgB,QAAgB,QAAgB,GACpDiD,GAAY,EACZF,EAAWuB,EAAO,GAClBtB,EAAe,gBAEX,IACJF,GAAY,EACZE,EAAe,EACfD,EAAW,gBAEP,IACJF,GAAgB,EAChBG,EAAe,EACfD,EAAW,mBAQXxC,EAAIP,QAAUc,EAIf4B,GAAe,OAEX,GAAa,KAAT4B,EAEJ5B,GACHnC,EAAIP,QAAU,KACd0C,GAAe,GAGfA,GAAe,MAGjB,IACKC,EAAa,IAChBA,GAAa,EACD,IAAR2B,EAAqB,CACxB3D,EAAIC,OACJD,EAAIE,IAAM,EACV6B,GAAe,WAGf/B,EAAIC,OACJD,EAAIE,IAAM,WAIZN,EAAIP,QAAUc,UAGT0D,WAICqB,SACJC,QACIA,EAAK7F,GAAKJ,GAAIM,QACtB,CACCW,EAAMjB,GAAI8F,OAAOG,OACbxB,EAAOzE,GAAI+F,YAAY3F,QACvBqE,GAAQ,QAAYG,GAAY,8BAA+BH,GAAQxD,GAAOjB,GAAI8F,OAAO1F,GAAIA,KACrF,IAARqE,KAEJ3D,EAAIE,MAEAyD,GAAQ,IAAaA,GAAQ,GAE5BrC,IACHE,GAAiB,GAElB5B,EAAIP,QAAUc,OACR,GAAY,IAARwD,GAA6B,IAARA,EAAoB,IAC1B,GAArB/D,EAAIP,OAAOG,UAAiB8B,GAAaC,GAAkBC,GAGxD,CACNnB,GAAS,EACTyD,GAAY,8BAA+BH,SAJ3C/D,EAAIP,QAAUc,EACdoB,GAAgB,OAMX,GAAY,IAARoC,EAAoB,IACzBtC,GAAYD,GAAYE,EAGtB,CACNjB,GAAS,EACTyD,GAAY,8BAA+BH,SAJ3C/D,EAAIP,QAAUc,EACdkB,GAAU,OAML,GAAY,KAARsC,GAA8B,IAARA,GAA6B,KAARA,GAClC,IAARA,GAA6B,IAARA,GAA6B,IAARA,EAAoB,IAEpEvC,GAAyB,KAAdxB,EAAIP,OAIf,CACJgB,GAAS,EACTyD,GAAY,8BAA+BH,SAL3CvC,GAAU,EACVxB,EAAIP,QAAUc,MAOT,CAAA,GAAc,KAARwD,GAAkC,IAARA,EAShC,IACM,IAARA,GAA6B,IAARA,GAAsB,IAARA,GAAsB,GAARA,GACxC,OAARA,GAA0B,IAARA,GAA6B,KAARA,GAA8B,IAARA,GACrD,IAARA,QAIAD,IACHrD,GAAS,EACTyD,GAAY,8BAA+BH,aAjBxCrC,EAGE,CACNjB,GAAS,EACTyD,GAAY,8BAA+BH,SAJ3C/D,EAAIP,QAAUc,EACdmB,GAAW,GAqBdhC,EAAI6F,EAEEzB,GAAoBpE,GAAKJ,GAAIM,QAMlCsC,GAAkB,EAClBlC,EAAIE,WAAahC,EACboD,GAAiB5C,IACpBiE,GAAY,IAPbT,GAAkB,MAafzB,EACJ,OAAQ,MAELwC,GAAOA,EAAIrD,SACdoE,iBA/iBuB1E,EAAMF,EAAQN,aAAYQ,EAAoCA,EAAII,EAAI,EAAtCJ,EAAM,CAAEA,IAAI,KAAMI,EAAE,GAA4BJ,EA+iB/FkG,IACFlG,IAAM2D,EACZpB,EAAQ1C,KAAM6E,IAEV9B,IAEHA,GAAkB,EAClBlC,EAAIE,WAAahC,EACboD,GAAiB5C,IACpBiE,GAAY,GAEbsB,GAAS,GAIJxD,IAAYuD,EAAQnC,EAAQC,UAAY,IAC9CpC,EAAIsE,EAAMtE,EACVJ,GAAM0E,EAAM1E,IACR2C,EAAkB,KACjBwD,EAAgBP,GAAclD,GAC9ByD,EAAgB,EACnBhF,GAAS,EACDgF,EAAgB,IAExBxD,GAAkB,EACdxB,IAAST,EAAIE,WAAajC,QAG5BiE,GACHoD,MAGO3C,GAAalC,GAAYf,EAAIJ,GAAIM,QACzC,IACCW,EAAMjB,GAAI8F,OAAO1F,IACjBqE,EAAOzE,GAAI+F,YAAY3F,OACX,QAAYa,GAAOjB,GAAI8F,OAAO1F,GAAIA,KAC9CU,EAAIE,MACAiB,EAAU,IACE,GAAXA,EAAe,IACN,IAARwC,EAAoB,CAAExC,EAAU,WACxB,IAARwC,GACHG,GAAY,uBAAwBH,GACpCtD,GAAS,GAELc,EAAU,cAGD,GAAXA,EAAe,IACN,IAARwC,EAAqB,CAAExC,EAAU,WAChC,YAES,GAAXA,EAAc,IACL,IAARwC,EAAoB,CAAExC,EAAU,WAC/B,YAES,GAAXA,EAAe,IACN,IAARwC,EAAoB,CAAExC,EAAU,WACjB,IAARwC,IAAoBxC,EAAU,oBAGnCwC,QAEH,GACCxC,IAAUA,EAAU,cAErB,OA/nBa,IAgoBbf,GA/nBmB,IA+nBOA,GA1nBP,GA0nByCc,GA7pB/C,GA6pBwFd,EAA2B,CACnI0D,GAAY,sDAAuDH,GACnEtD,GAAS,aAILiF,EAAc9G,IAElBoB,EAAIE,WAAa/B,MACbwH,EAAS,GACTrE,GAAiB5C,EACpBiC,EAAS3B,EAAW2G,EApoBO,GAuoBnBrE,IACRtC,EAASgB,EAAIC,MAAQ0F,GAEtBD,EAAY3G,QAAUuC,EACtBoE,EAAY1G,SAAWA,EACvB0G,EAAYzG,cAAgBA,EAC5ByG,EAAYzF,KAAOD,EAAIC,KACvBjB,EAAW2G,EACX9E,EAAc1B,KAAMuG,GACpBlB,KACAlD,EAlpBsB,aAspBnB,MAtpBmB,GAupBnBA,GA7pBa,IA6pB4Bd,GA5pBtB,IA4pBgDA,EAA+B,CACrG0D,GAAY,2DAA4DH,GACxEtD,GAAS,aAILiF,EAAc9G,IAElBoB,EAAIE,WAAa9B,MACbwH,EAAS,GACTtE,GAAiB5C,EACpBiC,EAAS1B,EAAgB2G,EAjqBE,GAoqBnBtE,IACRtC,EAASgB,EAAIC,MAAQ2F,GAEtBF,EAAY3G,QAAUuC,EACtBoE,EAAY1G,SAAWA,EACvB0G,EAAYzG,cAAgBA,EAC5ByG,EAAYzF,KAAOD,EAAIC,KACvBhB,EAAgB2G,EAChB/E,EAAc1B,KAAMuG,GAEpBlB,KACAlD,EAjrBkB,aAqrBf,MAprBmB,GAsrBnBA,EACJ,IA1tBiB,GA2tBZd,GA9rBY,IA+rBZA,GA9rBkB,IA+rBlBA,EAA+B,CAElCC,EAASoF,MACTC,WAAa,0EAAyEtF,KAASuD,SAGhGvD,EAnuBgB,EAouBhBR,EAAIC,KAAOD,EAAIP,OACfO,EAAIP,OAAS,GACb6B,EAlsB4B,EAmsB5BtB,EAAIE,WAAarC,OAKhBqG,GA1sBiB,GAysBd5C,EACU,qDAED,+DAFuDyC,GAGpEtD,GAAS,aAGN,OAntBW,IAqtBXD,IAEHA,EAtvBgB,GAmCM,GAstBjBc,EAA0C,CAC/CkD,SACIkB,EAAc7E,EAAc/B,MAChCwC,EAAgBoE,EAAY3G,QAC5BC,EAAW0G,EAAY1G,SACvBC,EAAgByG,EAAYzG,cAC5BC,EAAawG,GACTpE,GAAiB5C,IACpBiE,GAAY,QAGT,GAhuBwB,GAguBlBrB,EACX,CACKtB,EAAIE,YAAcrC,GACrBoH,KAEDjF,EAAIE,WAAa/B,EACjB6B,EAAIG,SAAWnB,MAGX0G,GAAc7E,EAAc/B,MAChCkB,EAAIC,KAAOyF,GAAYzF,KACvBqB,EAAgBoE,GAAY3G,QAC5BC,EAAW0G,GAAY1G,SACvBC,EAAgByG,GAAYzG,cAC5BC,EAAawG,IACTpE,GAAiB5C,IACpBiE,GAAY,QAKbuB,GAAY,kCAAmCH,GAC/CtD,GAAS,EAEVC,GAAW,aAEP,GA/vBW,IAgwBXF,IAAuBA,EA/xBV,GAkCE,GA8vBfc,GAECtB,EAAIE,YAAcrC,GACrB+G,KAGD5E,EAAIE,WAAa9B,EACjB4B,EAAIG,SAAWlB,EAEVyG,GAAc7E,EAAc/B,MAChCkB,EAAIC,KAAOyF,GAAYzF,KACvBqB,EAAgBoE,GAAY3G,QAC5BC,EAAW0G,GAAY1G,SACvBC,EAAgByG,GAAYzG,cAC5BC,EAAawG,IAEVpE,GAAiB5C,IACpBiE,GAAY,KAKbuB,GAAa,eAAc5C,yBAAsCyC,GACjEtD,GAAS,GAEVC,GAAW,aAEP,GA5xBW,IA6xBXF,IAAuBA,EA5zBV,GAkCE,GA2xBfc,GAECtB,EAAIE,YAAcrC,IACrBmC,EAAIE,WAAazB,GAEduB,EAAIE,YAAcrC,IACrB+G,KACAJ,OAhyB2B,GAoyBpBlD,GAERA,EAvyBsB,EAwyBlBtB,EAAIE,YAAcrC,IACrBoH,KACAT,QAKD/D,GAAS,EACTyD,GAAY,+CAAgDH,IAE7DrD,GAAW,mBAlzBY,GAszBnBY,SACKyC,QAEH,QACA,QACA,GA91BW,GA+1BXvD,EACiB0E,GAAanB,GAEhC/D,EAAIE,WAAajC,GAEjB+D,EAA2B+B,EAC3B9B,GAAkB,GAGnBiC,GAAY,wDAAyDH,cAIlE,GACJ3D,EAAIC,OACJD,EAAIE,IAAM,OAEN,QACA,QACA,OACA,SAp1BS,IAq1BTE,EAAuB,CAC1BA,EAr3Bc,EAs3BVc,GAAiB5C,IACpBiE,GAAY,YAv3BC,GA23BXnC,GA71BiB,IA61BSA,QA91Bf,IAg2BNA,EACRA,EAh2BoB,IAm2BpBC,GAAS,EACTyD,GAAY,6CAA8CH,kBAp2BtC,IAy2BjBvD,IACHC,GAAS,EACTyD,GAAY,4CAA6CH,IAz4B3C,GA24BXvD,IAAyBA,EA92Bd,IA+2BfR,EAAIP,QAAUc,OAKX,OAAQwD,QAER,QACA,QACA,GAEgBmB,GAAcnB,IAEjC/D,EAAIE,WAAajC,EACjBuC,EA33Ba,KA63BbwB,EAA2B+B,EAC3B9B,GAAkB,cAIf,GACJ7B,EAAIC,OACJD,EAAIE,IAAM,OACN,QACA,OACA,QACA,SAx4BU,IAy4BVE,EAAuB,CAC1BA,EAz6Be,EA06BXc,GAAiB5C,IACpBiE,GAAY,YA36BE,GA+6BZnC,EACH,MAn5Be,IAo5BPA,EACRA,EAp5BqB,IAu5BrBC,GAAS,EACTyD,GAAY,2BAA4BH,eAKrC,IA37BY,GA47BZvD,EAAyBA,EA37BZ,EAyBI,IAm6BZA,EAA8BA,EAl6BlB,IAm6BdC,GAAS,EAAOyD,GAAY,gBAAiBH,eAEhD,IA/7Ba,GAg8BbvD,EAA0BA,EA/7Bb,GAg8BVC,GAAS,EAAOyD,GAAY,gBAAiBH,eAEhD,IAl8Ba,GAm8BbvD,EAA0BA,EAl8Bb,EAKA,GA87BRA,EAA0BA,EA77BlB,GATD,GAu8BPA,EAAyBA,EA57BZ,IA67BfC,GAAS,EAAOyD,GAAY,gBAAiBH,eAEhD,IAv8Ba,GAw8BbvD,GACHR,EAAIE,WAAanC,EACjByC,EA96Ba,IAxBI,GAu8BPA,GACVR,EAAIE,WAAalC,EACjBwC,EAj7Ba,IAlBQ,IAo8BXA,EAA+BA,EAn8BpB,GAGA,IAi8BbA,EAA+BA,EAh8BlB,IAi8BfC,GAAS,EAAOyD,GAAY,gBAAiBH,eAEhD,IAr9BY,GAs9BZvD,EAAyBA,EA98BZ,EAGK,IA48BbA,EAA+BA,EA38BlB,GAIA,IAw8BbA,EAA+BA,EAv8BlB,GAID,IAo8BZA,EAA8BA,EAn8BlB,GAEA,IAk8BZA,EAA8BA,EAj8BlB,IAk8BdC,GAAS,EAAOyD,GAAY,gBAAiBH,eAEhD,IAj9BkB,IAk9BlBvD,EAA+BA,EAj9Bb,GAKA,IA68BbA,GAAiCR,EAAIE,WAAWtC,EAAiB4C,EAh8B5D,KAi8BPC,GAAS,EAAOyD,GAAY,gBAAiBH,eAEhD,IAn9BkB,IAo9BlBvD,EAA+BA,EAn9Bb,GAOD,IA68BZA,EAA8BA,EA58BlB,GACA,IA48BZA,EAA8BA,EA38BlB,IA48BdC,GAAS,EAAOyD,GAAY,gBAAiBH,eAEhD,IA/9Ba,IAg+BbvD,EAA0BA,EA/9Bb,GAAA,IAg+BRA,GACRR,EAAIE,WAAapC,EACjB0C,EA78Ba,IA1BI,GAw+BPA,EAA2BA,EAv+BpB,GAw+BXC,GAAS,EAAOyD,GAAY,gBAAiBH,eAEhD,IAh/BY,GAi/BZvD,EAAyBA,EA7+BX,EAUI,IAo+BbA,EAA+BA,EAn+BlB,GAOD,IA69BZA,EAA8BA,EA59BlB,IA69BdC,GAAS,EAAOyD,GAAY,gBAAiBH,eAEhD,GAl/Bc,GAm/BdvD,EAA2BA,EAl/Bb,EAcF,IAq+BPA,EAAyBA,EAp+BlB,IAq+BTC,GAAS,EAAOyD,GAAY,gBAAiBH,eAEhD,IAr/Bc,GAs/BdvD,EAA2BA,EAr/Bb,GAs/BXC,GAAS,EAAOyD,GAAY,gBAAiBH,eAEhD,GA//BY,GAggCZvD,EAAyBA,EA3+BR,IA4+BdC,GAAS,EAAOyD,GAAY,gBAAiBH,eAEhD,GAngCY,GAogCZvD,EAAyBA,EAj/Bb,GACA,IAi/BPA,GAA2BR,EAAIE,WAAaQ,EAAWrC,EAAgBC,EAAWoC,GAAW,EAAOF,EAt+B/F,KAu+BPC,GAAS,EAAOyD,GAAY,gBAAiBH,eAEhD,IA7+BiB,IA8+BjBvD,GAAgCR,EAAIE,WAAaQ,EAAWnC,EAAqBC,EAAgBkC,GAAW,EAAOF,EA1+BzG,KA2+BPC,GAAS,EAAOyD,GAAY,gBAAiBH,eAEhD,GA5gCY,GA6gCZvD,EAAyBE,GAAYA,GAClCD,GAAS,EAAOyD,GAAY,gBAAiBH,kBAK9CA,GAAQ,IAAaA,GAAQ,IAAyB,IAARA,GAAiC,IAARA,GAAiC,IAARA,GAErGvC,GAAU,EACVE,GAAW,EACXC,GAAgB,EAChBC,GAAiB,EACjBH,GAAU,EACVzB,EAAIP,OAASc,EACbyD,EAAMtE,EAAIA,EACV4F,OAIA7E,GAAS,EACTyD,GAAY,gBAAiBH,QAM5BpB,EAAY,CAxgCA,IAygCXnC,IACHA,EAziCgB,aA+iCfd,GAAKJ,GAAIM,QACZP,EAAY2E,GACR/B,GAAmBC,GA9gCC,GA8gCkBZ,EACzC2C,GAAS,EAGL3C,GAAiB5C,GAAqBsB,EAAIE,YAAcrC,IAAe8C,IAC1EgC,GAAY,EACZsB,GAAS,KAMXD,EAAMtE,EAAIA,EACVmC,EAAQE,QAASiC,GACjBC,GAAS,GAENtB,EACH,UAGGlC,EAAS,OAAQ,KAClBkC,GAAa3C,EAAIE,YAAcrC,EAAc,QACxCmC,EAAIE,iBACPhC,EACJyC,EAAS8D,GAAczE,EAAIP,mBAEvBxB,EACJ0C,EAASX,EAAIP,kBAET1B,EACJ4C,GAAS,aAEL3C,EACJ2C,GAAS,aAEL7C,EACJ6C,EAAS,gBAEL/C,EACJ+C,OAASC,aAELtC,OAGAD,EACJsC,EAAS,eAELnC,EACJmC,EAASmE,EAAAA,aAELvG,EACJoC,GAAS,EAAA,aAELxC,OAGAC,EACJuC,EAASX,EAAIG,SAGdO,GAAW,EACXV,EAAIP,OAAS,GACbO,EAAIE,WAAarC,SAElB8E,GAAY,EACLsB,YAOJ8B,EAAU,CAACrC,OAAOsC,OAAQzG,EAAMM,cAClCoG,EAAe,EACnB1G,EAAM2G,MAAQ,SAAUjD,EAAKlD,OAGxBoG,EADAC,EAAcH,OAEdF,EAAQnG,QAAUwG,GACrBL,EAAQ5G,KAAMuE,OAAOsC,OAAQzG,EAAMM,UACpCsG,EAASJ,EAAQK,GACE,iBAARnD,IAAkBA,EAAME,OAAOF,IAC1CkD,EAAOrD,QACHqD,EAAO/C,OAAQH,GAAK,GAAS,EACjC,KACKtC,EAASwF,EAAOvD,cACY,mBAAZ7C,GAA0B,SAASsD,EAAKC,EAAQC,OAC/DC,EAAGC,EAAGb,EAAQU,EAAOC,MACrBX,GAA0B,iBAAVA,MACdY,KAAKZ,EACLc,OAAOC,UAAUC,eAAeC,KAAKjB,EAAOY,UAErC5C,KADV6C,EAAIJ,EAAKT,EAAOY,IAEfZ,EAAMY,GAAKC,SAEJb,EAAMY,WAKVzD,EAAQ8D,KAAKP,EAAQC,EAAKX,GAdY,CAe5C,IAAKjC,GAAS,IAChBsF,IACOtF,IAITpB,EAAM8G,UAAYC,KAAKD,UAhrCWE,CAA1B9I,EAAS,CAAEE,QAAS,IAAiBF,EAAOE,SAAUF,EAAOE,SCIxD6I,EAAsB,SAACjG,UAC3BA,EAAIkG,QAAQ,QAAS,SAACC,UACpBA,EAAIC,MAAM,EAAGD,EAAI9G,OAAS,OAIxBgH,EAAiB,SAACC,UACtBC,EAAUZ,WAGRW,GAAQ,IAAIJ,QAAQ,MAAQ,IAAIA,QAAQ,MAAQ,IAAM,MAIpDM,EAAe,SAACC,EAAOzG,SAO9B0G,EANJC,IAAAA,QACAC,IAAAA,MACAC,IAAAA,eACAC,IAAAA,WACAC,IAAAA,YAGIC,EAAgB,MAChBJ,IACFC,EAAiBD,EACjBE,EAAaF,EACbG,EAAcH,GAEqB,QAA7BF,EAAQD,EAAMQ,KAAKjH,KAAgB,SACxB0G,KAAVQ,OAAGf,OACHgB,EAAaV,EAAbU,UAEDC,EAAgBD,EAAYD,EAAE7H,OAChC+H,EAAgBJ,GAClBH,EAAe7G,EAAIoG,MAAMY,EAAeI,IAGtCL,GAAeZ,EAAI9G,OAAS,GAC9B2H,EAAgBG,EAChBJ,EAAYG,KAGdP,iBAAWD,IACXM,EAAgBG,GAEdH,IAAkBhH,EAAIX,QACxByH,EAAW9G,EAAIoG,MAAMY,KCnDZK,EAAO,SAACC,EAAQC,EAAcC,UAClCD,EAAaF,KAAK,IAAII,KAAKC,SAChCJ,EACAE,GACAG,UASSC,EAAa,SACxBN,EAAQC,EAAcM,EAAaC,UAEnCT,EAAKC,EAAQC,EAAcO,GATT,SAACR,EAAQC,EAAcC,UAClC,IAAIC,KAAKM,WACdT,EAAQE,GACRQ,OAAOT,GAOFU,CAAKX,EAAQC,EAAcM,ICdvBK,EAAmB,gBAAEC,IAAAA,UAC5BC,MAAMC,QAAQF,GAAS,SACWA,WAC7B,CAAC9F,WAAOmF,aAASc,sBAEnB,CAACjG,MAAO8F,IAkBJI,EAA0B,gBASjCC,EAAMF,EAT6BjG,IAAAA,MAAOoG,IAAAA,IAAUnB,KAALtE,MAAKsE,WAGrC,iBAAVjF,GAAuBA,GAA0B,WAAjBqG,EAAOrG,IAC9C,aAAcA,SAEPA,MAKHsG,EAAY,gBAAEC,IAAAA,SAAMpB,QAAAA,aAAUgB,QAAMK,gBAAAA,mBACrB,iBAARJ,EAAkB,SACaA,EAAIK,MAAM,QAA7CC,OAAUC,OAAWC,OAET,SAAbF,IACFA,EAAW,YAETA,IAAaH,IACVI,EAEOH,IAAmBI,IAE7BzB,OACKA,KACAnB,EACDwC,GAAmBI,EAAaA,EAAaD,KANjDxB,EAAU,WAYTA,MAGLnF,GAA0B,WAAjBqG,EAAOrG,GAAoB,KAChC6G,EAAY/F,OAAOgG,KAAK9G,GAAO,MACjC,CACF,SAAU,OAAQ,WAAY,WAAY,OAAQ,UAClD+G,SAASF,GAAY,OAGjBhB,EAAiB,CAACC,OAAQ9F,EAAM6G,YADlC7G,IAAAA,MAAgBmG,IAAThB,QAAec,IAAAA,UAGhBY,OACH,iBAEiB,CAACV,EAAMF,UAA1BA,OAAWE,OACL,IAAIf,KAAK4B,mBACd/B,EAAQqB,EAAU,CAACC,KAAM,cACzBZ,OAAO3F,EAAOiG,OAGb,cACIV,EAAWN,EAAQjF,EAAOsG,EAAU,CAACC,KAAM,SAAUD,EAAU,CACpEC,KAAM,OAAQpB,QAASc,EAAWO,iBAAiB,UAYtC,iBAAVxG,SACF,IAAIoF,KAAK6B,aACdhC,EACAqB,EAAU,CAACC,KAAM,YACjBZ,OAAO3F,MAKTA,GAA0B,WAAjBqG,EAAOrG,IACS,mBAAlBA,EAAMkH,eAEN,IAAI9B,KAAK+B,eACdlC,EACAqB,EAAU,CAACC,KAAM,cACjBZ,OAAO3F,SAIL,IAAIoH,UAAU,sBC5GTC,0BAGPC,EAAkB,gBAAE3G,IAAAA,IAAK4G,IAAAA,KAAMhB,IAAAA,SAAMiB,aAEnCC,EADgBC,EAAwB,CAACF,wBADS,gBAEnCG,CAAc,CAACJ,KAAAA,GAAO5G,OACtC8G,QACG,IAAIhG,wCAAiC8E,oBAAc5F,eAIpD8G,EAAazH,OAGT4H,EAAb,uBACeC,sDAENA,OAASA,eAHkBR,8CAKjB1G,UACR2G,EAAgB,CACrB3G,IAAKA,EAAIoD,MAAM,GAAIwD,KAAMhJ,KAAKsJ,OAAQtB,KAAM,0CAGvC5F,OACDmH,EAAanH,EAAIoD,MAAM,GAAG0C,MAAM,KAClCsB,EAASxJ,KAAKsJ,cACXtJ,KAAKyJ,YAAYC,cAActH,IAAQmH,EAAWI,OAAM,SAACC,OACxDpK,EAASoK,KAAQJ,SACvBA,EAASA,EAAOI,GACTpK,6CAGW4C,UACbA,EAAIyH,WAAW,WApB1B,GAwBaC,EAAb,uBACeC,sDAENA,cAAgBA,eAHajB,sCAK3B1G,UACApC,KAAKyJ,YAAYC,cAActH,IAAQA,KAAOpC,KAAK+J,sDAEtC3H,SACZ,gBAAQ4H,KAAK5H,SATzB,GAaa6H,EAAb,uBACeC,WAAWH,IAAAA,2DAEjBG,SAAWA,IACXH,cAAgBA,eAJYjB,8CAMlB1G,SAQX4F,EAAMJ,EARWlB,IAAAA,OAAQyD,IAAAA,SAAUtC,IAAAA,IAAKuC,IAAAA,0BACtCC,EAAKrK,KAAKyJ,YAAYa,OAAOlI,GAAKoD,MAAM,OAIXxF,KAAKuK,SAASF,MAA1CG,OAAQxB,OAAMyB,UACrBN,EAASnM,KAAKyM,GAGVD,GAAUA,EAAOhC,SAAS,KAAM,SACjBgC,EAAOtC,MAAM,QAA3BF,OAAMJ,WAENoB,SACHoB,EAA0B,CACxBhI,IAAAA,EACAsI,UAAW1K,OAEN,MAAQoC,EAAM,QASjBuI,EAAkB,SAAClJ,EAAOmJ,OACxBC,EAAapF,EAAemC,UAC3B,IAAIf,KAAK6B,aAAahC,OACxBkE,KAAmBC,IACrBzD,OAAO3F,IAGNqJ,EAAkB,SAACrJ,EAAOmJ,OACxBG,EAAatF,EAAemC,UAC3B,IAAIf,KAAKmE,YAAYtE,OACvBkE,KAAmBG,IACrBE,OAAOxJ,IAGNyJ,EAAiBlL,KAAK+J,cAAcU,GAEtC3E,EAAQoF,KACkB,iBAAnBA,SACDlD,OACH,SACHlC,EAAQ6E,EAAgBO,aAErB,SACHpF,EAAQgF,EAAgBI,iBAGxBpF,EAAQ,IAAIe,KAAKmE,YAAYtE,GAAQuE,OAAOC,QAGzC,GAAIA,GAA4C,WAA1BpD,EAAOoD,GAA6B,KACzD5C,EAAY/F,OAAOgG,KAAK2C,GAAgB,MAC1C,CAAC,SAAU,UAAU1C,SAASF,GAAY,OACnBhB,EAAiB,CACxCC,OAAQ2D,EAAe5C,KADlB7G,IAAAA,MAAOmF,IAAAA,WAGToB,IACHA,EAAOM,EAAU6C,iBAEC7C,EAAU6C,gBAAkBnD,SAExC,IAAIa,oCAENb,EAAKoD,2CACc9C,gBAIjBN,OACH,SACHlC,EAAQ6E,EAAgBlJ,EAAOmF,aAE5B,SACHd,EAAQgF,EAAgBrJ,EAAOmF,SAU/ByE,EAAiB,SAACC,UACfA,EAAEhG,QAAQ,MAAQ,QAAQA,QAAQ,MAAQ,mBAI1CyD,EAAgB,CACrBE,aARiB,aASjB7G,IAAK0D,EAAQuF,EAAevF,GAAS+B,EACrCmB,KAAAA,EACAhB,KAAM,WAER,MAAOuD,cAEExC,EAAgB,CACrBE,aAhBe,aAgBD7G,IAAK,IAAMiJ,EAAevF,GAAQkD,KAAAA,EAAMhB,KAAM,WAE9D,MAAOwD,OACDnJ,EAAIE,OAAOgG,KAAKS,GAAMyC,MAC1B,SAACC,UAAcA,EAAU7B,WAAW,YAEjCxH,QACG,IAAIa,6CAAsCmH,WAE3CtB,EAAgB,CACrBE,aA1Be,aA0BD7G,IAAKiJ,EAAehJ,GAAI2G,KAAAA,EAAMhB,KAAM,6CAKjD5F,UACAA,GAAOpC,KAAKyJ,YAAYC,cAActH,IAC3CpC,KAAKuK,SAASnI,EAAIoD,MAAM,IAAI/G,wCAGtB4L,cACFsB,EAAKtB,EAAGnC,MAAM,YACbyD,EAAGC,QAAO,SAACC,EAAKxJ,EAAGyJ,MACpBA,EAAIH,EAAGlN,OAAS,EAAG,MACf4D,KAAKwJ,SACH,IAAI3I,4BAAqBb,+BAAsBgI,eAEhDwB,EAAIxJ,OAIP0J,EAAMxJ,OAAOyJ,QAAQH,GAAKJ,MAAK,gBAAEC,mBAC9BrJ,IAAM4J,EAAKxC,YAAYa,OAAOoB,aAGhCK,EAAMA,EAAIG,OAAO7J,GAAK,KAC5BrC,KAAKkK,kDAGY9H,UACbA,EAAIyH,WAAW,oCAETzH,OACP0D,EAAQ1D,EAAI0D,MAAM,sJACjBA,GAASA,EAAM,SAxJ1B,GC6BO,WAAgBrE,EAAO0K,EAAMC,UAC/BA,EACID,EAAOA,EAAK1K,GAASA,GAExBA,GAAUA,EAAM0K,OACpB1K,EAAQ4K,QAAQC,QAAQ7K,IAElB0K,EAAO1K,EAAM0K,KAAKA,GAAQ1K,GAud3B,WAAgBuH,EAAMjJ,WAEvBP,EAASwJ,IACZ,MAAMuD,UACAxM,EAAQwM,UAEZ/M,GAAUA,EAAO2M,KACb3M,EAAO2M,UAAK,EAAQpM,GAErBP,EAphBD,WAAiBgN,EAAMC,EAAOhL,OAC/B+K,EAAKlB,EAAG,IACR7J,eAAwB,KACvBA,EAAM6J,cAMT7J,EAAMiL,EAAIC,EAAQC,KAAK,KAAMJ,EAAMC,IALvB,EAARA,IACHA,EAAQhL,EAAM6J,GAEf7J,EAAQA,EAAMa,KAMZb,GAASA,EAAM0K,iBAClB1K,EAAM0K,KAAKQ,EAAQC,KAAK,KAAMJ,EAAMC,GAAQE,EAAQC,KAAK,KAAMJ,EAAM,IAGtEA,EAAKlB,EAAImB,EACTD,EAAKlK,EAAIb,MACHoL,EAAWL,EAAKE,EAClBG,GACHA,EAASL,IA3DL,IAAMM,EAAsB,kCAE5BtK,UAAU2J,KAAO,SAASY,EAAaC,OACtCxN,EAAS,MACTiN,EAAQzM,KAAKsL,KACfmB,EAAO,KACJQ,EAAmB,EAARR,EAAYM,EAAcC,KACvCC,EAAU,OAEJzN,EAAQ,EAAGyN,EAASjN,KAAKsC,IAChC,MAAOiK,KACA/M,EAAQ,EAAG+M,UAEb/M,SAEAQ,iBAGJ0M,EAAI,SAASQ,WAEVzL,EAAQyL,EAAM5K,EACN,EAAV4K,EAAM5B,IACD9L,EAAQ,EAAGuN,EAAcA,EAAYtL,GAASA,GAC5CuL,IACFxN,EAAQ,EAAGwN,EAAWvL,MAEtBjC,EAAQ,EAAGiC,GAEnB,MAAO8K,KACA/M,EAAQ,EAAG+M,KAGd/M,KAhC0B,GAgE5B,WAAwB2N,UACvBA,gBAA0C,EAAbA,EAAS7B,EA6LvC,WAActB,EAAMoD,EAAQpE,WAC9BqE,IACK,KACJC,EAAiBtD,OACjBuD,EAAeD,KAClBA,EAAiBA,EAAehL,IAE5BgL,SACG9N,KAEJ8N,EAAenB,KAAM,CACxBkB,EAAQ,YAGL7N,EAASwJ,OACTxJ,GAAUA,EAAO2M,KAAM,KACtBoB,EAAe/N,GAEZ,CACN6N,EAAQ,QAFR7N,EAASA,EAAO8L,KAMd8B,EAAQ,KACPI,EAAcJ,OACdI,GAAeA,EAAYrB,OAASoB,EAAeC,GAAc,CACpEH,EAAQ,cAKPb,EAAO,MACPiB,EAASd,EAAQC,KAAK,KAAMJ,EAAM,UAC3B,IAAVa,EAAcC,EAAenB,KAAKuB,GAA8B,IAAVL,EAAc7N,EAAO2M,KAAKwB,GAAoBH,EAAYrB,KAAKyB,IAAqBzB,UAAK,EAAQsB,GACjJjB,WACEmB,EAAiBlM,GACzBjC,EAASiC,IACN,IACE2L,IACHI,EAAcJ,MACKI,EAAYrB,OAASoB,EAAeC,eACtDA,EAAYrB,KAAKyB,GAAoBzB,UAAK,EAAQsB,QAIpDH,EAAiBtD,MACOuD,EAAeD,KAAoBA,EAAehL,gBACjEkK,EAAM,EAAGhN,MAGd8N,EAAenB,iBAClBmB,EAAenB,KAAKuB,GAAkBvB,UAAK,EAAQsB,GAIhDF,EADJ/N,EAASwJ,OAERxJ,EAASA,EAAO8C,UAER9C,IAAWA,EAAO2M,MAC5B3M,EAAO2M,KAAKwB,GAAkBxB,UAAK,EAAQsB,YAEnCC,EAAiBJ,GACrBA,GACH9N,EAASwJ,MACKxJ,EAAO2M,KACpB3M,EAAO2M,KAAKwB,GAAkBxB,UAAK,EAAQsB,GAE3CE,EAAiBnO,KAGVgN,EAAM,EAAGhN,YAGVoO,KACJN,EAAiBtD,KAChBsD,EAAenB,KAClBmB,EAAenB,KAAKuB,GAAkBvB,UAAK,EAAQsB,GAEnDC,EAAiBJ,KAGVd,EAAM,EAAGhN,IA1Ob,WAAmBiC,EAAO0K,UACzB1K,GAASA,EAAM0K,KAAO1K,EAAM0K,KAAKA,GAAQA,EAAK1K,GAjC/C,WAAgBoM,UACf,eACD,IAAInI,EAAO,GAAIoG,EAAI,EAAGA,EAAIgC,UAAUrP,OAAQqN,IAChDpG,EAAKoG,GAAKgC,UAAUhC,cAGbO,QAAQC,QAAQuB,EAAEE,MAAM/N,KAAM0F,IACpC,MAAM6G,UACAF,QAAQoB,OAAOlB,KA5CzB,IAAayB,EAAwB,SACnCC,EAAQC,OAASC,yDAAe,mCAE3B3G,MAAMC,QAAQwG,SACX,IAAIpF,UACR,yEAGmB,mBAAZqF,QACH,IAAIrF,UACR,gFAGGuF,kBACDrC,EAIAsC,OAHAC,EAAIjC,QAAQoB,OACd,IAAIvK,MAAM,gHAIJzB,EAAQwM,EAAOtN,sCAGP2N,eAAZvC,6BAGIsC,QACI,IAAInL,MAAMiL,GAGbF,EAAOxP,SACV4P,GAAW,GAGbC,EAAIJ,EAAQzM,6BAGTsK,OAxBFqC,IC2CIG,EAAwB,SAACC,EAAiB9H,MACtB,iBAApB8H,QACH,IAAI3F,UACR,kEAGkB,iBAAXnC,QACH,IAAImC,UACR,sEAGM2F,EAAgBlJ,QAAQ,MAAQ,yBAAgBoB,qBCrE/C+H,EAAqB,gBAEhCnQ,IAAAA,OAAQoQ,IAAAA,IAAKvE,IAAAA,SAAUJ,IAAAA,cAAe4E,IAAAA,iBAAkBjI,IAAAA,OACxD4C,IAAAA,OAAQY,IAAAA,aACR0E,yBAAAA,aAA2B,IAC3BxE,IAAAA,0BACAyE,IAAAA,gCAEwC,iBAA7BD,QACH,IAAI/F,UAAU,oDAEhBiG,EAAiB,IAAIzF,EAAeC,GACpCyF,EAAmB,IAAIjF,EAAiBC,GACxCiF,EAAkB,IAAI/E,EAAgBC,EAAU,CAACH,cAAAA,IAIjDkF,EAAkB,sTACpBN,IACFA,EAAmBnH,MAAMC,QAAQkH,GAC7BA,EACA,CAACA,QAGD5F,EAAkB,gBAClBG,EADoB9G,IAAAA,IAAKyF,IAAAA,IAAKqH,IAAAA,cAEfJ,EAAerF,YAAYC,cAActH,GAE1D8G,EAAe4F,EAAe/F,gBAAgB3G,GACrC4M,EAAgBvF,YAAYC,cAActH,GACnD8G,EAAe8F,EAAgBjG,gBAAgB3G,EAAK,CAClDsE,OAAAA,EAAQyD,SAAAA,EAAUtC,IAAAA,EAClBuC,0BAAAA,IAI0B,mBAD5BlB,EAAegG,EAAO9M,MAEpB8G,EAAeA,EAAa,CAACrB,IAAAA,EAAKzF,IAAAA,KAOlCuM,EACFzF,EAAeyF,EAAiB/C,QAAO,SAACuD,EAAOC,UACtCA,EAAS,CACd3N,MAAO0N,EAAOtH,IAAAA,EAAKzF,IAAAA,EAAKsE,OAAAA,MAEzBwC,GACMrB,GAAOA,EAAI/B,MAAM,qDAC1BoD,EAAevB,EAAwB,CACrClG,MAAOyH,EAAcrB,IAAAA,EAAKzF,IAAAA,EAAKsE,OAAAA,KAG5BwC,GAGLmG,EAAsB,EACpBC,EAAiB,gBAAEpG,IAAAA,aAAcmB,IAAAA,GAAIxC,IAAAA,IAAK0H,IAAAA,iBAEpB,iBAAjBrG,GACPA,EAAaV,SAAS,KACtB,IACI6G,IAAwBT,QACpB,IAAI/F,UAAU,6CAGlBiG,EAAerF,YAAYC,cAAcW,GAAK,KAE5CmF,EADAC,EAAc1F,EAEdlC,IACF2H,EAAkB/J,EAAeoC,GACjC4H,OACK1F,KACAyF,IAGPtG,EAAeqG,EAAc,CAC3BnQ,IAAK8J,EAAcgG,OAAQO,EAC3B/E,UAAWoE,IAETU,GACFX,EAA6B,CAAC9E,cAAeyF,SAEtCR,EAAgBvF,YAAYC,cAAcW,KACnDnB,EAAeqG,EAAc,CAC3BnQ,IAAK8J,YAIJA,OAIJwF,EAAK,KAEJgB,GAAa,EA4BX3D,EA3BU,SAAVzG,SACJlG,IAAAA,QAAK8P,OAAAA,aAASnF,QACdW,UAAAA,aAAYqE,WAEL3P,EAAIkG,QAAQ2J,GAAiB,SAAC3I,EAAGf,EAAK8E,EAAIsF,EAAM9H,MACjDtC,EAAI9G,OAAS,SACR6H,KAEL8D,EAA0B,CAC5BhI,IAAKiI,EACLK,UAAAA,WAEOpE,MAEL4C,EAAeH,EAAgB,CAAC3G,IAAKiI,EAAIxC,IAAAA,EAAKqH,OAAAA,WAElDhG,EAAeoG,EAAe,CAC5BpG,aAAAA,EAAcmB,GAAAA,EAAIxC,IAAAA,EAAK0H,cAAejK,IAGxCoK,EAAaA,GACVxG,GAAwC,WAAxBpB,EAAOoB,IACxB,aAAcA,EAChBiB,EAASnM,KAAKqM,GACP9E,EAAM2D,KAGL5D,CAAQ,CAAClG,IAAKd,QACrBoR,SACHb,EAA6B,CAAC9E,cAAAA,IAC9BI,EAAS1L,OAAS,EACX4G,EAAoB0G,GAE7B5B,EAAS1L,OAAS,EAGpB4Q,EAAsB,MAiDhBO,EAhDuB,SAAvBC,SACJzQ,IAAAA,QAAK8P,OAAAA,aAASnF,QAAeW,UAAAA,aAAYqE,IAEnCa,EAAQ,GAKR/J,EAAQ,IAAIiK,OAAOb,EAAiB,MAEpCjR,EAAO,WACX4R,EAAM5R,WAAN4R,qBAGFhK,EAAaC,EAAOzG,EAAK,CACvB4G,MAAOhI,EACP+H,iBAASO,EAAGf,EAAK8E,EAAIsF,EAAM9H,MACrBuC,EAA0B,CAC5BhI,IAAKiI,EAAIK,UAAAA,IAET1M,EAAKsI,OACA,CACDf,EAAI9G,QACNT,EAAKuH,OAGH2D,EAAeH,EAAgB,CAAC3G,IAAKiI,EAAIxC,IAAAA,EAAKqH,OAAAA,IAClDhG,EAAeoG,EAAe,CAC5BpG,aAAAA,EAAcmB,GAAAA,EAAIxC,IAAAA,EAAK0H,cAAeM,IAEpCrI,MAAMC,QAAQyB,GAChBlL,iBAAQkL,IAIRA,GAAwC,WAAxBpB,EAAOoB,IACvB,aAAcA,EAEdlL,EAAKkL,EAAa6G,WAAU,IAE5B/R,EAAKkL,GAGTiB,EAASnM,KAAKqM,MAGXuF,EAEKC,CAAqB,CAACzQ,IAAKd,WAEzCuQ,EAA6B,CAAC9E,cAAAA,IAC9BI,EAAS1L,OAAS,EACXmR,EAAMI,KAAI,SAAClQ,SACI,iBAATA,EACFuF,EAAoBvF,GAEtBA,MCjLEqJ,EAA0B,wEAGnC,OADFF,aAAAA,aAAe,qBAGgB,mBAAjBA,EACVA,EACkB,eAAjBA,EACC,SAACgH,EAAS7N,OACJyJ,EAAMoE,GAA8B,WAAnBnI,EAAOmI,IAAwBA,EAAQjH,KACxDT,EAAO,GAGP2H,EAA2B,SAACrR,GAC3B0J,EAAK9J,SACR8J,EAAK,GAAK,IAEZA,EAAKA,EAAK9J,OAAS,IAAMI,GAE3B+G,EAPmC,WAOMxD,EAAK,CAG5C4D,MAAOkK,EACPnK,iBAASO,EAAGf,GAIV2K,EAAyB3K,GACzBgD,EAAKvK,KAAK,WAGRmS,EAAgB5H,EAAKyH,KAAI,SAAC3F,UACvBhF,EAAoBgF,MAGzB0B,GAAM,EACNqE,EAAUvE,SACdsE,EAAcE,MAAK,SAAChG,EAAIyB,EAAGwE,UACpBF,GAA8B,WAAnBtI,EAAOsI,KAKrBtE,IAAMwE,EAAI7R,OAAS,GACnB4L,KAAM+F,GAAWA,EAAQ/F,IAA8B,WAAvBvC,EAAOsI,EAAQ/F,KAC/C,YAAa+F,EAAQ/F,IAEU,iBAAxB+F,EAAQ/F,GAAIkG,UAEnBxE,EAAM,CACJtK,MAAO2O,EAAQ/F,GAAIkG,QACnBC,KAAMJ,EAAQ/F,KAGlB+F,EAAUA,EAAQ/F,IAEX,MAEF0B,GAEW,SAAjB9C,EACC,SAACgH,EAAS7N,OACJyJ,EAAMoE,GAA8B,WAAnBnI,EAAOmI,IAAwBA,EAAQjH,cAE5D6C,GAAsB,WAAf/D,EAAO+D,IACdzJ,KAAOyJ,GAAOA,EAAIzJ,IAA4B,WAApB0F,EAAO+D,EAAIzJ,KACrC,YAAayJ,EAAIzJ,IAEW,iBAArByJ,EAAIzJ,GAAKmO,UAET,CACL9O,MAAOoK,EAAIzJ,GAAKmO,QAChBC,KAAM3E,EAAIzJ,KAKI,UAAjB6G,EACC,SAACgH,EAAS7N,OACJyJ,EAAMoE,GAA8B,WAAnBnI,EAAOmI,IAAwBA,EAAQjH,cAE5D6C,GAAsB,WAAf/D,EAAO+D,IACdzJ,KAAOyJ,GAAOA,EAAIzJ,IAA4B,iBAAbyJ,EAAIzJ,KAE9B,CACLX,MAAOoK,EAAIzJ,KAKd,iBACK,IAAIyG,2CAAsCI,IAD/C,IC5HAwH,EAAkC,eAezCrR,2DARF,GALFmR,IAAAA,QACAG,IAAAA,SACAzH,IAAAA,iBACAG,cAAAA,aAAgBD,EAAwB,CAACF,aAAAA,MACzC7G,IAAAA,OAEmB,iBAARA,QACH,IAAIyG,UACR,6FAMmB,iBAAZ0H,EACTnR,EAAMmR,OACD,IACQ,IAAbG,GAAAA,MAAsBA,EAEtBtR,GAAM,MACD,CAAA,IAAIsR,GAAgC,WAApB5I,EAAO4I,SAMtB,IAAI7H,UACR,2EANFzJ,EAAMgK,EAAc,CAACJ,KAAM0H,GAAWtO,MAEpChD,EAAMA,EAAIqC,WAQF,IAARrC,QACI,IAAI8D,8CAAuCd,eAE5ChD,GC1BIuR,EAAwB,wEAgBjC,GAdFrS,IAAAA,OACAoI,IAAAA,OACA4C,IAAAA,OACAY,IAAAA,cACA0E,2BACAD,kBAAAA,aAAmB,CACjBhH,SAEFiJ,YAAAA,aAAcnC,QACd1E,cAAAA,oBACA2E,IAAAA,oBACAmC,gBAAAA,oBACAC,iCAAAA,oBACAC,+BAAAA,mBAEsB,iBAAXzS,QACH,IAAIuK,UACR,gHAIEmI,EAAmB,SAAC5R,UACjByR,EAAkBI,SAASC,eAAe9R,GAAOA,GAGpD+K,EAAW,GAYX0E,EAA+B,gBACpBK,IAAfnF,cAEIgH,GACFxO,OAAOgG,KAAK2G,GAAQiC,SAAQ,SAAC/O,OACtB+H,EAAS3B,SAASpG,SACf,IAAIc,sCAA+Bd,QAgB3CgI,EAA4B,gBAChChI,IAAAA,IAAKsI,IAAAA,UAEC0G,EAAW1G,EAAU2G,QAAQjP,MAC/BsI,EAAUjB,YAAYC,cAActH,KAASgP,EAAU,IACrDN,QACI,IAAI5N,wCAAiCd,WAEtC,SAEF,OAIN2H,IAAkB4E,IAClBmC,SAEME,EAAiB1S,GAErByL,IACHA,EAAgB,QAGZ6F,EAAQgB,EAAY,CACxBtS,OAAAA,EAAQoQ,IAAAA,EAAKvE,SAAAA,EAAUJ,cAAAA,EAAe4E,iBAAAA,EAAkBjI,OAAAA,EACxD4C,OAAAA,EAAQY,SAAAA,EACRE,0BAAAA,EACAyE,6BAAAA,OAEmB,iBAAVe,SACFoB,EAAiBpB,OAGpB0B,EAAYL,SAASM,gCAC3BD,EAAUE,aAAVF,IAAoB1B,IAEb0B,GCnCF,WAAgB7P,EAAO0K,EAAMC,UAC/BA,EACID,EAAOA,EAAK1K,GAASA,GAExBA,GAAUA,EAAM0K,OACpB1K,EAAQ4K,QAAQC,QAAQ7K,IAElB0K,EAAO1K,EAAM0K,KAAKA,GAAQ1K,GArB3B,WAAgBoM,UACf,eACD,IAAInI,EAAO,GAAIoG,EAAI,EAAGA,EAAIgC,UAAUrP,OAAQqN,IAChDpG,EAAKoG,GAAKgC,UAAUhC,cAGbO,QAAQC,QAAQuB,EAAEE,MAAM/N,KAAM0F,IACpC,MAAM6G,UACAF,QAAQoB,OAAOlB,KAoelB,WAAgBvD,EAAMjJ,WAEvBP,EAASwJ,IACZ,MAAMuD,UACAxM,EAAQwM,UAEZ/M,GAAUA,EAAO2M,KACb3M,EAAO2M,UAAK,EAAQpM,GAErBP,MAniBKiS,oBAaIC,cAAWhL,MACF,iBAAXA,QACH,IAAImC,UAAU,8BAEhB8I,EAAMC,EAAepD,EAAiB9H,MACzB,iBAARiL,QACH,IAAI9I,UACR,uFAIiBgJ,MAAMF,aAAnBG,MACc,MAAhBA,EAAKxS,aAID,IAAI4D,MAAM,yBAEK4O,EAAKC,iBAAtBC,SACC,CACLtL,OAAAA,EACAsL,QAAAA,qBAEKzG,MACU,gBAAbA,EAAIzM,WACAyM,WAEgB0G,EAAcvL,GAC/BgL,kEAnCT,OALFQ,QAAAA,aAAUC,UAAUC,gBACpBC,eAAAA,aAAiB,CAAC,eAClBT,eAAAA,aAAiBrD,QACjBC,gBAAAA,aAAkB,UAClByD,cAAAA,aAAgB,cAuCM,WAAlBA,EACFA,EAAgB,SAAUvL,OACnBA,EAAO8B,SAAS,WACb,IAAItF,MAAM,+BAGXwD,EAAOpB,QAAQ,uKAAS,UAE5B,GAA6B,mBAAlB2M,QACV,IAAIpJ,UAAU,0DAGTmF,cACPkE,KAAYG,IAChBX,EACA,gCCCG,WAAgBjQ,EAAO0K,EAAMC,UAC/BA,EACID,EAAOA,EAAK1K,GAASA,GAExBA,GAAUA,EAAM0K,OACpB1K,EAAQ4K,QAAQC,QAAQ7K,IAElB0K,EAAO1K,EAAM0K,KAAKA,GAAQ1K,OA9CrB6Q,0EAmBT,GAjBFJ,IAAAA,QACAG,IAAAA,eACA7D,IAAAA,gBACAoD,IAAAA,eACAK,IAAAA,cACAhJ,IAAAA,aACkBsJ,IAAlB5D,iBACAiC,IAAAA,YACU4B,IAAV9B,SACe+B,IAAf1I,kBACA2E,IAAKgE,oBACL7B,gBAAiB8B,gBACjB/D,IAAAA,6BACAkC,iCACE8B,oBACF7B,+BACE8B,6BAE8CpB,EAAkB,CAChES,QAAAA,EAASG,eAAAA,EAAgBT,eAAAA,EAAgBpD,gBAAAA,EAAiByD,cAAAA,qBADrDD,IAAAA,QAAiBc,IAARpM,WAIXsL,GAA8B,WAAnBlK,EAAOkK,SACf,IAAInJ,mDAENO,EAAgBD,EAAwB,CAACF,aAAAA,IACzCyB,EAAY,SAACtI,EAAK2H,gEAOpB,OANF4E,iBAAAA,aAAmB4D,QACnB7B,SAAAA,aAAW8B,QACX9D,IAAAA,aAAMgE,QACN7B,gBAAAA,aAAkB8B,QAClB7B,iCAAAA,aAAmC8B,QACnC7B,+BAAAA,aAAiC8B,IAE3BtC,EAAUnH,EAAc4I,EAAS5P,GACjC9D,EAASmS,EAAgC,CAC7CF,QAAUA,GAAWA,EAAQ9O,QAAU,EACvCiP,SAAAA,EACAtH,cAAAA,EACAhH,IAAAA,WAGKuO,EAAsB,CAC3BrS,OAAAA,EACAgL,OAAQ0I,EAAQe,MAAQf,EAAQe,KAAKzJ,OACrCY,SAAU8H,EAAQe,MAAQf,EAAQe,KAAK7I,SACvCxD,OAAQoM,EACRlE,yBAAAA,EACAD,iBAAAA,EACAiC,YAAAA,EACA7G,mBAAmB0I,KAAyB1I,GAC5C2E,IAAAA,EACAmC,gBAAAA,EACAC,iCAAAA,EACAC,+BAAAA,YAIJrG,EAAUoI,eAAiBA,EAC3BpI,EAAUsH,QAAUA,EAEpBtH,EAAUjE,KAAO,sCAAIf,2BAAAA,yBACZe,gBAAKqM,UAAmBpN,KAG1BgF"}